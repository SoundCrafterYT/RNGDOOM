// GZDOOM Compatibility
ACTOR RNGPlayer : DoomPlayer
{
	Player.DisplayName "Casual"
	Player.StartItem "RNGPistol"
	Player.StartItem "RNGFist"
	Player.WeaponSlot 1, RNGFist, RNGChainsaw
	Player.WeaponSlot 2, RNGPistol
	Player.WeaponSlot 3, RNGShotgun, RNGSShotgun
	Player.WeaponSlot 4, RNGChaingun
	Player.WeaponSlot 5, RNGRPG
	Player.WeaponSlot 6, RNGPlasma
	Player.WeaponSlot 7, RNGBFG
}

ACTOR Trooper : ZombieMan replaces ZombieMan
{
	Health 100
	DropItem "PistolSpawner", 48, 1
	DropItem "Clip"
	Mass 200
	BloodType "Blood"
	SeeSound "PossSight"
	DeathSound "PossDeath"
	ActiveSound "PossAct"
	PainSound "PossPain"
	States
	{
	Spawn:
		POSS AB 10 A_Look
		Loop
	See:
		POSS AABBCCDD 4 A_Chase
		Loop
	Missile:
		POSS E random(0, 10) A_FaceTarget
		POSS E 0 A_PlaySound ("Pistol", CHAN_WEAPON)
		POSS F 1 Bright A_CustomBulletAttack (frandom(1, 25), 0, 1, random(1,10), "BulletImpact", random(64, 2048), 0|CBAF_NORANDOM, AAPTR_TARGET)
		POSS E 15
		Goto See
	Pain:
		POSS G 1 A_Pain
		POSS G 5 
		Goto See
	Death:
		POSS H 5
		POSS I 5 A_Scream
		POSS J 5 A_NoBlocking
		POSS K 5
		POSS L -1
		Stop
	/*Death.Fire:
		POSS V 1 A_SpawnItemEx("Flame", frandom(-10,10), frandom(-10,10), frandom(0,56), frandom(-1,1), frandom(-1,1), frandom(0,2), angle, SXF_ABSOLUTEANGLE)
		POSS V 1 A_SpawnItemEx("Flame", frandom(-10,10), frandom(-10,10), frandom(0,56), frandom(-1,1), frandom(-1,1), frandom(0,2), angle, SXF_ABSOLUTEANGLE)
		POSS V 1 A_SpawnItemEx("Flame", frandom(-10,10), frandom(-10,10), frandom(0,56), frandom(-1,1), frandom(-1,1), frandom(0,2), angle, SXF_ABSOLUTEANGLE)
		POSS V 1 A_SpawnItemEx("Flame", frandom(-10,10), frandom(-10,10), frandom(0,56), frandom(-1,1), frandom(-1,1), frandom(0,2), angle, SXF_ABSOLUTEANGLE)
		POSS V 1 A_SpawnItemEx("Flame", frandom(-10,10), frandom(-10,10), frandom(0,56), frandom(-1,1), frandom(-1,1), frandom(0,2), angle, SXF_ABSOLUTEANGLE)
		POSS W 0 A_Scream
		POSS W 1 A_SpawnItemEx("Flame", frandom(-10,10), frandom(-10,10), frandom(0,56), frandom(-1,1), frandom(-1,1), frandom(0,2), angle, SXF_ABSOLUTEANGLE)
		POSS W 1 A_SpawnItemEx("Flame", frandom(-10,10), frandom(-10,10), frandom(0,56), frandom(-1,1), frandom(-1,1), frandom(0,2), angle, SXF_ABSOLUTEANGLE)
		POSS W 1 A_SpawnItemEx("Flame", frandom(-10,10), frandom(-10,10), frandom(0,56), frandom(-1,1), frandom(-1,1), frandom(0,2), angle, SXF_ABSOLUTEANGLE)
		POSS W 1 A_SpawnItemEx("Flame", frandom(-10,10), frandom(-10,10), frandom(0,56), frandom(-1,1), frandom(-1,1), frandom(0,2), angle, SXF_ABSOLUTEANGLE)
		POSS W 1 A_SpawnItemEx("Flame", frandom(-10,10), frandom(-10,10), frandom(0,56), frandom(-1,1), frandom(-1,1), frandom(0,2), angle, SXF_ABSOLUTEANGLE)
		POSS X 0 A_NoBlocking
		POSS X 1 A_SpawnItemEx("Flame", frandom(-10,10), frandom(-10,10), frandom(0,56), frandom(-1,1), frandom(-1,1), frandom(0,2), angle, SXF_ABSOLUTEANGLE)
		POSS X 1 A_SpawnItemEx("Flame", frandom(-10,10), frandom(-10,10), frandom(0,56), frandom(-1,1), frandom(-1,1), frandom(0,2), angle, SXF_ABSOLUTEANGLE)
		POSS X 1 A_SpawnItemEx("Flame", frandom(-10,10), frandom(-10,10), frandom(0,56), frandom(-1,1), frandom(-1,1), frandom(0,2), angle, SXF_ABSOLUTEANGLE)
		POSS X 1 A_SpawnItemEx("Flame", frandom(-10,10), frandom(-10,10), frandom(0,56), frandom(-1,1), frandom(-1,1), frandom(0,2), angle, SXF_ABSOLUTEANGLE)
		POSS X 1 A_SpawnItemEx("Flame", frandom(-10,10), frandom(-10,10), frandom(0,56), frandom(-1,1), frandom(-1,1), frandom(0,2), angle, SXF_ABSOLUTEANGLE)
		POSS Y 1 A_SpawnItemEx("Flame", frandom(-10,10), frandom(-10,10), frandom(0,56), frandom(-1,1), frandom(-1,1), frandom(0,2), angle, SXF_ABSOLUTEANGLE)
		POSS Y 1 A_SpawnItemEx("Flame", frandom(-10,10), frandom(-10,10), frandom(0,56), frandom(-1,1), frandom(-1,1), frandom(0,2), angle, SXF_ABSOLUTEANGLE)
		POSS Y 1 A_SpawnItemEx("Flame", frandom(-10,10), frandom(-10,10), frandom(0,56), frandom(-1,1), frandom(-1,1), frandom(0,2), angle, SXF_ABSOLUTEANGLE)
		POSS Y 1 A_SpawnItemEx("Flame", frandom(-10,10), frandom(-10,10), frandom(0,56), frandom(-1,1), frandom(-1,1), frandom(0,2), angle, SXF_ABSOLUTEANGLE)
		POSS Y 1 A_SpawnItemEx("Flame", frandom(-10,10), frandom(-10,10), frandom(0,56), frandom(-1,1), frandom(-1,1), frandom(0,2), angle, SXF_ABSOLUTEANGLE)
		POSS Z -1*/
	XDeath:
		POSS M 1 A_SpawnItemEx ("BloodSplat", 0, 0, 0, velx, vely, velz)
		POSS M 1 A_SpawnItemEx ("BloodSplat", 0, 0, 0, velx, vely, velz)
		POSS M 1 A_SpawnItemEx ("BloodSplat", 0, 0, 0, velx, vely, velz)
		POSS M 1 A_SpawnItemEx ("BloodSplat", 0, 0, 0, velx, vely, velz)
		POSS M 1 A_SpawnItemEx ("BloodSplat", 0, 0, 0, velx, vely, velz)
		POSS N 0 A_XScream
		POSS N 1 A_SpawnItemEx ("BloodSplat", 0, 0, 0, velx, vely, velz)
		POSS N 1 A_SpawnItemEx ("BloodSplat", 0, 0, 0, velx, vely, velz)
		POSS N 1 A_SpawnItemEx ("BloodSplat", 0, 0, 0, velx, vely, velz)
		POSS N 1 A_SpawnItemEx ("BloodSplat", 0, 0, 0, velx, vely, velz)
		POSS N 1 A_SpawnItemEx ("BloodSplat", 0, 0, 0, velx, vely, velz)
		POSS O 0 A_NoBlocking
		POSS O 1 A_SpawnItemEx ("BloodSplat", 0, 0, 0, velx, vely, velz)
		POSS O 1 A_SpawnItemEx ("BloodSplat", 0, 0, 0, velx, vely, velz)
		POSS O 1 A_SpawnItemEx ("BloodSplat", 0, 0, 0, velx, vely, velz)
		POSS O 1 A_SpawnItemEx ("BloodSplat", 0, 0, 0, velx, vely, velz)
		POSS O 1 A_SpawnItemEx ("BloodSplat", 0, 0, 0, velx, vely, velz)
		POSS PPPPPQQQQQRRRRRSSSSSTTTTT 1 A_SpawnItemEx ("BloodSplat", 0, 0, 0, velx, vely, velz)
		POSS U -1
		Stop
	Raise:
		POSS K 5
		POSS JIH 5
		Goto See
	}
}
ACTOR SgTrooper : ShotgunGuy replaces ShotgunGuy
{
	Health 110
	DropItem "SGSpawner"
	Mass 200
	BloodType "Blood"
	SeeSound "SargSight"
	PainSound "SargPain"
	DeathSound "SargDeath"
	ActiveSound "SargAct"
	States
	{
	Spawn:
		SPOS AB 10 A_Look
		Loop
	See:
		SPOS AABBCCDD 3 A_Chase
		Loop
	Missile:
		SPOS E random(0, 10) A_FaceTarget
		SPOS F 0 bright A_PlaySound("Shotgun", CHAN_WEAPON)
		SPOS F 1 bright A_CustomBulletAttack(frandom(11, 34), 0, random(1,5), random(1, 12), "BulletImpact", frandom(64, 2048), 0|CBAF_NORANDOM, AAPTR_TARGET)
		SPOS E 19
		Goto See
	Pain:
		SPOS G 3
		SPOS G 3 A_Pain
		Goto See
	Death:
		SPOS H 5
		SPOS I 5 A_Scream
		SPOS J 5 A_NoBlocking
		SPOS K 5
		SPOS L -1
		Stop
	XDeath:
		SPOS M 1 A_SpawnItemEx ("BloodSplat", 0, 0, 0, velx, vely, velz)
		SPOS M 1 A_SpawnItemEx ("BloodSplat", 0, 0, 0, velx, vely, velz)
		SPOS M 1 A_SpawnItemEx ("BloodSplat", 0, 0, 0, velx, vely, velz)
		SPOS M 1 A_SpawnItemEx ("BloodSplat", 0, 0, 0, velx, vely, velz)
		SPOS M 1 A_SpawnItemEx ("BloodSplat", 0, 0, 0, velx, vely, velz)
		SPOS N 0 A_XScream
		SPOS N 1 A_SpawnItemEx ("BloodSplat", 0, 0, 0, velx, vely, velz)
		SPOS N 1 A_SpawnItemEx ("BloodSplat", 0, 0, 0, velx, vely, velz)
		SPOS N 1 A_SpawnItemEx ("BloodSplat", 0, 0, 0, velx, vely, velz)
		SPOS N 1 A_SpawnItemEx ("BloodSplat", 0, 0, 0, velx, vely, velz)
		SPOS N 1 A_SpawnItemEx ("BloodSplat", 0, 0, 0, velx, vely, velz)
		SPOS O 0 A_NoBlocking
		SPOS O 1 A_SpawnItemEx ("BloodSplat", 0, 0, 0, velx, vely, velz)
		SPOS O 1 A_SpawnItemEx ("BloodSplat", 0, 0, 0, velx, vely, velz)
		SPOS O 1 A_SpawnItemEx ("BloodSplat", 0, 0, 0, velx, vely, velz)
		SPOS O 1 A_SpawnItemEx ("BloodSplat", 0, 0, 0, velx, vely, velz)
		SPOS O 1 A_SpawnItemEx ("BloodSplat", 0, 0, 0, velx, vely, velz)
		SPOS PPPPPQQQQQRRRRRSSSSTTTTT 1 A_SpawnItemEx ("BloodSplat", 0, 0, 0, velx, vely, velz)
		SPOS U -1
		Stop
	Raise:
		SPOS L 5
		SPOS KJIH 5
		Goto See
	}
}
ACTOR Heavy : ChaingunGuy replaces ChaingunGuy
{
	Health 120
	DropItem "ChaingunSpawner"
	Mass 200
	BloodType "Blood"
	SeeSound "HeavySight"
	PainSound "HeavyPain"
	DeathSound "HeavyDeath"
	ActiveSound "HeavyAct"
	States
	{
	Spawn:
		CPOS AB 10 A_Look
		Loop
	See:
		CPOS AABBCCDD 3 A_Chase
		Loop
	Missile:
		CPOS E random(1, 10) A_FaceTarget
		CPOS F 0 Bright A_PlaySound("Shotgun", CHAN_WEAPON)
		CPOS F 4 Bright A_CustomBulletAttack(frandom(5, 22.5), 0, 1, random(1,10), "BulletImpact", random(64,2048), 0|CBAF_NORANDOM, AAPTR_TARGET)
		CPOS E 0 Bright A_PlaySound("Shotgun", CHAN_WEAPON)
		CPOS E 4 Bright A_CustomBulletAttack(frandom(5, 22.5), 0, 1, random(1,10), "BulletImpact", random(64,2048), 0|CBAF_NORANDOM, AAPTR_TARGET)
		CPOS F 1 A_CPosRefire
		Goto Missile+1
	Pain:
		CPOS G 3
		CPOS G 3 A_Pain
		Goto See
	Death:
		CPOS H 5
		CPOS I 5 A_Scream
		CPOS J 5 A_NoBlocking
		CPOS KLM 5
		CPOS N -1
		Stop
	XDeath:
		CPOS O 1 A_SpawnItemEx ("BloodSplat", 0, 0, 0, velx, vely, velz)
		CPOS O 1 A_SpawnItemEx ("BloodSplat", 0, 0, 0, velx, vely, velz) 
		CPOS O 1 A_SpawnItemEx ("BloodSplat", 0, 0, 0, velx, vely, velz) 
		CPOS O 1 A_SpawnItemEx ("BloodSplat", 0, 0, 0, velx, vely, velz) 
		CPOS O 1 A_SpawnItemEx ("BloodSplat", 0, 0, 0, velx, vely, velz)
		CPOS P 0 A_XScream
		CPOS P 1 A_SpawnItemEx ("BloodSplat", 0, 0, 0, velx, vely, velz)
		CPOS P 1 A_SpawnItemEx ("BloodSplat", 0, 0, 0, velx, vely, velz)
		CPOS P 1 A_SpawnItemEx ("BloodSplat", 0, 0, 0, velx, vely, velz)
		CPOS P 1 A_SpawnItemEx ("BloodSplat", 0, 0, 0, velx, vely, velz)
		CPOS P 1 A_SpawnItemEx ("BloodSplat", 0, 0, 0, velx, vely, velz)
		CPOS Q 0 A_NoBlocking
		CPOS Q 1 A_SpawnItemEx ("BloodSplat", 0, 0, 0, velx, vely, velz)
		CPOS Q 1 A_SpawnItemEx ("BloodSplat", 0, 0, 0, velx, vely, velz)
		CPOS Q 1 A_SpawnItemEx ("BloodSplat", 0, 0, 0, velx, vely, velz)
		CPOS Q 1 A_SpawnItemEx ("BloodSplat", 0, 0, 0, velx, vely, velz)
		CPOS Q 1 A_SpawnItemEx ("BloodSplat", 0, 0, 0, velx, vely, velz)
		CPOS RRRRRSSSSS 1 A_SpawnItemEx ("BloodSplat", 0, 0, 0, velx, vely, velz)
		CPOS T -1
		Stop
	Raise:
		CPOS N 5
		CPOS MLKJIH 5
		Goto See
	}
}
ACTOR Imp : DoomImp replaces DoomImp
{
	Health 160
	Mass 250
	BloodType "Blood"
	SeeSound "impsight"
	PainSound "imppain"
	DeathSound "impdeath"
	ActiveSound "impactive"
	States
	{
	Spawn:
		TROO AB 10 A_Look
		Loop
	See:
		TROO AABBCCDD 3 A_Chase
		Loop
	Melee:
	Missile:
		TROO E 0 A_FaceTarget
		TROO EEEEEEEE 1 A_SpawnItemEx("Flame", frandom(-4, 4)+10, frandom(-4 ,4)+22, frandom(-4, 4)+25, frandom(-1, 1), frandom(-1, 1), frandom(0, 0.5), angle, SXF_ABSOLUTEANGLE)
		TROO F 0 A_FaceTarget
		TROO FFFFFFFF 1 A_SpawnItemEx("Flame", frandom(-4, 4)-15, frandom(-4 ,4)+10, frandom(-4, 4)+32, frandom(-1, 1), frandom(-1, 1), frandom(0, 0.5), angle, SXF_ABSOLUTEANGLE)
		TROO G 6 A_CustomComboAttack("ImpFire", 32, random(3,24), "imp/melee")
		Goto See
	Pain:
		TROO H 2
		TROO H 2 A_Pain
		Goto See
	Death:
		TROO I 8
		TROO J 8 A_Scream
		TROO K 6
		TROO L 6 A_NoBlocking
		TROO M -1
		Stop
	XDeath:
		TROO N 1 A_SpawnItemEx ("BloodSplat", 0, 0, 0, velx, vely, velz)
		TROO N 1 A_SpawnItemEx ("BloodSplat", 0, 0, 0, velx, vely, velz)
		TROO N 1 A_SpawnItemEx ("BloodSplat", 0, 0, 0, velx, vely, velz)
		TROO N 1 A_SpawnItemEx ("BloodSplat", 0, 0, 0, velx, vely, velz)
		TROO N 1 A_SpawnItemEx ("BloodSplat", 0, 0, 0, velx, vely, velz)
		TROO O 0 A_XScream
		TROO O 1 A_SpawnItemEx ("BloodSplat", 0, 0, 0, velx, vely, velz)
		TROO O 1 A_SpawnItemEx ("BloodSplat", 0, 0, 0, velx, vely, velz)
		TROO O 1 A_SpawnItemEx ("BloodSplat", 0, 0, 0, velx, vely, velz)
		TROO O 1 A_SpawnItemEx ("BloodSplat", 0, 0, 0, velx, vely, velz)
		TROO O 1 A_SpawnItemEx ("BloodSplat", 0, 0, 0, velx, vely, velz)
		TROO P 1 A_SpawnItemEx ("BloodSplat", 0, 0, 0, velx, vely, velz)
		TROO P 1 A_SpawnItemEx ("BloodSplat", 0, 0, 0, velx, vely, velz)
		TROO P 1 A_SpawnItemEx ("BloodSplat", 0, 0, 0, velx, vely, velz)
		TROO P 1 A_SpawnItemEx ("BloodSplat", 0, 0, 0, velx, vely, velz)
		TROO P 1 A_SpawnItemEx ("BloodSplat", 0, 0, 0, velx, vely, velz)
		TROO Q 0 A_NoBlocking
		TROO Q 1 A_SpawnItemEx ("BloodSplat", 0, 0, 0, velx, vely, velz)
		TROO Q 1 A_SpawnItemEx ("BloodSplat", 0, 0, 0, velx, vely, velz)
		TROO Q 1 A_SpawnItemEx ("BloodSplat", 0, 0, 0, velx, vely, velz)
		TROO Q 1 A_SpawnItemEx ("BloodSplat", 0, 0, 0, velx, vely, velz)
		TROO Q 1 A_SpawnItemEx ("BloodSplat", 0, 0, 0, velx, vely, velz)
		TROO RRRRRSSSSSTTTTT 1 A_SpawnItemEx ("BloodSplat", 0, 0, 0, velx, vely, velz)
		TROO U -1
		Stop
	Raise:
		TROO ML 8
		TROO KJI 6
		Goto See
	}
}
ACTOR Pinky : Demon replaces Demon
{
	Health 200
	Mass 300
	BloodType "Blood"
	SeeSound "demonsight"
	AttackSound "demonmelee"
	PainSound "demonpain"
	DeathSound "demondeath"
	ActiveSound "demonactive"
	States
	{
	Spawn:
		SARG AB 10 A_Look
		Loop
	See:
		SARG AABBCCDD 2 Fast A_Chase
		Loop
	Melee:
		SARG EF 8 Fast A_FaceTarget
		SARG G 8 Fast A_CustomMeleeAttack(random(4, 40), "demonmelee")
		Goto See
	Pain:
		SARG H 2 Fast
		SARG H 2 Fast A_Pain
		Goto See
	Death:
		SARG I 8
		SARG J 8 A_Scream
		SARG K 4
		SARG L 4 A_NoBlocking
		SARG M 4
		SARG N -1
		Stop
	Raise:
		SARG N 5
		SARG MLKJI 5
		Goto See
  }
}
ACTOR InvisPinky : Pinky replaces Spectre
{
	+SHADOW
	RenderStyle OptFuzzy
	Alpha 0.5
	Health 250
	Mass 300
	BloodType "Blood"
	SeeSound "spectresight"
	AttackSound "spectremelee"
	PainSound "spectrepain"
	DeathSound "spectredeath"
	ActiveSound "spectreactive"
}
ACTOR Soul : LostSoul replaces LostSoul
{
	Health 30
	Mass 75
	BloodType "Blood"
	AttackSound "skullmelee"
	PainSound "skullpain"
	DeathSound "skulldeath"
	ActiveSound "skullactive"
	States
	{
	Spawn:
		SKUL AB 10 Bright A_Look
		Loop
	See:
		SKUL AB 6 Bright A_Chase
		Loop
	Missile:
		SKUL C random(0, 10) Bright A_FaceTarget
		SKUL D 4 Bright A_SkullAttack(frandom(12, 32))
		SKUL CD 4 Bright
		Goto Missile+2
	Pain:
		SKUL E 3 Bright
		SKUL E 3 Bright A_Pain
		Goto See
	Death:
		SKUL F 6 Bright
		SKUL G 6 Bright A_Scream
		SKUL H 6 Bright
		SKUL I 6 Bright A_NoBlocking
		SKUL J 6
		SKUL K 6
		Stop
	}
}
ACTOR Meatball : CacoDemon replaces CacoDemon
{
	Health 800
	Mass 1000
	BloodColor "Blue"
	BloodType "Blood"
	SeeSound "cacosight"
	PainSound "cacopain"
	DeathSound "cacodeath"
	ActiveSound "cacoactive"
	States
	{
	Spawn:
		HEAD A 10 A_Look
		Loop
	See:
		HEAD A 3 A_Chase
		Loop
	Missile:
		HEAD BC random(0,5) A_FaceTarget
		//HEAD D 5 Bright A_HeadAttack
		HEAD D 5 Bright A_CustomComboAttack("CacoFire", 32, random(10,60))
		Goto See
	Pain:
		HEAD E 6 A_Pain
		HEAD F 6
		Goto See
	Death:
		HEAD G 8 A_Scream
		HEAD H 8
		HEAD IJ 8
		HEAD K 8 A_NoBlocking
		HEAD L -1 A_SetFloorClip
		Stop
	Raise:
		HEAD L 8 A_UnSetFloorClip
		HEAD KJIHG 8
		Goto See
	}
}
ACTOR OneEyed : PainElemental replaces PainElemental
{
	Health 900
	Mass 1100
	BloodType "Blood"
	SeeSound "painsight"
	PainSound "painpain"
	DeathSound "paindeath"
	ActiveSound "painactive"
}
ACTOR Fatman : Fatso replaces Fatso
{
	Health 1000
	Mass 2300
	BloodType "Blood"
	SeeSound "fatsosight"
	PainSound "fatsopain"
	DeathSound "fatsodeath"
	ActiveSound "fatsoactive"
}
ACTOR Satan : BaronOfHell replaces BaronOfHell
{
	Health 1500
	Mass 1200
	BloodColor "Green"
	BloodType "Blood"
	SeeSound "baronsight"
	PainSound "baronpain"
	DeathSound "barondeath"
	ActiveSound "baronactive"
}
ACTOR BrotherSatan : HellKnight replaces HellKnight
{
	Health 1200
	Mass 1100
	BloodColor "Green"
	BloodType "Blood"
	SeeSound "knightsight"
	ActiveSound "knightactive"
	PainSound "knightpain"
	DeathSound "knightdeath"
}
ACTOR Arch : Archvile replaces Archvile
{
	Health 800
	Mass 320
	BloodType "Blood"
	SeeSound "vilesight"
	PainSound "vilepain"
	DeathSound "viledeath"
	ActiveSound "vileactive"
	MeleeSound "vilestop"
}
ACTOR SpookyBoi : Revenant replaces Revenant
{
	Health 200
	Mass 190
	BloodType "Blood"
	SeeSound "skeletonsight"
	PainSound "skeletonpain"
	DeathSound "skeletondeath"
	ActiveSound "skeletonactive"
	MeleeSound "skeletonmelee"
}
ACTOR Cyber : CyberDemon replaces CyberDemon
{
	Health 3000
	Mass 2000
	BloodType "Blood"
	SeeSound "cybersight"
	PainSound "cyberpain"
	DeathSound "cyberdeath"
	ActiveSound "cyberactive"
}
ACTOR SpiderMech : Arachnotron replaces Arachnotron
{
	Health 220
	Mass 800
	BloodType "Blood"
	SeeSound "babysight"
	PainSound "babypain"
	DeathSound "babydeath"
	ActiveSound "babyactive"
}
ACTOR SpiderDemon : SpiderMastermind replaces SpiderMastermind
{
	Health 5000
	Mass 5000
	BloodType "Blood"
	SeeSound "spidersight"
	AttackSound "spiderattack"
	PainSound "spiderpain"
	DeathSound "spiderdeath"
	ActiveSound "spideractive"
}
ACTOR Brain : BossBrain replaces BossBrain
{
	Health 500
	Mass 10000000
	BloodType "Blood"
	PainSound "brainpain"
	DeathSound "braindeath"
}
ACTOR TestWeapon : DoomWeapon //For particle testing
{				//I might make it into a debug weapon or smth.
	+Weapon.NOAUTOFIRE
	States
	{
	Ready:
		TNT1 A 1 A_WeaponReady
		Loop
	Select:
		TNT1 A 1 A_Raise(10)
		Loop
	Deselect:
		TNT1 A 1 A_Lower(10)
		Loop
	AltFire:
		TNT1 A 1 A_SpawnParticle("FF0000", SPF_RELATIVE, 100, 10, 0, 0, 0, 32, 1, 0, 0, 0.25, 0, 0, 1.0)
		TNT1 A 1 A_ReFire
		Goto Ready
	Fire:
		TNT1 AAAAAAAAAA 0 A_FireProjectile("FireProjectile", frandom(-14,14), false, 2, -5)
		TNT1 AAAAAAAAAA 0 A_FireProjectile("FireProjectile", frandom(-14,14), false, -2, -5)
		TNT1 A 1
		Goto Ready
	}
}

ACTOR RNGChainsaw : Chainsaw 
{
	Weapon.Kickback 0
	Weapon.SelectionOrder 2200
	Weapon.UpSound "weaponssawup"
	Decal "Bullet"
	+WEAPON.MELEEWEAPON
	States
	{
	Ready:
		TNT1 A 0 A_JumpIfInventory ("DblSawUpgrade", 1, "DblReady")
		TNT1 A 0 A_StartSound ("weaponssawidle")
		SAWG C 1 A_WeaponReady
		SAWG CCCDDDD 1 A_WeaponReady
		Loop
	DblReady:
		TNT1 A 0 A_StartSound ("weaponssawidle")
		DSAW C 1 A_WeaponReady
		DSAW CCCDDDD 1 A_WeaponReady
		Loop
	Select:
		TNT1 A 0 A_JumpIfInventory ("DblSawUpgrade", 1, "DblSelect")
		SAWG CCCCDDDD 1 A_Raise (5)
		Loop
	DblSelect:
		DSAW CCCCDDDD 1 A_Raise (5)
		Loop
	Deselect:
		TNT1 A 0 A_JumpIfInventory ("DblSawUpgrade", 1, "DblDeselect")
		SAWG CCCCDDDD 1 A_Lower (5)
		Loop
	DblDeselect:
		DSAW CCCCDDDD 1 A_Lower (5)
		Loop
	Fire:
		TNT1 A 0 A_JumpIfInventory ("DblSawUpgrade", 1, "DblFire")
		TNT1 A 0 A_GunFlash
		TNT1 A 0 A_StartSound ("weaponssawfull", 1, CHANF_LOOPING)
		SAWG AB random(1, 5) A_Saw (None, "weaponssawhit", random(2, 15), "BulletImpact", 0, random(40, 128), 0, 0)
		SAWG A 0 A_ReFire
		SAWG A 0 A_StopSound (1)
		Goto Ready
	DblFire:
		DSAW A 0 A_GunFlash
		DSAW A 0 A_StartSound ("weaponssawfull", 1, CHANF_LOOPING)
		DSAW AB 4 A_Saw (None, "weaponssawhit", random(1, 50), "BulletImpact", 0, 100, 8, 0)
		DSAW A 0 A_ReFire
		DSAW A 0 A_StopSound (1)
		Goto DblReady
	Flash:
		TNT1 A 1 A_WeaponOffset(random(1, -1), random(33, 31))
		TNT1 A 1 A_WeaponOffset(random(1, -1), random(33, 31))
		TNT1 A 1 A_WeaponOffset(random(1, -1), random(33, 31))
		TNT1 A 1 A_WeaponOffset(random(1, -1), random(33, 31))
		TNT1 A 1 A_WeaponOffset(random(1, -1), random(33, 31))
		TNT1 A 1 A_WeaponOffset(random(1, -1), random(33, 31))
		TNT1 A 1 A_WeaponOffset(random(1, -1), random(33, 31))
		TNT1 A 1 A_WeaponOffset(random(1, -1), random(33, 31))
		TNT1 A 1 A_WeaponOffset(random(1, -1), random(33, 31))
		TNT1 A 1 A_WeaponOffset(random(1, -1), random(33, 31))
		TNT1 A 0 A_SetPitch(0, SPF_INTERPOLATE)
		Goto LightDone
	}
}

ACTOR RNGFist : Fist replaces Fist
{
	Weapon.SelectionOrder 3700
	Weapon.SlotNumber 1
	+WEAPON.MELEEWEAPON
	states
	{
	Ready:
		PUNG A 1 A_WeaponReady
		Loop
	Select:
		PUNG A 1 A_Raise (10)
		Loop
	Deselect:
		PUNG A 1 A_Lower (10)
		Loop
	Fire:
		TNT1 A 0 A_JumpIfInventory ("PowerStrength", 1, "Fire.Berserk")
		PUNG B random(1, 4)
		PUNG C random(1, 4)
		PUNG D 0
		{
			A_GiveInventory("Angle1", random(0, 18000000000));
			A_WeaponOffset((CountInv("Angle1")/-10000000)*2+64, 32);
			A_SetAngle (angle+(CountInv("Angle1")-9000000000)/10000000);
			A_CustomPunch (random(25, 80), true, CPF_NOTURN, "BulletImpact", frandom(64, 80), 0, 0, None, "Punch", "skeletonswing");
			A_SetAngle (angle-(CountInv("Angle1")-9000000000)/10000000);
			A_TakeInventory("Angle1");
		}
		PUNG D random(1, 6)
		PUNG C random(1, 4)
		PUNG B random(1, 5)
		PUNG A 1 A_ReFire
		Goto Ready
	Fire.Berserk:
		PUNG B random(1, 4)
		PUNG C random(1, 4)
		PUNG D 0 A_SetAngle (angle+frandom(-6, 6), SPF_INTERPOLATE)
		PUNG D random(2, 6) A_CustomPunch (random(80, 250), true, CPF_NOTURN, "BulletImpact", frandom(64, 80), 0, 0, None, "Punch", "skeletonswing")
		PUNG C random(2, 4)
		PUNG B random(3, 5)
		PUNG A 1 A_ReFire
		Goto Ready
	}	
}

ACTOR RNGPistol : Pistol
{
	Weapon.SelectionOrder 1900
	Decal "Bullet"
	Weapon.SlotNumber 2
	Weapon.AmmoUse 1
	Weapon.AmmoGive 0
	Weapon.AmmoType "Clip"
	states
	{
	Ready:
		PISG A 0 A_JumpIfInventory ("PistolUpgrade", 1, "HeavyReady")
		PISG A 0 A_JumpIfInventory("SquibBullets", 1, "SquibReady")
		PISG A 1 A_WeaponReady
		Loop
	HeavyReady:
		DEGL A 1 A_WeaponReady
		Loop
	SquibReady:
		PISG A 1 A_WeaponReady
		Loop
	Select:
		PISG A 0 A_JumpIfInventory ("PistolUpgrade", 1, "HeavySelect")
		PISG A 0 A_SetPitch (0)
		PISG A 1 A_Raise (8)
		Loop
	HeavySelect:
		DEGL A 0 A_SetPitch (0)
		DEGL A 1 A_Raise (8)
		Loop
	Deselect:
		PISG A 0 A_JumpIfInventory ("PistolUpgrade", 1, "HeavyDeselect")
		PISG A 0 A_SetPitch (0)
		PISG A 1 A_Lower (8)
		Loop
	HeavyDeselect:
		DEGL A 0 A_SetPitch (0)
		DEGL A 1 A_Lower (8)
		Loop
	Fire:
		PISG A 0 A_JumpIfInventory ("PistolUpgrade", 1, "HeavyFire")
		PISG A 0 A_JumpIfInventory("SquibBullets" ,1, "SquibFire")
		PISG A 0 A_JumpIf(CallACS("SkillChecker")==4, 3)
		PISG A 0 A_Jump(2, "SquibLoad")
		PISG A 0 A_Jump(256, 2)
		PISG A 0 A_Jump(256, "Squibload")
		PISG A 0 A_GunFlash
		PISG A 0 A_StartSound ("Pistol", 1)
		PISG A 0 A_FireBullets (frandom(2, 7), 0, -1, random(1, 75), "BulletImpact", 1|FBF_PUFFTARGET|FBF_NORANDOM, random(1, 2048))
		PISG A 0 A_JumpIf(CallACS("Recoil")==false, 2)
		PISG A 0 A_SetAngle(frandom(angle-4, +angle+4), SPF_INTERPOLATE)
		PISG B 1
		PISG C 1
		PISG E 3
		PISG D 4
		PISG B 3
		PISG A 2
		Goto Ready
	HeavyFire:
		DEGL B 0 A_GunFlash
		DEGL B 0 A_StartSound ("Deagle", 1, CHANF_OVERLAP)
		DEGL B 0 A_FireBullets (frandom(0, 4), 0, -1, random(50, 125), "BulletImpact", 1|FBF_PUFFTARGET|FBF_NORANDOM, random(1, 2048))
		DEGL B 0 A_JumpIf(CallACS("Recoil")==false, 2)
		DEGL B 0 A_SetAngle(frandom(angle-8, +angle+8), SPF_INTERPOLATE)
		DEGL B 1
		DEGL C 5
		DEGL D 6
		DEGL A 5
		Goto HeavyReady
	SquibLoad:
		PISG A 0 A_GiveInventory ("SquibBullets", 1)
		PISG A 0 A_StartSound ("PistolSquib", 1)
		PISG B 1
		PISG C 3
		PISG B 5
		PISG A 2
		Goto SquibReady
	SquibFire:
		PISG H 0 A_GunFlash
		PISG H 0 A_StartSound ("PistolExplode", 1, CHANF_OVERLAP)
		PISG H 0 A_StartSound ("PistolExplode2", 1, CHANF_OVERLAP)
		PISG H 0 A_DamageSelf (random(0, 10))
		PISG H 0 A_TakeInventory ("SquibBullets", 1)
		PISG H 0 A_FireBullets (180, 180, 20, 150, "BulletImpact", 1|FBF_PUFFTARGET|FBF_NORANDOM, random(1, 1024))
		PISG H 1
		PISG I 1
		PISG J 1
		PISG H 4
		PISG G 19
		PISG G 6 A_WeaponOffset (13, 32)
		PISG F 26
		PISG F 10 A_WeaponOffset(-20, 32)
		PISG K 26 A_StartSound("skeletonswing")
		PISG K 10 A_WeaponOffset (-3, 32)
		PISG K 0 A_JumpIfInventory ("PistolUpgrade", 1, "HeavySelect")
		PISG K 1 A_TakeInventory ("RNGPistol", 1)
		Goto Ready
	Flash:
		TNT1 A 0 A_JumpIfInventory("PistolUpgrade", 1, "Flash3")
		TNT1 A 0 A_JumpIfInventory("SquibBullets" ,1, "Flash2")
		TNT1 A 0 A_JumpIf(CallACS("Recoil")==true, "PistolRecoil")
		PISF A 1 Bright A_Light1
		Goto LightDone
	Flash3:
		TNT1 A 0 A_JumpIf(CallACS("Recoil")==true, "DeagleRecoil")
		DEGF A 0 A_Jump (128, 3)
		DEGF A 1 Bright A_Light (3)
		TNT1 A 0 A_Jump (256, 2)
		DEGF B 1 Bright A_Light (3)
		TNT1 A 0
		Goto LightDone
	DGLFlash:
		TNT1 A 0 A_Jump (128, 3)
		DEGF A 1 Bright A_Light(3)
		TNT1 A 0 A_Jump (256, 2)
		DEGF B 1 Bright A_Light(3)
		TNT1 A 1
		Goto LightDone
	DeagleRecoil:
		DEGF B 0 A_Overlay (2, "DGLFlash")
		TNT1 A 0 A_SetPitch (0)
		TNT1 A 1 A_SetViewPitch (pitch-5)
		TNT1 A 0 A_Light0
		TNT1 AA 1 A_SetPitch (pitch+1, SPF_INTERPOLATE)
		TNT1 AA 1 A_SetPitch (pitch+0.5, SPF_INTERPOLATE)
		TNT1 AAAA 1 A_SetPitch (pitch+0.25, SPF_INTERPOLATE)
		TNT1 AAAAAAAA 1 A_SetPitch (pitch+0.125, SPF_INTERPOLATE)
		TNT1 A 0 A_SetViewPitch (0)
		TNT1 A 1 A_SetPitch (0)
		Goto LightDone
	PistolRecoil:
		PISF A 0 Bright A_Light1
		PISF A 0 A_SetPitch (0)
		PISF A 1 A_SetViewPitch (pitch-2)
		TNT1 A 0 A_Light0
		TNT1 AA 1 A_SetPitch (pitch+0.5, SPF_INTERPOLATE)
		TNT1 AAAA 1 A_SetPitch (pitch+0.25, SPF_INTERPOLATE)
		TNT1 A 0 A_SetViewPitch (0)
		TNT1 A 1 A_SetPitch (0)
		Goto LightDone
	Flash2:
		PISF A 1 A_QuakeEx (9, 9, 9, 18, 0, 64, None, QF_SCALEDOWN|QF_RELATIVE|QF_3D, 0, 0, 0, 0, 0, 9)
		PISF A 1 Bright A_Light1
		Goto LightDone
	}
}

ACTOR RNGShotgun : Shotgun
{
	Weapon.SelectionOrder 1300
	Weapon.SlotNumber 3
	Decal "Bullet"
	Weapon.AmmoUse 1
	Weapon.AmmoGive 0
	Weapon.AmmoType "Shell"
	+WEAPON.NOALERT
	States
	{
	Ready:
		SHTG A 0 A_JumpIfInventory("ScopeUpgrade", 1, "ScopeReady")
		SHTG A 0 A_JumpIfInventory("SquibShells", 1, "SquibReady")
		SHTG A 0 A_SetCrosshair(2)
		SHTG A 1 A_WeaponReady
		Loop
	SquibReady:
		SHTG A 1 A_WeaponReady
		Loop
	ScopeReady:
		SSHG A 0 A_JumpIf(GetPlayerInput(INPUT_BUTTONS, -1) & BT_ALTATTACK, "AimStart")
		SSHG A 1 A_WeaponReady
		Loop
	Select:
		SHTG A 0 A_JumpIfInventory("ScopeUpgrade", 1, "ScopeSelect")
		SHTG A 1 A_Raise (7)
		Loop
	ScopeSelect:
		SSHG A 1 A_Raise(5)
		Loop
	Deselect:
		SHTG A 0 A_JumpIfInventory("ScopeUpgrade", 1, "ScopeDeselect")
		SHTG A 1 A_Lower (7)
		Loop
	ScopeDeselect:
		SSHG A 1 A_Lower(5)
		Loop
	Fire:
		TNT1 A 0 A_JumpIfInventory("AimDownScope", 1, "Fire2")
		SHTG A 0 A_JumpIfInventory("ScopeUpgrade", 1, "ScopeFire")
		SHTG A 0 A_JumpIfInventory("SquibShells", 1, "SquibFire")
		SHTG A 0 A_JumpIf(CallACS("SkillChecker")==4, 3)
		SHTG A 0 A_Jump(2, "SquibLoad")
		SHTG A 0 A_Jump(256, 2)
		SHTG A 0 A_Jump(256, "Squibload")
		SHTG A 0 A_AlertMonsters
		SHTG A 0 A_GunFlash
		SHTG A 0 A_StartSound ("Shotgun", 1, CHANF_OVERLAP)
		SHTG A 0 A_FireBullets (frandom(5, 12), 0, random(1, 8), random(25, 110), "BulletImpact", 1|FBF_PUFFTARGET|FBF_NORANDOM, random(1, 2048))
		SHTG A 0 A_JumpIf(CallACS("Recoil")==false, 2)
		SHTG A 0 A_SetAngle(frandom(angle-1, +angle+1), SPF_INTERPOLATE)
		SHTG C 3
		SHTG B 4
		SHTG A 1
		SHTG D 0 A_CheckReload
		SHTG D random (3, 12)
		SHTG E random (2, 11)
		SHTG F random (1, 10) A_StartSound ("Re-", 1, CHANF_OVERLAP)
		SHTG E random (2, 11) A_StartSound ("-load", 1, CHANF_OVERLAP)
		SHTG D 5
		SHTG A 3
		SHTG A 3 A_ReFire
		Goto Ready
	Fire2:
		TNT1 A 0 A_JumpIf(CallACS("HDSniperScope")==true, "HDFire2")
		SGHT A 0 A_JumpIf(CallACS("AimCharging")==100, "ChargedFire2")
		SGHT A 0 A_TakeInventory("AimCharge")
		SGHT A 0 A_AlertMonsters
		SGHT A 0 A_GunFlash
		SGHT A 0 A_StartSound ("Shotgun", 1, CHANF_OVERLAP)
		SGHT A 0 A_FireBullets (frandom(0, 0.5), 0, -1, random(99, 225), "BulletImpact", 1|FBF_PUFFTARGET|FBF_NORANDOM, 4096)
		SGHT A 18
		SGHT A 4 A_StartSound ("Re-", 1, CHANF_OVERLAP)
		SGHT A 5 A_StartSound ("-Load", 1, CHANF_OVERLAP)
		SGHT A 5
		SGHT A 3
		SGHT A 1 A_ReFire("Fire2")
		Goto UnScope
	ChargedFire2:
		TNT1 A 0 A_JumpIf(CallACS("HDSniperScope")==true, "ChargedHDFire2")
		SGHT A 0 A_TakeInventory("AimCharge")
		SGHT A 0 A_AlertMonsters
		SGHT A 0 A_GunFlash
		SGHT A 0 A_StartSound ("Shotgun", 1, CHANF_OVERLAP)
		SGHT A 0 A_FireBullets (frandom(0, 0.5), 0, -1, random(56*4, 225*4), "BulletImpact", 1|FBF_PUFFTARGET|FBF_NORANDOM, 4096)
		SGHT A 18
		SGHT A 4 A_StartSound ("Re-", 1, CHANF_OVERLAP)
		SGHT A 5 A_StartSound ("-Load", 1, CHANF_OVERLAP)
		SGHT A 5
		SGHT A 3
		SGHT A 1 A_ReFire("Fire2")
		Goto UnScope
	HDFire2:
		SGHT C 0 A_JumpIf(CallACS("AimCharging")==100, "ChargedHDFire2")
		SGHT C 0 A_TakeInventory("AimCharge")
		SGHT C 0 A_AlertMonsters
		SGHT C 0 A_GunFlash
		SGHT C 0 A_StartSound ("Shotgun", 1, CHANF_OVERLAP)
		SGHT C 0 A_FireBullets (frandom(0, 0.5), 0, -1, random(99, 225), "BulletImpact", 1|FBF_PUFFTARGET|FBF_NORANDOM, 4096)
		SGHT C 18
		SGHT C 4 A_StartSound ("Re-", 1, CHANF_OVERLAP)
		SGHT C 5 A_StartSound ("-Load", 1, CHANF_OVERLAP)
		SGHT C 5
		SGHT C 3
		SGHT C 1 A_ReFire("HDFire2")
		Goto HDUnScope
	ChargedHDFire2:
		SGHT C 0 A_TakeInventory("AimCharge")
		SGHT C 0 A_AlertMonsters
		SGHT C 0 A_GunFlash
		SGHT C 0 A_StartSound ("Shotgun", 1, CHANF_OVERLAP)
		SGHT C 0 A_FireBullets (frandom(0, 0.5), 0, -1, random(56*4, 225*4), "BulletImpact", 1|FBF_PUFFTARGET|FBF_NORANDOM, 4096)
		SGHT C 18
		SGHT C 4 A_StartSound ("Re-", 1, CHANF_OVERLAP)
		SGHT C 5 A_StartSound ("-Load", 1, CHANF_OVERLAP)
		SGHT C 5
		SGHT C 3
		SGHT C 1 A_ReFire("HDFire2")
		Goto HDUnScope
	AimStart:
		SSHG A 0 A_GiveInventory("AimDownScope")
		SSHG A 5 A_ZoomFactor(4)
		Goto Aiming
	Aiming:
		TNT1 A 0 A_JumpIf(CallACS("HDSniperScope")==true, "HDAiming")
		SGHT A 0 ACS_NamedExecute("AimCharging")
		SGHT A 1 A_WeaponReady(WRF_NOBOB)
		SGHT A 0 A_ReFire("Aiming")
		Goto Unscope
	HDAiming:
		SGHT C 0 A_WeaponOffset(-0.3, -0.25)
		SGHT A 0 ACS_NamedExecute("AimCharging")
		SGHT C 1 A_WeaponReady(WRF_NOBOB)
		SGHT C 0 A_ReFire("HDAiming")
		Goto HDUnScope
	UnScope:
		SGHT A 0 A_JumpIf(GetPlayerInput(INPUT_BUTTONS, -1) & BT_ALTATTACK, "Aiming")
		SGHT A 0 A_TakeInventory("AimCharge")
		SGHT A 5 A_ZoomFactor(1)
		SGHT A 1 A_TakeInventory("AimDownScope")
		Goto ScopeReady
	HDUnScope:
		SGHT C 0 A_JumpIf(GetPlayerInput(INPUT_BUTTONS, -1) & BT_ALTATTACK, "HDAiming")
		SGHT A 0 A_TakeInventory("AimCharge")
		SGHT C 5 A_ZoomFactor(1)
		SGHT C 1 A_TakeInventory("AimDownScope")
		SGHT C 0 A_WeaponOffset(0, 32)
		Goto ScopeReady
	ScopeFire:
		SSHG A 0 A_AlertMonsters
		SSHG A 0 A_GunFlash
		SSHG A 0 A_StartSound ("Shotgun", 1, CHANF_OVERLAP)
		SSHG A 0 A_FireBullets (frandom(0, 5), 0, -1, random(99, 225), "BulletImpact", 1|FBF_PUFFTARGET|FBF_NORANDOM, random(64, 4096))
		SSHG A 1 A_WeaponOffset(0, 38)
		SSHG AA 1 A_WeaponOffset(0, -2, WOF_ADD)
		SSHG AA 1 A_WeaponOffset(0, -1, WOF_ADD)
		SSHG A 3
		SSHG B 0 A_CheckReload
		SSHG BC 5
		SSHG D 4 A_StartSound ("Re-", 1, CHANF_OVERLAP)
		SSHG C 5 A_StartSound ("-load", 1, CHANF_OVERLAP)
		SSHG B 5
		SSHG A 3
		SSHG A 3 A_ReFire
		Goto Ready
	SquibFire:
		SHI2 A 0 A_GunFlash
		SHI2 A 0 A_FireBullets (180, 180, 50, 100, "BulletImpact", 1|FBF_PUFFTARGET|FBF_NORANDOM, random(1, 1024))
		SHI2 A 0 A_StartSound ("ShotExplode")
		SHI2 A 0 A_DamageSelf (random(0, 50))
		SHI2 A 0 A_TakeInventory ("SquibShells", 1)
		SHI2 A 1 Bright
		SHI2 BCDEFGHIJKLM 1 Bright
		TNT1 A 17
		SHIT A 1
		SHIT A 0 A_TakeInventory ("RNGShotgun", 1)
		SHIT A 1
		Goto Ready
	SquibLoad:
		TNT1 A 0 A_GiveInventory ("SquibShells", 1)
		SHTG A 0 A_StartSound ("ShotSquib", 1)
		SHTG C 3
		SHTG B 4
		SHTG A 1
		Goto SquibReady
	Flash:
		SHTF A 0 A_JumpIfInventory("SquibShells", 1, "Flash2")
		SHTF A 0 A_JumpIf(CallACS("Recoil")==true, "FlashRecoil")
		SHTF A 0 A_JumpIfInventory("AimDownScope", 1, "AimFlash")
		SHTF A 0 A_JumpIfInventory("ScopeUpgrade", 1, "ScopeFlash")
		TNT1 A 0 A_Jump(128, 3)
		SHTF A 1 Bright A_Light2
		TNT1 A 0 A_Jump(256, 2)
		SHTF B 1 Bright A_Light2
		TNT1 A 0
		Goto LightDone
	ShotgunFlash:
		TNT1 A 0 A_Jump(128, 3)
		SHTF A 1 Bright A_Light2
		TNT1 A 0 A_Jump(256, 2)
		SHTF B 1 Bright A_Light2
		TNT1 A 1
		Goto LightDone
	ScopeFlash:
		TNT1 A 0 A_Jump(128, 3)
		SSHF A 1 Bright A_Light2
		TNT1 A 0 A_Jump(256, 2)
		SSHF B 1 Bright A_Light2
		TNT1 A 1
		Goto LightDone
	AimFlash:
		TNT1 A 0 A_JumpIf(CallACS("HDSniperScope")==true, 2)
		SGHT A 1 A_Light2
		SGHT A 0 A_Jump(256, 3)
		SGHT C 0 A_WeaponOffset(-0.3, -0.25)
		SGHT C 1 A_Light2
		SGHT A 0
		Goto LightDone
	FlashRecoil:
		TNT1 A 0 A_JumpIfInventory("AimDownScope", 1, "AimFlashRecoil")
		TNT1 A 0 A_JumpIfInventory("ScopeUpgrade", 1, 3)
		TNT1 A 0 A_Overlay(2, "ShotgunFlash")
		TNT1 A 0 A_Jump(256, 2)
		TNT1 A 0 A_Overlay(2, "ScopeFlash")
		TNT1 A 0 A_SetPitch(0)
		TNT1 A 1 A_SetViewPitch(pitch-4)
		TNT1 A 0 A_Light0
		TNT1 A 1 A_SetPitch(pitch+1, SPF_INTERPOLATE)
		TNT1 AA 1 A_SetPitch(pitch+0.5, SPF_INTERPOLATE)
		TNT1 AAAA 1 A_SetPitch(pitch+0.25, SPF_INTERPOLATE)
		TNT1 AAAAAAAA 1 A_SetPitch(pitch+0.125, SPF_INTERPOLATE)
		TNT1 A 0 A_SetViewPitch(0)
		TNT1 A 1 A_SetPitch(0)
		Goto LightDone
	AimFlashRecoil:
		TNT1 A 0 A_Overlay(2, "AimFlash")
		TNT1 A 0 A_SetPitch (0)
		TNT1 A 1 A_SetViewPitch (pitch-2)
		TNT1 A 0 A_Light0
		TNT1 A 1 A_SetPitch (pitch+0.5, SPF_INTERPOLATE)
		TNT1 AA 1 A_SetPitch (pitch+0.25, SPF_INTERPOLATE)
		TNT1 AAAA 1 A_SetPitch (pitch+0.125, SPF_INTERPOLATE)
		TNT1 AAAAAAAA 1 A_SetPitch (pitch+0.0625, SPF_INTERPOLATE)
		TNT1 A 0 A_SetViewPitch (0)
		TNT1 A 1 A_SetPitch (0)
		Goto LightDone
	Flash2:
		TNT1 A 0 A_SetAngle (angle+frandom(12, -12))
		TNT1 A 0 A_SetPitch (pitch+frandom(0, 3))
		SHIT B 1 A_Light1
		TNT1 A 0 A_Light0
		TNT1 A 0 A_SetAngle (angle+frandom(12, -8))
		SHIT B 1 A_SetPitch (pitch+frandom(0, 2.5))
		TNT1 A 0 A_SetAngle (angle+frandom(8, -8))
		SHIT A 1 A_SetPitch (pitch+frandom(0, 2))
		TNT1 A 0 A_SetAngle (angle+frandom(8, -4))
		SHIT A 1 A_SetPitch (pitch+frandom(0, 1.5))
		TNT1 A 0 A_SetAngle (angle+frandom(4, -4))
		SHIT A 1 A_SetPitch (pitch+frandom(0, 1))
		TNT1 A 0 A_SetAngle (angle+frandom(4, 0))
		SHIT A 1 A_SetPitch (pitch+frandom(0, 0.5))
		SHIT A 1 A_SetPitch (0)
		SHIT A 24
		SHIT A 1 A_TakeInventory ("RNGShotgun", 1)
		Goto LightDone
	Flash2Recoil:
		TNT1 A 1 A_SetPitch (0)
		TNT1 A 1 A_SetPitch (pitch-2)
		TNT1 A 1 A_SetPitch (pitch+0.25)
		TNT1 A 1 A_SetPitch (pitch+0.25)
		TNT1 AAAAAAAA 1 A_SetPitch (pitch+0.125)
		TNT1 AAAAAAAA 1 A_SetPitch (pitch+0.0625)
		TNT1 A 1 A_SetPitch (0)
		Goto LightDone
	}
}

ACTOR RNGSShotgun : SuperShotgun //This might be the longest code for a weapon I ever made
{
	Weapon.SelectionOrder 400
	Weapon.SlotNumber 3
	Decal "Bullet"
	Weapon.AmmoType "Shell"
	Weapon.AmmoUse 2
	Weapon.AmmoGive 0
	States
	{
	Ready:
		TNT1 A 0 A_JumpIf(CallACS("Always50BMGAmmo")==true, "CursedReady")
		TNT1 A 0 A_JumpIfInventory ("QuadUpgrade", 1, "QuadReady")
		SHT2 A 0 A_SetCrosshair(3)
		SHT2 A 1 A_WeaponReady
		Loop
	CursedReady:
		SHT2 A 1 A_WeaponReady
		Loop
	QuadReady:
		TNT1 A 0 A_JumpIf(CallACS("Always50BMGAmmo")==true, "QuadCursedReady")
		QSSG A 0 A_SetCrosshair(3)
		QSSG A 1 A_WeaponReady
		Loop
	QuadCursedReady:
		QSSG A 1 A_WeaponReady
		Loop
	Select:
		TNT1 A 0 A_JumpIfInventory ("QuadUpgrade", 1, "QuadSelect")
		TNT1 A 0 A_SetPitch (0)
		TNT1 A 0 A_SetViewPitch (0)
		SHT2 A 1 A_Raise
		Loop
	QuadSelect:
		TNT1 A 0 A_SetPitch (0)
		TNT1 A 0 A_SetViewPitch (0)
		QSSG A 1 A_Raise
		Loop
	Deselect:
		TNT1 A 0 A_JumpIfInventory ("QuadUpgrade", 1, "QuadDeselect")
		TNT1 A 0 A_SetPitch (0)
		TNT1 A 0 A_SetViewPitch (0)
		SHT2 A 1 A_Lower
		Loop
	QuadDeselect:
		TNT1 A 0 A_SetPitch (0)
		TNT1 A 0 A_SetViewPitch (0)
		QSSG A 1 A_Lower
		Loop
	Fire:
		TNT1 A 0 A_JumpIfInventory ("QuadUpgrade", 1, "QuadFire")
		TNT1 A 0 A_JumpIfInventory ("NailShells", 1, "FlechetteFire")
		TNT1 A 0 A_JumpIf(CallACS("Always50BMGAmmo")==true, "CursedFire")
		TNT1 A 0 A_JumpIfInventory ("PowerSSG", 1, "CursedFire")
		SHT2 A 0 A_GunFlash
		SHT2 A 0 A_StartSound ("SShotgun", 1, Chanf_Overlap)
		SHT2 A 0 A_FireBullets (random(4, 20), random(2, 10), random(1, 10)*2, random(3, 25)*2, "BulletImpact", 1|FBF_PUFFTARGET|FBF_NORANDOM, random(1, 4096)) 
		SHT2 A 1 A_WeaponOffset (0, 38)
		SHT2 A 1 A_WeaponOffset (0, 37)
		SHT2 A 1 A_WeaponOffset (0, 36)
		SHT2 A 1 A_WeaponOffset (0, 35)
		SHT2 A 2 A_WeaponOffset (0, 34)
		SHT2 A 2 A_WeaponOffset (0, 33)
		SHT2 A 2 A_WeaponOffset (0, 32)
		SHT2 B 0 A_CheckReload
		TNT1 A 0 A_JumpIf(CallACS("Always50BMGAmmo")==true, "CursedFastReload")
		TNT1 A 0 A_Jump (32, "FlechetteReload")
		TNT1 A 0 A_Jump (32, "CursedReload")
		SHT2 BC random(2, 4)
		SHT2 D random(3, 5)
		SHT2 E random(5, 9) A_StartSound ("SgRl1", 1, Chanf_Overlap)
		SHT2 F random(4, 7)
		SHT2 G random(3, 11) 
		SHT2 H random(5, 7) A_StartSound ("SgRl2", 1, Chanf_Overlap)
		SHT2 I random(3, 5)
		SHT2 J random(5, 10) A_StartSound ("SgRl3", 1, Chanf_Overlap)
		SHT2 A 2
		SHT2 A 2 A_ReFire
		Goto Ready
	QuadFire:
		TNT1 A 0 A_JumpIf(CallACS("Always50BMGAmmo")==true, "QuadCursedFire")
		TNT1 A 0 A_JumpIfInventory ("PowerSSG", 1, "QuadCursedFire")
		QSSG A 0 A_GunFlash ("QuadFlash")
		QSSG A 0 A_StartSound ("QuadShotgun", 1, Chanf_Overlap)
		QSSG A 0 A_TakeInventory ("Shell", 4)
		QSSG A 0 A_FireBullets (random(4, 20), random(2, 10), random(1, 10)*4, random(3, 25)*4, "BulletImpact", 0|FBF_PUFFTARGET|FBF_NORANDOM, random(1, 4096)) 
		QSSG A 0 A_Recoil (10)
		QSSG A 1 A_WeaponOffset (0, 38)
		QSSG A 1 A_WeaponOffset (0, 37)
		QSSG A 1 A_WeaponOffset (0, 36)
		QSSG A 1 A_WeaponOffset (0, 35)
		QSSG A 2 A_WeaponOffset (0, 34)
		QSSG A 2 A_WeaponOffset (0, 33)
		QSSG A 2 A_WeaponOffset (0, 32)
		QSSG B 0 A_CheckReload
		TNT1 A 0 A_JumpIf(CallACS("Always50BMGAmmo")==true, "QuadCursedFastReload")
		TNT1 A 0 A_Jump (32, "QuadCursedReload")
		QSSG B random(2, 4)
		QSSG CD random(3, 5)
		QSSG E random(5, 9) A_StartSound ("SgRl1", 1, Chanf_Overlap)
		QSSG F random(4, 7)
		QSSG G random(3, 11) A_StartSound ("SgRl2", 1, Chanf_Overlap)
		QSSG H random(5, 7)
		QSSG I random(3, 5)
		QSSG J random(5, 10) A_StartSound ("SgRl3", 1, Chanf_Overlap)
		QSSG A 2
		QSSG A 2 A_ReFire
		Goto Ready
	QuadCursedFire:
		QSSG A 0 A_GunFlash ("QuadFlash")
		QSSG A 0 A_StartSound ("QuadBMGShotgun", 1, Chanf_Overlap)
		TNT1 A 0 A_JumpIf(CallACS("Always50BMGAmmo")==true, 6)
		QSSG A 0 A_FireBullets (3, -1, -1, random(50, 200), "BulletImpact", 0|FBF_PUFFTARGET|FBF_NORANDOM, 4096)
		QSSG A 0 A_FireBullets (3, -1, -1, random(50, 200), "BulletImpact", 0|FBF_PUFFTARGET|FBF_NORANDOM, 4096)
		QSSG A 0 A_FireBullets (3, -1, -1, random(50, 200), "BulletImpact", 0|FBF_PUFFTARGET|FBF_NORANDOM, 4096)
		QSSG A 0 A_FireBullets (3, -1, -1, random(50, 200), "BulletImpact", 0|FBF_PUFFTARGET|FBF_NORANDOM, 4096)
		TNT1 A 0 A_Jump (256, 5)
		QSSG A 0 A_TakeInventory("Shell", 4)
		QSSG A 0 A_FireBullets (3, -1, -1, random(50, 200), "BulletImpact", 0|FBF_PUFFTARGET|FBF_NORANDOM, 4096)
		QSSG A 0 A_FireBullets (3, -1, -1, random(50, 200), "BulletImpact", 0|FBF_PUFFTARGET|FBF_NORANDOM, 4096)
		QSSG A 0 A_FireBullets (3, -1, -1, random(50, 200), "BulletImpact", 0|FBF_PUFFTARGET|FBF_NORANDOM, 4096)
		QSSG A 0 A_FireBullets (3, -1, -1, random(50, 200), "BulletImpact", 0|FBF_PUFFTARGET|FBF_NORANDOM, 4096)
		QSSG A 0 A_Recoil(20)
		QSSG A 0 A_Recoil(20)
		QSSG A 0 A_Recoil(20)
		QSSG A 0 A_Recoil(20)
		QSSG A 0 A_QuakeEx (9, 9, 2, 12, 0, 64, None, QF_SCALEDOWN|QF_RELATIVE|QF_3D)
		QSSG A 1 A_WeaponOffset (0, 38)
		QSSG A 1 A_WeaponOffset (0, 37)
		QSSG A 1 A_WeaponOffset (0, 36)
		QSSG A 1 A_WeaponOffset (0, 35)
		QSSG A 1 A_WeaponOffset (0, 34)
		QSSG A 1 A_WeaponOffset (0, 33)
		QSSG A 1 A_WeaponOffset (0, 32)
		QSSG B 0 A_CheckReload
		TNT1 A 0 A_JumpIf(CallACS("Always50BMGAmmo")==true, "QuadCursedFastReload")
		TNT1 A 0 A_TakeInventory ("PowerSSG", 1)
		QSSG B random(2, 4)
		QSSG CD random(3, 5)
		QSSG E random(5, 9) A_StartSound ("SgRl1", 1, Chanf_Overlap)
		QSSG F random(4, 7)
		QSSG G random(3, 11) A_StartSound ("SgRl2", 1, Chanf_Overlap)
		QSSG H random(5, 7)
		QSSG I random(3, 5)
		QSSG J random(5, 10) A_StartSound ("SgRl3", 1, Chanf_Overlap)
		QSSG A 2
		QSSG A 2 A_ReFire
		Goto QuadReady
	QuadCursedReload:
		TNT1 A 0 A_JumpIfInventory("First50BMGUse", 1, "QuadCursedFastReload")
		QSSG B random(2, 4)
		QSSG CD random(3, 5)
		QSSG E random(5, 9) A_StartSound ("SgRl1", 1, Chanf_Overlap)
		QSSG K 25
		SHT2 L 36
		SHT2 L 1 A_WeaponOffset (0, 30)
		SHT2 L 1 A_WeaponOffset (0, 28)
		SHT2 L 1 A_WeaponOffset (0, 30)
		SHT2 L 8 A_WeaponOffset (0, 32)
		QSSG K 18
		TNT1 A 0 A_GiveInventory ("PowerSSG", 1)
		QSSG G random(3, 11) A_StartSound ("SgRl2", 1, Chanf_Overlap)
		QSSG H random(5, 7)
		QSSG I random(3, 5)
		QSSG J random(5, 10) A_StartSound ("SgRl3", 1, Chanf_Overlap)
		TNT1 A 0 A_GiveInventory ("First50BMGUse", 1)
		QSSG A 2
		QSSG A 2 A_ReFire
		Goto QuadCursedReady
	QuadCursedFastReload:
		QSSG B random(2, 4)
		QSSG CD random(3, 5)
		QSSG E random(5, 9) A_StartSound ("SgRl1", 1, Chanf_Overlap)
		QSSG K random(4, 7)
		TNT1 A 0 A_GiveInventory ("PowerSSG", 1)
		QSSG G random(3, 11) A_StartSound ("SgRl2", 1, Chanf_Overlap)
		QSSG H random(5, 7)
		QSSG I random(3, 5)
		QSSG J random(5, 10) A_StartSound ("SgRl3", 1, Chanf_Overlap)
		QSSG A 2
		QSSG A 2 A_ReFire
		Goto QuadCursedReady
	FlechetteReload:
		SHT2 B random(2, 4)
		SHT2 CD random(3, 5)
		SHT2 T random(5, 9) A_StartSound ("SgRl1", 1, Chanf_Overlap)
		SHT2 N random(4, 7)
		TNT1 A 0 A_GiveInventory ("NailShells", 1)
		SHT2 P random(3, 11) A_StartSound ("SgRl2", 1, Chanf_Overlap)
		SHT2 H random(5, 7)
		SHT2 I random(3, 5)
		SHT2 J random(5, 10) A_StartSound ("SgRl3", 1, Chanf_Overlap)
		SHT2 A 2
		SHT2 A 2 A_ReFire
		Goto Ready
	FlechetteFire:
		SHT2 A 0 A_TakeInventory ("NailShells", 1)
		SHT2 A 0 A_GunFlash
		SHT2 A 0 A_StartSound ("SShotgun", 1, Chanf_Overlap)
		SHT2 AAAAAAAAAA 0 A_FireProjectile("NailFlechette", frandom(-6,6), false, -4, -2)
		SHT2 AAAAAAAAAA 0 A_FireProjectile("NailFlechette", frandom(-6,6), false, 4, -2) 
		SHT2 A 1 A_WeaponOffset (0, 38)
		SHT2 A 1 A_WeaponOffset (0, 37)
		SHT2 A 1 A_WeaponOffset (0, 36)
		SHT2 A 1 A_WeaponOffset (0, 35)
		SHT2 A 2 A_WeaponOffset (0, 34)
		SHT2 A 2 A_WeaponOffset (0, 33)
		SHT2 A 2 A_WeaponOffset (0, 32)
		SHT2 B 0 A_CheckReload
		TNT1 A 0 A_JumpIf(CallACS("Always50BMGAmmo")==true, "CursedFastReload")
		TNT1 A 0 A_Jump (32, "CursedReload")
		SHT2 B random(2, 4)
		SHT2 CO random(3, 5)
		SHT2 E random(5, 9) A_StartSound ("SgRl1", 1, Chanf_Overlap)
		SHT2 F random(4, 7)
		SHT2 G random(3, 11) A_StartSound ("SgRl2", 1, Chanf_Overlap)
		SHT2 H random(5, 7)
		SHT2 I random(3, 5)
		SHT2 J random(5, 10) A_StartSound ("SgRl3", 1, Chanf_Overlap)
		SHT2 A 2
		SHT2 A 2 A_ReFire
		Goto Ready
	CursedFire:
		SHT2 A 0 A_GunFlash ("BMGFlash")
		SHT2 A 0 A_StartSound ("SShotgun", 1, Chanf_Overlap)
		TNT1 A 0 A_JumpIf(CallACS("Always50BMGAmmo")==true, 3)
		SHT2 A 0 A_FireBullets (3, -1, 2, random(50, 200)*2, "BulletImpact", 0|FBF_PUFFTARGET|FBF_NORANDOM, 4096)
		TNT1 A 0 A_Jump (256, 3)
		TNT1 A 0 A_TakeInventory ("Shell", 2)
		SHT2 A 0 A_FireBullets (3, -1, 2, random(50, 200)*2, "BulletImpact", 0|FBF_PUFFTARGET|FBF_NORANDOM, 4096)
		SHT2 A 0 A_Recoil(40)
		SHT2 A 0 A_QuakeEx (9, 9, 2, 12, 0, 64, None, QF_SCALEDOWN|QF_RELATIVE|QF_3D)
		SHT2 A 1 A_WeaponOffset (0, 38)
		SHT2 A 1 A_WeaponOffset (0, 37)
		SHT2 A 1 A_WeaponOffset (0, 36)
		SHT2 A 1 A_WeaponOffset (0, 35)
		SHT2 A 1 A_WeaponOffset (0, 34)
		SHT2 A 1 A_WeaponOffset (0, 33)
		SHT2 A 1 A_WeaponOffset (0, 32)
		SHT2 B 0 A_CheckReload
		TNT1 A 0 A_JumpIf(CallACS("Always50BMGAmmo")==true, "CursedFastReload")
		TNT1 A 0 A_TakeInventory ("PowerSSG", 1)
		SHT2 B random(2, 4)
		SHT2 CD random(3, 5)
		SHT2 E random(5, 9) A_StartSound ("SgRl1", 1, Chanf_Overlap)
		SHT2 F random(4, 7)
		SHT2 G random(3, 11) A_StartSound ("SgRl2", 1, Chanf_Overlap)
		SHT2 H random(5, 7)
		SHT2 I random(3, 5)
		SHT2 J random(5, 10) A_StartSound ("SgRl3", 1, Chanf_Overlap)
		SHT2 A 2
		SHT2 A 2 A_ReFire
		Goto Ready
	CursedReload:
		TNT1 A 0 A_JumpIfInventory("First50BMGUse", 1, "CursedFastReload")
		SHT2 B random(2, 4)
		SHT2 CD random(3, 5)
		SHT2 E random(5, 9) A_StartSound ("SgRl1", 1, Chanf_Overlap)
		SHT2 K 25
		SHT2 L 36
		SHT2 L 1 A_WeaponOffset (0, 30)
		SHT2 L 1 A_WeaponOffset (0, 28)
		SHT2 L 1 A_WeaponOffset (0, 30)
		SHT2 L 8 A_WeaponOffset (0, 32)
		SHT2 K 18
		TNT1 A 0 A_GiveInventory ("PowerSSG", 1)
		SHT2 G random(3, 11) A_StartSound ("SgRl2", 1, Chanf_Overlap)
		SHT2 H random(5, 7)
		SHT2 I random(3, 5)
		SHT2 J random(5, 10) A_StartSound ("SgRl3", 1, Chanf_Overlap)
		TNT1 A 0 A_GiveInventory ("First50BMGUse", 1)
		SHT2 A 2
		SHT2 A 2 A_ReFire
		Goto CursedReady
	CursedFastReload:
		SHT2 B random(2, 4)
		SHT2 CD random(3, 5)
		SHT2 E random(5, 9) A_StartSound ("SgRl1", 1, Chanf_Overlap)
		TNT1 A 0 A_GiveInventory ("PowerSSG", 1)
		SHT2 K random(4, 7)
		SHT2 G random(3, 11) A_StartSound ("SgRl2", 1, Chanf_Overlap)
		SHT2 H random(5, 7)
		SHT2 I random(3, 5)
		SHT2 J random(5, 10) A_StartSound ("SgRl3", 1, Chanf_Overlap)
		SHT2 A 2
		SHT2 A 2 A_ReFire
		Goto CursedReady
	Flash:
		TNT1 A 0 A_JumpIf(CallACS("Always50BMGAmmo")==true, "BMGFlash")
		TNT1 A 0 A_JumpIfInventory("PowerSSG", 1,  "BMGFlash")
		TNT1 A 0 A_JumpIf(CallACS("Recoil")==true, "FlashRecoil")
		TNT1 A 0 A_Overlay (2, "SSGFlash")
		TNT1 A 1
		Goto LightDone
	SSGFlash:
		TNT1 A 0 A_Jump (128, 4)
		SH2F A 0 Bright A_Light2
		SH2F A 1 Bright A_WeaponOffset (0, 32)
		TNT1 A 0 A_Jump (256, 3)
		SH2F B 0 Bright A_Light2
		SH2F B 1 Bright A_WeaponOffset (0, 32)
		TNT1 A 0
		Goto LightDone
	BMGFlash:
		TNT1 A 0 A_JumpIf(CallACS("Recoil")==true, "BMGFlashRecoil")
		TNT1 A 0 A_Jump (128, 3)
		SH2F A 1 Bright A_Light (4)
		TNT1 A 0 A_Jump (256, 2)
		SH2F B 1 Bright A_Light (4)
		TNT1 A 0 A_Light0
		TNT1 A 1
		Goto LightDone
	BMG:
		TNT1 A 0 A_Jump (128, 3)
		SH2F A 1 Bright A_Light (4)
		TNT1 A 0 A_Jump (256, 2)
		SH2F B 1 Bright A_Light (4)
		TNT1 A 0 A_Light0
		TNT1 A 1
		Goto LightDone
	BMGFlashRecoil:
		TNT1 A 0 A_Overlay(2, "BMG")
		TNT1 A 0 A_SetPitch (0)
		TNT1 A 1 A_SetViewPitch (pitch-8)
		TNT1 A 1 A_SetPitch (pitch+1, SPF_INTERPOLATE)
		TNT1 A 1 A_SetPitch (pitch+1, SPF_INTERPOLATE)
		TNT1 AAAAAAAA 1 A_SetPitch (pitch+0.5, SPF_INTERPOLATE)
		TNT1 AAAAAAAA 1 A_SetPitch (pitch+0.25, SPF_INTERPOLATE)
		TNT1 A 0 A_SetPitch (0, SPF_INTERPOLATE)
		TNT1 A 1 A_SetViewPitch (0, SPF_INTERPOLATE)
		Goto LightDone
	QuadFlash:
		TNT1 A 0 A_JumpIf(CallACS("Recoil")==true, "QuadFlashRecoil")
		QSSF A 1 Bright A_Light (4)
		Goto LightDone
	QuadFlashRecoil:
		TNT1 A 0 A_JumpIf(CallACS("Always50BMGAmmo")==true, "QuadBMGFlashRecoil")
		TNT1 A 0 A_JumpIfInventory("PowerSSG", 1,  "QuadBMGFlashRecoil")
		TNT1 A 0 A_SetPitch (0)
		TNT1 A 0 A_SetViewPitch (pitch-8)
		QSSF A 1 Bright A_Light (4)
		TNT1 A 0 A_Light0
		TNT1 A 1 A_SetPitch (pitch+1, SPF_INTERPOLATE)
		TNT1 A 1 A_SetPitch (pitch+1, SPF_INTERPOLATE)
		TNT1 AAAAAAAA 1 A_SetPitch (pitch+0.5, SPF_INTERPOLATE)
		TNT1 AAAAAAAA 1 A_SetPitch (pitch+0.25, SPF_INTERPOLATE)
		TNT1 A 0 A_SetPitch (0, SPF_INTERPOLATE)
		TNT1 A 1 A_SetViewPitch (0, SPF_INTERPOLATE)
		Goto LightDone
	QuadBMGFlashRecoil:
		TNT1 A 0 A_SetPitch(0)
		TNT1 A 0 A_SetViewPitch (pitch-16)
		QSSF A 1 Bright A_Light (4)
		TNT1 A 0 A_Light0
		TNT1 A 1 A_SetPitch (pitch+4, SPF_INTERPOLATE)
		TNT1 A 1 A_SetPitch (pitch+2, SPF_INTERPOLATE)
		TNT1 AA 1 A_SetPitch (pitch+1, SPF_INTERPOLATE)
		TNT1 AAAAAAAA 1 A_SetPitch (pitch+0.5, SPF_INTERPOLATE)
		TNT1 AAAAAAAA 1 A_SetPitch (pitch+0.25, SPF_INTERPOLATE)
		TNT1 AAAAAAAAAAAAAAAA 1 A_SetPitch (pitch+0.125, SPF_INTERPOLATE)
		TNT1 A 0 A_SetPitch (0, SPF_INTERPOLATE)
		TNT1 A 1 A_SetViewPitch (0, SPF_INTERPOLATE)
		Goto LightDone
	FlashRecoil:
		TNT1 A 0 A_Overlay (2, "SSGFlash")
		TNT1 A 0 A_SetPitch (0)
		TNT1 A 1 A_SetViewPitch (pitch-5)
		TNT1 A 0 A_Light0
		TNT1 AAAA 1 A_SetPitch (pitch+0.5, SPF_INTERPOLATE)
		TNT1 AAAAAAAA 1 A_SetPitch (pitch+0.25, SPF_INTERPOLATE)
		TNT1 AAAAAAAA 1 A_SetPitch (pitch+0.125, SPF_INTERPOLATE)
		TNT1 A 0 A_SetPitch (0, SPF_INTERPOLATE)
		TNT1 A 1 A_SetViewPitch (0, SPF_INTERPOLATE)
		Goto LightDone
	}
}

ACTOR RNGChaingun : Chaingun 
{
	Weapon.SelectionOrder 700
	Weapon.SlotNumber 4
	Decal "Bullet"
	Weapon.AmmoUse 1
	Weapon.AmmoGive 0
	Weapon.AmmoType "Clip"
	States
	{
	Ready:
		CHGG A 0 A_CheckReload
		CHGG A 0 A_SetInventory ("Bursts", 0)
		CHGG A 0 A_JumpIfInventory ("HeavyUpgrade", 1, "HeavyReady")
		CHGG A 1 A_WeaponReady
		Loop
	HeavyReady:
		MNGN A 0 A_WeaponOffset (0, 32)
		MNGN A 1 A_WeaponReady
		Loop
	HeavyDeselect:
		MNGN A 0 A_StopSound (0)
		TNT1 A 0 A_SetViewPitch (0)
		TNT1 A 0 A_SetPitch (0)
		MNGN A 1 A_Lower
		Loop
	HeavySelect:
		TNT1 A 0 A_SetPitch (0)
		TNT1 A 0 A_SetViewPitch (0)
		MNGN A 1 A_Raise
		Loop
	Deselect:
		CHGG A 0 A_JumpIfInventory ("HeavyUpgrade", 1, "HeavyDeselect")
		TNT1 A 0 A_SetPitch (0)
		TNT1 A 0 A_SetViewPitch (0)
		CHGG A 1 A_Lower
		Loop
	Select:
		CHGG A 0 A_JumpIfInventory ("HeavyUpgrade", 1, "HeavySelect")
		TNT1 A 0 A_SetPitch (0)
		TNT1 A 0 A_SetViewPitch (0)
		CHGG A 1 A_Raise
		Loop
	Fire:
		CHGG A 0 A_JumpIfInventory ("HeavyUpgrade", 1, "HeavySpin")
		CHGG A 0 A_JumpIf(CallACS("SkillChecker")==4, "BurstFire")
		CHGG A 0 A_Jump(2, "BurstFire")
		CHGG A 0 A_Jump(256, 2)
		CHGG A 0 A_Jump(256, "BurstFire")
		CHGG A 0 A_GunFlash
		CHGG A 0 A_StartSound ("Pistol2")
		CHGG A 0 A_FireBullets (frandom(0, 8), -1, -1, random(1, 36), "BulletImpact", 1|FBF_PUFFTARGET|FBF_NORANDOM, random(1, 2048))
		CHGG A 0 A_JumpIf(CallACS("Recoil")==false, 2)
		CHGG A 0 A_SetAngle(frandom(angle-1, +angle+1), SPF_INTERPOLATE)
		CHGG A 1
		CHGG B 1
		CHGG C 1
		CHGG D 1
		CHGG A 1 A_ReFire
		Goto Ready
	HeavySpin:
		MNGN A 0 A_StartSound ("SpinUp", 1)
		/*MNGN A 10
		MNGN B 8
		MNGN C 6
		MNGN D 4
		MNGN A 2
		MNGN C 1*/
		MNGN A 7
		MNGN B 6
		MNGN C 5
		MNGN D 4
		MNGN A 3
		MNGN B 2
		MNGN C 1
		MNGN D 1
		MNGN ACA 1
		Goto HeavyFire
	Release:
		MNGN A 0 A_WeaponOffset (0, 32)
		MNGN A 0 A_StartSound ("SpinDown", 1)
		MNGN AC 1
		MNGN A 2
		MNGN B 3
		MNGN C 4
		MNGN D 5
		MNGN A 6
		MNGN B 7
		MNGN C 8
		MNGN D 9
		Goto HeavyReady
	HeavyFire:
		MNGN A 0 A_JumpIfNoAmmo ("Release")
		MNGN A 0 A_GunFlash
		MNGN A 0 A_SetAngle(angle+random(-2, 2), SPF_INTERPOLATE)
		MNGN A 0 A_QuakeEx (9, 5, 0, 3, 0, 64, None, QF_SCALEDOWN|QF_RELATIVE|QF_3D, 0, 0, 0, 0, 0, 5)
		MNGN A 0 A_WeaponOffset (random(-2, 2), random(30, 34))
		MNGN A 0 A_StartSound ("SpinLoop", 0, CHANF_LOOPING)
		MNGN A 0 A_StartSound ("Minigun", 0, CHANF_LOOPING|CHANF_OVERLAP, 0.5)
		MNGN A 0 A_FireBullets (frandom(5, 10), frandom(3, 7), -1, random(10, 40), "BulletImpact", 1|FBF_PUFFTARGET|FBF_NORANDOM, 4096)
		//MNGN A 0 A_FireBullets (6, 0, -1, random(25, 75), "Puff", 1, 4096)
		//MNGN A 0 A_Recoil (5)
		/*MNGN A 1
		MNGN B 1 A_WeaponOffset(0, 38) //I originally wanted to implement another
		MNGN B 1 A_WeaponOffset(0, 37) //sniper rifle-like weapon, but I thought
		MNGN C 1 A_WeaponOffset(0, 36) //that 1 is enough, so I coded it to work like
		MNGN C 1 A_WeaponOffset(0, 35) //those miniguns for ex.: Brutal Doom.
		MNGN D 1 A_WeaponOffset(0, 34)
		MNGN D 1 A_WeaponOffset(0, 33)
		MNGN A 0 A_WeaponOffset(0, 32)*/
		MNGN A 1
		MNGN C 1
		MNGN A 1 A_ReFire ("HeavyFire")
		MNGN A 0 A_StopSound(0)
		Goto Release
	BurstFire:
		CHGG A 0 A_JumpIfInventory("Bursts", 10, "Ready")
		CHGG A 0 A_GiveInventory ("Bursts", 1)
		CHGG A 0 A_GunFlash ("BurstFlash")
		CHGG A 0 A_StartSound ("Pistol2")
		CHGG A 0 A_SetPitch (pitch+random(-4, 4), SPF_INTERPOLATE)
		CHGG A 0 A_SetAngle (angle+random(-4, 4), SPF_INTERPOLATE)
		CHGG A 0 A_FireBullets(frandom(0, 20), frandom(0, 10), -1, random(15, 120), "BulletImpact", 1|FBF_PUFFTARGET|FBF_NORANDOM, random(1, 2048))
		CHGG A 1
		CHGG C 1
		CHGG C 0 A_SetPitch (0)
		CHGG C 0 A_CheckReload
		CHGG C 0 A_JumpIf(CallACS("SkillChecker")==4, "Ready")
		Goto BurstFire
	Flash:
		TNT1 A 0 A_JumpIf(CallACS("Recoil")==true, "FlashRecoil")
		TNT1 A 0 A_Jump (128, 3)
		CHGF A 1 Bright A_Light1
		TNT1 A 0 A_Jump (256, 2)
		CHGF B 1 Bright A_Light1
		TNT1 A 0
		Goto LightDone
	BurstFlash:
		TNT1 A 0 A_Jump (128, 3)
		CHGF A 1 Bright A_Light1
		TNT1 A 0 A_Jump (256, 2)
		CHGF B 1 Bright A_Light1
		TNT1 A 0
		Goto LightDone
	FlashRecoil:
		TNT1 A 0 A_JumpIfInventory ("HeavyUpgrade", 1, "HeavyFlash")
		TNT1 A 0 A_Jump (128, 5)
		CHGF A 0 A_Light1
		CHGF A 0 Bright A_SetPitch (0)
		CHGF A 1 A_SetViewPitch (pitch-1)
		TNT1 A 0 A_Jump (256, 4)
		CHGF B 0 A_Light1
		CHGF B 0 Bright A_SetPitch (0)
		CHGF A 1 A_SetViewPitch (pitch-1)
		TNT1 A 0 A_Light0
		TNT1 A 1 A_SetPitch (pitch+0.5, SPF_INTERPOLATE)
		TNT1 A 1 A_SetPitch (pitch+0.25, SPF_INTERPOLATE)
		TNT1 AA 1 A_SetPitch (pitch+0.125, SPF_INTERPOLATE)
		TNT1 A 0 A_SetViewPitch(0, SPF_INTERPOLATE)
		TNT1 A 1 A_SetPitch (0, SPF_INTERPOLATE)
		Goto LightDone
	HeavyFlash:
		TNT1 A 0 A_Jump (128, 5)
		CHGF A 0 A_Light1
		CHGF A 0 Bright A_SetPitch (0)
		CHGF A 1 A_SetViewPitch (pitch-2, SPF_INTERPOLATE)
		TNT1 A 0 A_Jump (256, 4)
		CHGF B 0 A_Light1
		CHGF B 0 Bright A_SetPitch (0)
		CHGF B 1 A_SetViewPitch (pitch-2, SPF_INTERPOLATE)
		TNT1 A 0 A_light0
		TNT1 AA 1 A_SetPitch (pitch+0.5, SPF_INTERPOLATE)
		TNT1 AA 1 A_SetPitch (pitch+0.25, SPF_INTERPOLATE)
		TNT1 AA 1 A_SetPitch (pitch+0.125, SPF_INTERPOLATE)
		TNT1 A 0 A_SetPitch (0, SPF_INTERPOLATE)
		TNT1 A 1 A_SetViewPitch (0, SPF_INTERPOLATE)
		Goto LightDone
	}
}

ACTOR RNGRPG : RocketLauncher 
{
	Weapon.SelectionOrder 2500
	Weapon.SlotNumber 5
	Weapon.AmmoUse 1
	Weapon.AmmoGive 0
	Weapon.AmmoType "RocketAmmo"
	States
	{
	Ready:
		MISG A 0 A_CheckReload
		MISG A 1 A_WeaponReady
		Loop
	Select:
		MISG A 1 A_Raise
		Loop
	Deselect:
		MISG A 1 A_Lower
		Loop
	Fire:
		//I know this looks insane, but if it works, it works i guess.
		MISG A 0 A_GunFlash
		MISG A 0 A_StartSound ("RLauncher")
		MISG A 0 A_JumpIfInventory ("RocketUpgrade", 1, 9)
		MISG A 0 A_JumpIf(CallACS("AlwaysCritical")==true, 4)
		MISG A 0 A_Jump (12, 3)
		MISG A 0 A_FireProjectile ("RNGRocket", frandom(-4, 4), true, 0, -10)
		MISG A 0 A_Jump (256, 4)
		MISG A 0 A_StartSound ("Crit2", 1, CHANF_OVERLAP)
		MISG A 0 A_StartSound ("Crit", 1, CHANF_OVERLAP)
		MISG A 0 A_FireProjectile ("RNGCrocket", frandom(-4, 4), true, 0, -10)
		MISG A 0 A_Jump (256, 23)
		MISG A 0 A_JumpIfInventory("RocketAmmo", 5, 5)
		MISG A 0 A_JumpIfInventory("RocketAmmo", 4, 13)
		MISG A 0 A_JumpIfInventory("RocketAmmo", 3, 14)
		MISG A 0 A_JumpIfInventory("RocketAmmo", 2, 15)
		MISG A 0 A_JumpIfInventory("RocketAmmo", 1, 16)
		MISG A 0 A_TakeInventory ("RocketAmmo", 5)
		MISG A 0 A_FireProjectile ("MultiRocket", -4, false, 0, -10)
		MISG A 0 A_FireProjectile ("MultiRocket", 4, false, 0, -10)
		MISG A 0 A_FireProjectile ("MultiRocket", -2, false, 0, -10)
		MISG A 0 A_FireProjectile ("MultiRocket", 2, false, 0, -10)
		MISG A 0 A_FireProjectile ("MultiRocket", 0, false, 0, -10)
		MISG A 0 A_Jump(256, 11)
		MISG A 0 A_TakeInventory ("RocketAmmo", 1)
		MISG A 0 A_FireProjectile ("MultiRocket", -4, false, 0, -10)
		MISG A 0 A_TakeInventory ("RocketAmmo", 1)
		MISG A 0 A_FireProjectile ("MultiRocket", 4, false, 0, -10)
		MISG A 0 A_TakeInventory ("RocketAmmo", 1)
		MISG A 0 A_FireProjectile ("MultiRocket", -2, false, 0, -10)
		MISG A 0 A_TakeInventory ("RocketAmmo", 1)
		MISG A 0 A_FireProjectile ("MultiRocket", 2, false, 0, -10)
		MISG A 0 A_TakeInventory ("RocketAmmo", 1)
		MISG A 0 A_FireProjectile ("MultiRocket", 0, false, 0, -10)
		MISG FG 1
		MISG C 2
		MISG E 4
		MISG D 3
		MISG C 2
		MISG B 2
		MISG GF 1
		MISG A 2
		MISG A 0 A_ReFire
		Goto Ready
	Flash:
		TNT1 A 0 A_JumpIf(CallACS("Recoil")==true, "FlashRecoil")
		MISF A 1 Bright A_Light(3)
		MISF B 1 Bright A_Light(2)
		MISF C 1 Bright A_Light(2)
		MISF D 1 Bright A_Light(1)
		MISF E 1 Bright A_Light0
		Goto LightDone
	FlashRecoil:
		MISF A 0 Bright A_Light (3)
		MISF A 0 A_SetPitch (0)
		MISF A 1 A_SetViewPitch (pitch-6, SPF_INTERPOLATE)
		MISF B 0 A_SetPitch (pitch+1, SPF_INTERPOLATE)
		MISF B 1 Bright A_Light (2)
		MISF C 0 Bright A_Light (2)
		MISF C 1 A_SetPitch (pitch+1, SPF_INTERPOLATE)
		MISF D 0 Bright A_Light (2)
		MISF D 1 A_SetPitch (pitch+0.5, SPF_INTERPOLATE)
		MISF E 0 Bright A_Light (1)
		MISF E 1 A_SetPitch (pitch+0.5, SPF_INTERPOLATE)
		TNT1 A 0 A_Light0
		TNT1 A 1 A_SetPitch (pitch+0.25, SPF_INTERPOLATE)
		TNT1 AAAAAAA 1 A_SetPitch (pitch+0.25, SPF_INTERPOLATE)
		TNT1 AAAAAAAA 1 A_SetPitch (pitch+0.125, SPF_INTERPOLATE)
		TNT1 A 0 A_SetPitch(0)
		TNT1 A 0 A_SetViewPitch(0)
		Goto LightDone
	}
}

ACTOR RNGPlasma : PlasmaRifle 
{
	Weapon.SelectionOrder 100
	Weapon.SlotNumber 6
	Weapon.AmmoUse 1
	Weapon.AmmoGive 0
	Weapon.AmmoType "Cell"
	States
	{
	Ready:
		TNT1 A 0 A_JumpIfInventory ("RailUpgrade", 1, "RailReady")
		TNT1 A 0 A_GiveInventory ("HeatCooldownTimer", 1)
		TNT1 A 0 A_JumpIfInventory ("HeatCooldownTimer", 5, 2)
		TNT1 A 0 A_Jump(256, 3)
		TNT1 A 0 A_TakeInventory("HeatCooldownTimer", 5)
		TNT1 A 0 A_TakeInventory ("PlasmaOverheat", 1)
		PLSM A 1 A_WeaponReady
		Loop
	RailReady:
		RAIL A 1 A_WeaponReady
		Loop
	Select:
		TNT1 A 0 A_JumpIfInventory ("RailUpgrade", 1, "RailSelect")
		TNT1 A 0 A_GiveInventory ("HeatCooldownTimer", 1)
		TNT1 A 0 A_JumpIfInventory ("HeatCooldownTimer", 5, 2)
		TNT1 A 0 A_Jump(256, 3)
		TNT1 A 0 A_TakeInventory("HeatCooldownTimer", 5)
		TNT1 A 0 A_TakeInventory ("PlasmaOverheat", 1)
		PLSM A 1 A_Raise (5)
		Loop
	RailSelect:
		RAIL A 1 A_Raise (5)
		Loop
	Deselect:
		TNT1 A 0 A_JumpIfInventory ("RailUpgrade", 1, "RailDeselect")
		TNT1 A 0 A_GiveInventory ("HeatCooldownTimer", 1)
		TNT1 A 0 A_JumpIfInventory ("HeatCooldownTimer", 5, 2)
		TNT1 A 0 A_Jump(256, 3)
		TNT1 A 0 A_TakeInventory("HeatCooldownTimer", 5)
		TNT1 A 0 A_TakeInventory ("PlasmaOverheat", 1)
		PLSM A 1 A_Lower (5)
		Loop
	RailDeselect:
		RAIL A 1 A_Lower (5)
		Loop
	Fire:
		//PLSM A 0 A_Jump(ACS_NamedExecuteWithResult("MalfunctionChance", 0), "FireBeams")
		TNT1 A 0 A_JumpIfInventory ("RailUpgrade", 1, "RailFire")
		TNT1 A 0 A_JumpIfInventory ("PlasmaOverheat", 1000, "Overheatfire")
		PLSM A 0 A_GunFlash
		PLSM A 0 A_StartSound ("Plasma", 1, CHANF_OVERLAP)
		PLSM A 0 A_FireProjectile ("RNGPlasmaBall", frandom(-6, 6), true, 0, -9)
		PLSM A 0 A_GiveInventory ("PlasmaOverheat", random(9, 11))
		TNT1 A 3
		PLSM A 0 A_ReFire
		PLSM A 2 A_CheckReload
		PLSM B 3
		PLSM C 6
		PLSM B 4
		PLSM A 2
		Goto Ready
	OverheatFire:
		PLSM A 0 A_GunFlash
		PLSM A 0 A_StartSound ("Plasma", 1, CHANF_OVERLAP)
		PLSM A 0 A_FireProjectile ("RNGPlasmaBall", frandom(-14, 14), true, 0, -9, 0, frandom(-6, 6))
		TNT1 A 2
		PLSM A 1 A_ReFire
		PLAS A 0 A_TakeInventory("PlasmaOverheat", 1000)
		PLAS A 0 A_QuakeEx (9, 9, 9, 35, 128, 64, None, QF_RELATIVE|QF_SCALEDOWN|QF_3D|QF_DAMAGEFALLOFF,0, 0, 0, 0, 0, 20)
		PLAS A 0 A_StartSound ("PlasmaExplode")
		PLAS A 69
		PLAS A 1 A_TakeInventory("RNGPlasma", 1)
		Goto Ready
	RailFire:
		RAIL A 0 A_GunFlash
		RAIL A 0 A_StartSound ("Railgun", 1, CHANF_OVERLAP)
		RAIL A 0 A_FireProjectile ("RailProjectile", frandom(-1, 1), true, 0, -5, 1, frandom(-1, 1))
		RAIL A 0 A_JumpIf(GetCVar("sv_infiniteammo") == 1, 2)
		RAIL A 0 A_TakeInventory ("Cell", 1)
		RAIL A 1 A_WeaponOffset (0, 42)
		RAIL AAAAAAAAAA 1 A_WeaponOffset (0, -1, WOF_ADD)
		RAIL A 1
		Goto Ready
	/*FireBeams:
		TNT1 A 0 A_JumpIf(GetCVar("sv_infiniteammo")==1, 2)
		TNT1 A 0 A_TakeInventory ("Cell", 30)
		PLSM D 0 A_RailAttack (0, 0, False, None, None, 0, 0, "None", 0, 0, 1, 1)
		PLSM DDD 0 A_CustomRailGun (random(50, 150), 0, None, "5353FF",RGF_FULLBRIGHT, 0, 0, "none", 0, 0, 0, 5)
		PLSM D 3
		PLSM E 8
		PLSM F 12
		PLSM D 2
		Goto Ready*/
	Flash:
		TNT1 A 0 A_JumpIfInventory ("RailUpgrade", 1, "Flash2")
		TNT1 A 0 A_JumpIf(CallACS("Recoil")==true, "FlashRecoil")
		PLSF A 1 A_Light (-1)
		PLSF B 2 A_Light (-0.5)
		Goto LightDone
	Flash2:
		TNT1 A 0 A_Light (-1)
		TNT1 A 0 Bright A_SetPitch (0)
		TNT1 A 1 Bright A_SetViewPitch (pitch-1.5)
		TNT1 A 1 A_Light (-0.5)
		TNT1 A 0 A_Light (-0.5)
		TNT1 A 1 Bright A_SetPitch (pitch+0.25, SPF_INTERPOLATE)
		TNT1 A 0 A_Light0
		TNT1 A 1 A_SetPitch (pitch+0.25, SPF_INTERPOLATE)
		TNT1 AAAA 1 A_SetPitch (pitch+0.125, SPF_INTERPOLATE)
		TNT1 AAAAAAAA 1 A_SetPitch (pitch+0.0625, SPF_INTERPOLATE)
		TNT1 A 0 A_SetPitch(0, SPF_INTERPOLATE)
		TNT1 A 1 A_SetViewPitch(0, SPF_INTERPOLATE)
		Goto LightDone
	FlashRecoil:
		PLSF A 0 A_Light (-1)
		PLSF A 0 Bright A_SetPitch (0)
		PLSF A 1 Bright A_SetViewPitch (pitch-1.5)
		PLSF B 1 A_Light (-0.5)
		PLSF B 0 A_Light (-0.5)
		PLSF B 1 Bright A_SetPitch (pitch+0.25, SPF_INTERPOLATE)
		TNT1 A 0 A_Light0
		TNT1 A 1 A_SetPitch (pitch+0.25, SPF_INTERPOLATE)
		TNT1 AAAA 1 A_SetPitch (pitch+0.125, SPF_INTERPOLATE)
		TNT1 AAAAAAAA 1 A_SetPitch (pitch+0.0625, SPF_INTERPOLATE)
		TNT1 A 0 A_SetPitch(0, SPF_INTERPOLATE)
		TNT1 A 1 A_SetViewPitch(0, SPF_INTERPOLATE)
		Goto LightDone
	}
}

ACTOR RNGBFG : BFG9000
{
	Weapon.SelectionOrder 2800
	Weapon.AmmoUse 30
	Weapon.AmmoGive 0
	Weapon.AmmoType "Cell"
	States
	{
	Ready:
		BFGG A 0 A_JumpIfInventory ("BFGUpgrade", 1, "BigReady")
		BFGG A 0 A_CheckReload
		BFGG A 1 A_WeaponReady
		Loop
	BigReady:
		SBFG A 0 A_CheckReload
		SBFG A 1 A_WeaponReady
		Loop
	Select:
		BFGG A 0 A_JumpIfInventory ("BFGUpgrade", 1, "BigSelect")
		BFGG A 1 A_Raise (3)
		Loop
	BigSelect:
		SBFG A 1 A_Raise (3)
		Loop
	Deselect:
		BFGG A 0 A_JumpIfInventory ("BFGUpgrade", 1, "BigDeselect")
		BFGG A 1 A_Lower (3)
		Loop
	BigDeselect:
		SBFG A 1 A_Lower (3)
		Loop
	Fire:
		TNT1 A 0 A_JumpIfInventory ("BFGUpgrade", 1, "BigFire")
		TNT1 A 0 A_JumpIf(CallACS("SkillChecker")==4, 3)
		TNT1 A 0 A_Jump(2, "FireExplode")
		TNT1 A 0 A_Jump(256, 2)
		TNT1 A 0 A_Jump(256, "FireExplode")
		BFGG B 20 A_StartSound ("BFG9000")
		BFGG A 0 A_GunFlash
		BFGG A 0 A_FireProjectile ("RNGBFGBall", random(-5, 5), true, 0, -10)
		BFGG C 10
		BFGG E 10
		BFGG D 10
		BFGG C 8
		BFGG B 2
		Goto Ready
	BigFire:
		SBFG B 20 A_StartSound ("BFG9000")
		SBFG A 0 A_GunFlash
		SBFG A 0 A_RailAttack (0, 0, True, None, None, 0, 0, "None", 0, 0, 1, 1)
		SBFG A 2 A_CustomRailGun (random(200, 1500),0, None, "00FF00",RGF_SILENT|RGF_FULLBRIGHT, 0, 0, None, 0.1, 0, 0, 7, 1, 0, None, -8)
		SBFG C 2
		SBFG E 6
		SBFG D 10
		SBFG C 10
		SBFG B 8
		SBFG A 2
		Goto Ready
	FireExplode:
		BFGG B 20 A_StartSound ("BFGSquib")
		BFGG A random(8, 35)
		BFFG A 0 A_StartSound("weaponsbfgx", 1, CHANF_OVERLAP)
		BFFG A 0 A_StartSound("BFGExplode", 1)
		BFFG A 1 A_FireProjectile("InstableBFGBall", 0, 1, 0, -8, 0, 90)
		BFFG A 15
		BFFG A 1 A_TakeInventory ("RNGBFG")
		Goto Ready
	Flash:
		BFGF A 0 A_JumpIf(CallACS("Recoil")==true, "FlashRecoil")
		BFGF A 1 Bright A_Light(-6)
		BFGF B 1 Bright A_Light(6)
		Goto LightDone
	FlashRecoil:
		BFGF A 0 Bright A_Light(-6)
		BFGF A 0 A_SetPitch(0)
		BFGF A 1 A_SetViewPitch(pitch-6)
		BFGF B 0 Bright A_Light(6)
		BFGF B 1 A_SetPitch(pitch+1, SPF_INTERPOLATE)
		TNT1 A 0 A_Light0
		TNT1 A 1 A_SetPitch(pitch+0.5, SPF_INTERPOLATE)
		TNT1 AAA 1 A_SetPitch(pitch+0.5, SPF_INTERPOLATE)
		TNT1 AAAA 1 A_SetPitch(pitch+0.25, SPF_INTERPOLATE)
		TNT1 AAAAAAAA 1 A_SetPitch(pitch+0.125, SPF_INTERPOLATE)
		TNT1 AAAAAAAAAAAAAAAA 1 A_SetPitch(pitch+0.0625, SPF_INTERPOLATE)
		TNT1 A 0 A_SetPitch(0)
		TNT1 A 1 A_SetViewPitch(0)
		Goto LightDone
	}
}

ACTOR PickupChainsaw : CustomInventory
{
	Inventory.PickupMessage "$GOTCHAINSAW"
	Inventory.PickupSound "WeaponPickup"
	States
	{
	Spawn:
		CSAW A -1
		Stop
	Pickup:
		TNT1 A 0 A_GiveInventory ("RNGChainsaw")
		Stop
	}
}
ACTOR DoubleBarChainsaw : CustomInventory
{
	Inventory.PickupMessage "$GOTDBLSAW"
	Inventory.PickupSound "WeaponPickup"
	States
	{
	Spawn:
		DBSW A -1
		Stop
	Pickup:
		TNT1 A 0 A_GiveInventory ("RNGChainsaw")
		TNT1 A 0 A_GiveInventory ("DblSawUpgrade")
		Stop
	}
}
ACTOR ChainsawSpawner : RandomSpawner replaces Chainsaw
{
	DropItem "PickupChainsaw", 256, 14
	DropItem "DoubleBarChainsaw", 256, 1
}

ACTOR PickupPistol : CustomInventory
{
	Inventory.PickupMessage "$GOTPISTOL"
	Inventory.PickupSound "WeaponPickup"
	States
	{
	Spawn:
		PIST A -1
		Stop
	Pickup:
		TNT1 A 0 A_GiveInventory ("RNGPistol")
		TNT1 A 0 A_GiveInventory ("Clip", random(1, 30))
		Stop
	}
}
ACTOR Deagle : CustomInventory
{
	Inventory.PickupMessage "$GOTPISTOLUPGRADE"
	Inventory.PickupSound "WeaponPickup"
	States
	{
	Spawn:
		DGLE A -1
		Stop
	Pickup:
		TNT1 A 0 A_GiveInventory ("RNGPistol")
		TNT1 A 0 A_GiveInventory ("PistolUpgrade", 1)
		TNT1 A 0 A_GiveInventory ("Clip", random(1, 30))
	}
}
ACTOR PistolSpawner : RandomSpawner replaces Pistol
{
	DropItem "PickupPistol", 256, 9
	DropItem "Deagle", 256, 1
}

ACTOR PickupShotgun : CustomInventory
{
	Inventory.PickupMessage "$GOTSHOTGUN"
	Inventory.PickupSound "WeaponPickup"
	States
	{
	Spawn:
		SHOT A -1
		Stop
	Pickup:
		TNT1 A 0 A_GiveInventory ("RNGShotgun")
		TNT1 A 0 A_GiveInventory ("Shell", random(1, 16))
		Stop
	}
}
ACTOR AutoShotgun : CustomInventory
{
	Inventory.PickupMessage "$GOTAUTOSHOTGUN"
	Inventory.PickupSound "WeaponPickup"
	States
	{
	Spawn:
		ASGN A -1
		Stop
	Pickup:
		TNT1 A 0 A_GiveInventory ("AutoUpgrade")
		TNT1 A 0 A_GiveInventory ("RNGShotgun")
		TNT1 A 0 A_GiveInventory ("Shell", random(1, 16))
		Stop
	}
}
ACTOR ScopedShotgun : CustomInventory
{
	Inventory.PickupMessage "$GOTSCOPEDSHOTGUN"
	Inventory.PickupSound "WeaponPickup"
	States
	{
	Spawn:
		SSGN A -1
		Stop
	Pickup:
		TNT1 A 0 A_GiveInventory ("ScopeUpgrade")
		TNT1 A 0 A_GiveInventory ("RNGShotgun")
		TNT1 A 0 A_GiveInventory ("Shell", random(1, 16))
		Stop
	}
}
ACTOR SGSpawner : RandomSpawner replaces Shotgun
{
	DropItem "PickupShotgun", 256, 11
	Dropitem "ScopedShotgun", 256, 1
}
ACTOR PickupSShotgun : CustomInventory
{
	Inventory.PickupMessage "$GOTSHOTGUN2"
	Inventory.PickupSound "WeaponPickup"
	States
	{
	Spawn:
		SGN2 A -1
		Stop
	Pickup:
		TNT1 A 0 A_GiveInventory ("RNGSShotgun")
		TNT1 A 0 A_GiveInventory ("Shell", random(1, 16))
	}
}
ACTOR QuadSShotgun : CustomInventory
{
	Inventory.PickupMessage "$GOTQUADSSG"
	Inventory.PickupSound "WeaponPickup"
	States
	{
	Spawn:
		QSGN A -1
		Stop
	Pickup:
		TNT1 A 0 A_GiveInventory ("QuadUpgrade")
		TNT1 A 0 A_GiveInventory ("RNGSShotgun")
		TNT1 A 0 A_GiveInventory ("Shell", random(1, 16))
	}
}
ACTOR SSGSpawner : RandomSpawner replaces SuperShotgun
{
	DropItem "PickupSShotgun", 256, 2
	Dropitem "QuadSShotgun", 256, 1
}

ACTOR PickupChaingun : CustomInventory 
{
	Inventory.PickupMessage "$GOTCHAINGUN"
	Inventory.PickupSound "WeaponPickup"
	States
	{
	Spawn:
		CGUN A -1
		Stop
	Pickup:
		TNT1 A 0 A_GiveInventory ("RNGChaingun")
		TNT1 A 0 A_GiveInventory ("Clip", random(1, 200))
		Stop
	}
}
ACTOR Minigun : CustomInventory
{
	Inventory.PickupMessage "$GOTCHGUNUPGRADE"
	Inventory.PickupSound "WeaponPickup"
	States
	{
	Spawn:
		MGUN A -1
		Stop
	Pickup:
		TNT1 A 0 A_GiveInventory ("HeavyUpgrade")
		TNT1 A 0 A_GiveInventory ("RNGChaingun")
		TNT1 A 0 A_GiveInventory ("Clip", random(1, 200))
		Stop
	}
}
ACTOR ChaingunSpawner : RandomSpawner replaces Chaingun
{
	DropItem "PickupChaingun", 256, 4
	DropItem "Minigun", 256, 1
}

ACTOR PickupRLauncher : CustomInventory
{
	Inventory.PickupMessage "$GOTLAUNCHER"
	Inventory.PickupSound "WeaponPickup"
	States
	{
	Spawn:
		LAUN A -1
		Stop
	Pickup:
		TNT1 A 0 A_GiveInventory ("RNGRPG")
		TNT1 A 0 A_GiveInventory ("RocketAmmo", random(1, 8))
		Stop
	}
}
ACTOR MultiRLauncher : CustomInventory
{
	Inventory.PickupMessage "$GOTROCKETUPGRADE"
	Inventory.PickupSound "WeaponPickup"
	States
	{
	Spawn:
		LAUN A -1
		Stop
	Pickup:
		TNT1 A 0 A_GiveInventory ("PickupRLauncher")
		TNT1 A 0 A_GiveInventory ("RocketUpgrade")
		Stop
	}
}
ACTOR RLauncherSpawner : RandomSpawner replaces RocketLauncher
{
	DropItem "PickupRLauncher", 256, 9
	DropItem "MultiRLauncher", 256, 1
}

ACTOR PickupPlasma : CustomInventory replaces PlasmaRifle
{
	Inventory.PickupMessage "$GOTPLASMA"
	Inventory.PickupSound "WeaponPickup"
	States
	{
	Spawn:
		PLAS A -1
		Stop
	Pickup:
		TNT1 A 0 A_GiveInventory ("RNGPlasma")
		TNT1 A 0 A_GiveInventory ("Cell", random(1, 3))
		Stop
	}
}

ACTOR PickupBFG : CustomInventory replaces BFG9000
{
	Inventory.PickupMessage "$GOTBFG9000"
	Inventory.PickupSound "WeaponPickup"
	States
	{
	Spawn:
		BFUG A -1
		Stop
	Pickup:
		TNT1 A 0 A_GiveInventory ("RNGBFG")
		TNT1 A 0 A_GiveInventory ("Cell", random(1, 45))
		Stop
	}
}

ACTOR NormalArmor : GreenArmor replaces GreenArmor
{
	States
	{
	Spawn:
		ARM1 A 6
		ARM1 B 6 Bright
		Loop
	}
}
ACTOR MegaArmor : BlueArmor
{
	States
	{
	Spawn:
		ARM2 A 6
		ARM2 B 6 Bright
		Loop
	}
}
ACTOR HeavyArmor : BlueArmor
{
	Inventory.PickupMessage "You got the Heavy Armor!"
	Armor.SaveAmount 300
	Armor.SavePercent 99
	States
	{
	Spawn:
		ARM3 A 6
		ARM3 B 6 Bright
		Loop
	}
}
ACTOR ArmorSpawner : RandomSpawner replaces BlueArmor
{
	DropItem "MegaArmor", 256, 7
	DropItem "HeavyArmor", 256, 1
}

ACTOR RandomClip : CustomInventory replaces Clip
{
	Inventory.PickupMessage "$GOTBULLETS"
	Inventory.PickupSound "Item"
	States
	{
	Spawn:
		CLIP A -1
		Stop
	Pickup:
		TNT1 A 0 A_GiveInventory("Clip", random(1,15))
		Stop
	}
}
ACTOR RandomAmmoBox : CustomInventory replaces ClipBox
{
	Inventory.PickupMessage "$GOTAMMOBOX"
	Inventory.PickupSound "Item"
	States
	{
	Spawn:
		AMMO A -1
		Stop
	Pickup:
		TNT1 A 0 A_GiveInventory("Clip", random(1, 100))
		Stop
	}
}

ACTOR RandomShells : CustomInventory replaces Shell
{
	Inventory.PickupMessage "$GOTSHELLS"
	Inventory.PickupSound "Item"
	States
	{
	Spawn:
		SHEL A -1
		Stop
	Pickup:
		TNT1 A 0 A_GiveInventory("Shell", random(1,8))
		Stop
	}
}
ACTOR RandomShellBox : CustomInventory replaces ShellBox
{
	Inventory.PickupMessage "$GOTSHELLBOX"
	Inventory.PickupSound "Item"
	States
	{
	Spawn:
		SBOX A -1
		Stop
	Pickup:
		TNT1 A 0 A_GiveInventory("Shell", random(1, 25))
		Stop
	}
}

ACTOR RandomRocket : CustomInventory replaces RocketAmmo
{
	Inventory.PickupMessage "$GOTROCKET"
	Inventory.PickupSound "Item"
	States
	{
	Spawn:
		ROCK A -1
		Stop
	Pickup:
		TNT1 A 0 A_GiveInventory("RocketAmmo", random(1, 2))
		Stop
	}
}
ACTOR RandomRPGBox : CustomInventory replaces RocketBox
{
	Inventory.PickupMessage "$GOTRPGBOX"
	Inventory.PickupSound "Item"
	States
	{
	Spawn:
		BROK A -1
		Stop
	Pickup:
		TNT1 A 0 A_GiveInventory("RocketBox", random(1, 10))
		Stop
	}
}
ACTOR AllUpgrades : CustomInventory
{
	States
	{
	Pickup:
		TNT1 A 0 ACS_NamedExecute("GiveAllUpgrades")
		stop
	}
}

ACTOR RandomCell : CustomInventory replaces Cell
{
	Inventory.PickupMessage "$GOTCELL"
	Inventory.PickupSound "Item"
	States
	{
	Spawn:
		CELL A -1
		Stop
	Pickup:
		TNT1 A 0 A_GiveInventory("Cell", random(1, 25))
		Stop
	}
}
ACTOR RandomCellPack : CustomInventory replaces CellPack
{
	Inventory.PickupMessage "$GOTCELLBOX"
	Inventory.PickupSound "Item"
	States
	{
	Spawn:
		CELP A -1
		Stop
	Pickup:
		TNT1 A 0 A_GiveInventory("CellPack", random(1, 140))
		Stop
	}
}

ACTOR RandomHealth : CustomInventory replaces HealthBonus
{
	Inventory.PickupMessage "$GOTHTHBONUS"
	Inventory.PickupSound "Item"
	States
	{
	Spawn:
		BON1 ABCDCB 6
		Loop
	Pickup:
		TNT1 A 0 A_GiveInventory ("HealthBonus", random(1, 2))
		Stop
	}
}

ACTOR RandomArmBonus : CustomInventory replaces ArmorBonus
{
	Inventory.PickupMessage "$GOTARMBONUS"
	Inventory.PickupSound "Item"
	States
	{
	Spawn:
		BON2 ABCDCB 6
		Loop
	Pickup:
		TNT1 A 0 A_GiveInventory ("RNGArmBonus", random(1, 2))
		Stop
	}
}
ACTOR RNGArmBonus : ArmorBonus
{
	Armor.Maxsaveamount 300
}

ACTOR RandomStimpack : CustomInventory replaces Stimpack
{
	Inventory.PickupMessage "$GOTSTIM"
	Inventory.PickupSound "Item"
	States
	{
	Spawn:
		STIM A -1
		Stop
	Pickup:
		TNT1 A 0 A_GiveInventory ("Health", random(1, 15))
		Stop
	}
}

ACTOR RandomMedkit : CustomInventory replaces MediKit
{
	Inventory.PickupMessage "$GOTMEDIKIT"
	Inventory.PickupSound "Item"
	States
	{
	Spawn:
		MEDI A -1
		Stop
	Pickup:
		TNT1 A 0 A_GiveInventory ("Health", random(1, 75))
		Stop
	}
}

ACTOR RandomBerserk : CustomInventory replaces Berserk
{
	+COUNTITEM
	+INVENTORY.ALWAYSPICKUP
	Inventory.PickupMessage "$GOTBERSERK"
	Inventory.PickupSound "PowerPickup"
	States
	{
	Spawn:
		PSTR A -1
		Stop
	Pickup:
		TNT1 A 0 A_GiveInventory("PowerStrength")
		TNT1 A 0 HealThing(random(50, 100), 0)
		TNT1 A 0 A_SelectWeapon("RNGFist")
		Stop
	}
}

ACTOR RandomBackpack : CustomInventory
{
	Height 26
	Inventory.PickupMessage "$GOTBACKPACK"
	states
	{
	Spawn:
		BPAK A -1
		Stop
	Pickup:
		TNT1 A 0 A_Jump (32, 2)
		TNT1 A 0 A_GiveInventory ("Health", random(0, 25))
		TNT1 A 0 ACS_NamedExecute ("DoubleAmmoCapacity")
		TNT1 A 0 A_GiveInventory ("Clip", random(1, 15))
		TNT1 A 0 A_GiveInventory ("Shell", random(1, 8))
		TNT1 A 0 A_GiveInventory ("RocketAmmo", random(1, 4))
		TNT1 A 0 A_GiveInventory ("Cell", random(1, 40))
		TNT1 A 0 A_GiveInventory ("DoubleAmmoOnce")
		Stop
	}
}
ACTOR BackpackSpawner : RandomSpawner replaces Backpack
{
	DropItem "RandomBackpack", 256, 1
}

ACTOR RandomBarrel : ExplosiveBarrel
{
	States
	{
	Spawn:
		BAR1 A 0 A_SetHealth (random(1, 40))
		Goto Idle
	Idle:
		BAR1 ABCB 6
		Loop
	Death:
		BEXP A random(5, 13)
		BEXP B random(5, 20)
		BEXP C 0 A_StartSound ("worldbarrelx")
		BEXP C 5 A_Explode (random(50, 150), random(32, 256))
		BEXP D 5
		BEXP E 10 Bright
		Stop
	}
}
ACTOR RandomPowderBarrel : RandomBarrel
{
	States
	{
	Spawn:
		PWDR A 0 A_SetHealth (random(5, 60))
		PWDR A 1
		Wait
	Death:
		PWDR A Random(1, 40)
		PWDR B 2 A_StartSound ("worldbarrelx")
		PWDR C 0 A_Explode (random(75, 300), random(32, 512), XF_CIRCULAR)
		PWDR C 0 A_CustomBulletAttack (360, 360, random(8, 40), random(1, 60), "BulletImpact", random(64, 512))
		PWDR C 3 Bright
		Stop
	}
}
ACTOR BarrelSpawner : RandomSpawner replaces ExplosiveBarrel
{
	DropItem "RandomBarrel", 256, 11
	DropItem "RandomPowderBarrel", 256, 1
}
ACTOR NailFlechette : FastProjectile
{
	Speed 1
	Radius 10
	Height 1
	Damage 0
	Projectile
	+ROCKETTRAIL
	MissileType "NailTrail"
	States
	{
	Spawn:
		//TNT1 A 0 A_SpawnParticle ("White", 1, 24, 1, 0, 0, 0, 0, frandom(-0.2, 0.2), frandom(-0.2, 0.2), 0, 0, 0, 0)
		NAIL A 1 A_Jump(256, "Looping")
	Looping:
		NAIL A 0 A_ScaleVelocity(250)
		NAIL A 0 A_ChangeVelocity(0, 0, frandom(-12,12))
		NAIL A 1
		Wait
	Death:
		TNT1 A 0 A_Explode (random(15, 55), frandom(32, 64), XF_CIRCULAR)
		Stop
	}
}
ACTOR RailProjectile : FastProjectile
{
	Speed 300
	Radius 5
	Height 1
	Projectile
	States
	{
	Spawn:
		//TNT1 A 0 A_SpawnParticle ("White", 1, 24, 1, 0, 0, 0, 0, frandom(-0.2, 0.2), frandom(-0.2, 0.2), 0, 0, 0, 0)
		NAIL A 1
		Loop
	Death:
		TNT1 A 0 A_CustomRailgun(0, 0, none, "CBAA00", RGF_SILENT|RGF_FULLBRIGHT|RGF_NORANDOMPUFFZ,1, 10.0, None, 0.0, 0.0, 10000, 1, 1, 100)
		TNT1 A 0 A_Explode (random(80, 512), frandom(50, 100), 1|XF_CIRCULAR)
		Stop
	}
}
ACTOR FireProjectile : FastProjectile
{
	Speed 1
	Radius 2
	Height 1
	Projectile
	DamageType "Fire"
	+ROCKETTRAIL
	MissileType "FireTrail"
	States
	{
	Spawn:
		FRNL A 1 A_Jump(256, "Looping")
		Goto Looping
	Looping:
		FRNL A 0 A_ScaleVelocity(frandom(100,250))
		FRNL A 0 A_ChangeVelocity(0, 0, frandom(-8,8))
		FRNL A 1
		Wait
	Death:
		TNT1 A 0 A_Explode(frandom(5, 20), frandom(48,64), 1|XF_CIRCULAR)
		Stop
	}
}
ACTOR RNGRocket : FastProjectile replaces Rocket
{
	Speed 40
	Damage 0
	Radius 8
	Height 8
	+ROCKETTRAIL
	MissileType "SmokeTrail"
	DeathSound "weaponsrocklx"
	Projectile
	States
	{
	Spawn:
		MISL A 1 A_Jump (256, "Looping")
	Looping:
		MISL A 0 A_ScaleVelocity (frandom(0.5, 1.75))
		MISL A 1 
		Wait
	Death:
		MISL B 3 Bright A_Explode (random(80, 275), random(128, 256), 1|XF_CIRCULAR)
		MISL C 6 Bright
		MISL D 9 Bright
		Stop
	}
}
ACTOR MultiRocket : FastProjectile
{
	Speed 40
	Damage 0
	Radius 8
	Height 8
	+ROCKETTRAIL
	MissileType "SmokeTrail"
	DeathSound "weaponsrocklx"
	Projectile
	States
	{
	Spawn:
		MISL A 1
		Loop
	Death:
		MISL B 3 Bright A_Explode (random(50, 200), 128, 1|XF_CIRCULAR)
		MISL C 6 Bright
		MISL D 9 Bright
		Stop
	}
}
ACTOR RNGCrocket : FastProjectile
{
	Speed 40
	Damage 0
	Radius 11
	Height 8
	MissileType "CritSmoke"
	+ROCKETTRAIL
	DeathSound "weaponsrocklx"
	Projectile
	States
	{
	Spawn:
		MISC A 1 A_Jump (256, "Looping")
	Looping:
		MISC A 0 Bright A_ScaleVelocity (frandom(0.5, 1.75))
		MISC A 1 Bright
		Wait
	Death:
		TNT1 A 0 A_Quake (9, 2, 0, 512)
		MISL B 3 Bright A_Explode (random(200, 840), random(192, 384), 1|XF_CIRCULAR)
		MISL C 6 Bright
		MISL D 9 Bright
		Stop
	}
}
ACTOR RNGPLasmaBall : FastProjectile replaces PlasmaBall
{
	Speed 50
	Radius 8
	Height 8
	Projectile
	DeathSound "weaponsplasmax"
	States
	{
	Spawn:
		PLSS A 1 A_Jump (256, "Looping")
	Looping:
		PLSS A 0 A_ScaleVelocity (frandom(0.5, 2))
		PLSS AB 2 Bright
		Wait
	Death:
		PLSE A 3 Bright A_Explode (random(10, 100), 100, 1|XF_CIRCULAR)
		PLSE B 4 Bright
		PLSE C 5 Bright
		PLSE D 6 Bright
		PLSE E 7 Bright
		Stop
	}
}
ACTOR RNGBFGBall : FastProjectile
{
	Speed 20
	Radius 12
	Height 12
	Projectile
	DeathSound "weaponsbfgx"
	States
	{
	Spawn:
		BFS1 AB 4 Bright
		Loop
	Death:
		BFE1 A 0 A_Explode (random(100, 1000), 400, 1|XF_CIRCULAR)
		BFE1 A random(1, 3) A_BFGSpray ("NullBFG", random(1, 90), 0, frandom(1, 900), random(512, 2048), frandom(1, 32), random(50, 500), 0)
		BFE1 B random(2, 4)
		BFE1 C random(3, 5)
		BFE1 D random(4, 6)
		BFE1 E random(5, 7)
		BFE1 F random(6, 8)
		Stop
	}
}

ACTOR InstableBFGBall : FastProjectile
{
	Speed 9999
	Radius 12
	Height 12
	Projectile
	States
	{
	Spawn:
		BFS1 AB 1 Bright
		Loop
	Death:
		//TNT1 A 0 A_Quake (9, 25, 0, 500, None)
		//TNT1 A 0 A_Quake (6, 40, 0, 1000, None)
		//TNT1 A 0 A_Quake (3, 55, 0, 1500, None)
		//TNT1 A 0 A_Quake (1, 70, 0, 2000, None)
		TNT1 A 0 A_QuakeEx (9, 9, 9, 190, 0, 500, None, QF_SCALEDOWN|QF_RELATIVE|QF_3D, 0.0, 0.0, 0.0, 2000)
		TNT1 A 0 A_Explode (50000, 100000, 1|XF_CIRCULAR, 0)
		TNT1 A 0 A_BFGSpray("NullBFG", 360, 10000, 360, 2000, 2000)
		TNT1 A 70
		Stop
	}
}
ACTOR ImpFire : FastProjectile
{
	Radius 6
	Height 8
	Speed 10
	Projectile
	+NOTELEPORT
	States
	{
	Spawn:
		TNT1 A 0 A_JumpIf(CallACS("SkillChecker")<4, 2)
		TNT1 A 0 A_JumpIf(CallACS("SkillChecker")==4, 3)
		TNT1 A 0 A_ScaleVelocity(frandom(0.75, 1.5))
		TNT1 A 0 A_Jump(256, "IdleSeek")
		TNT1 A 0 A_ScaleVelocity(frandom(2, 4))
		Goto IdleSeek
	IdleSeek:
		//IDK how to make this part a lot shorter...
		TNT1 A 0 A_SpawnItemEx("FireTrail")
		BALL A 1 Bright
		TNT1 A 0 A_SpawnItemEx("FireTrail")
		BALL A 1 Bright
		TNT1 A 0 A_SpawnItemEx("FireTrail")
		BALL A 1 Bright
		TNT1 A 0 A_SpawnItemEx("FireTrail")
		BALL A 1 Bright
		TNT1 A 0 A_SpawnItemEx("FireTrail")
		BALL B 1 Bright
		TNT1 A 0 A_SpawnItemEx("FireTrail")
		BALL B 1 Bright
		TNT1 A 0 A_SpawnItemEx("FireTrail")
		BALL B 1 Bright
		TNT1 A 0 A_SpawnItemEx("FireTrail")
		BALL B 1 Bright
		Loop
	Death:
		TNT1 A 0 A_Explode (random(3,24), 20, XF_CIRCULAR, false, 20)
		BALL C 6 Bright
		BALL DE 6 Bright
		Stop
	}
}
ACTOR CacoFire : FastProjectile
{
	Radius 6
	Height 8
	Speed 10
	Projectile
	+NOTELEPORT
	States
	{
	Spawn:
		TNT1 A 0 A_JumpIf(CallACS("SkillChecker")<4, 2)
		TNT1 A 0 A_JumpIf(CallACS("SkillChecker")==4, 3)
		TNT1 A 0 A_ScaleVelocity(frandom(0.75, 1.5))
		TNT1 A 0 A_Jump(256, "IdleSeek")
		TNT1 A 0 A_ScaleVelocity(frandom(2, 4))
		Goto IdleSeek
	IdleSeek:
		//IDK how to make this part a lot shorter...
		TNT1 A 0 A_SpawnItemEx("FireTrail")
		BAL2 A 1 Bright
		TNT1 A 0 A_SpawnItemEx("FireTrail")
		BAL2 A 1 Bright
		TNT1 A 0 A_SpawnItemEx("FireTrail")
		BAL2 A 1 Bright
		TNT1 A 0 A_SpawnItemEx("FireTrail")
		BAL2 A 1 Bright
		TNT1 A 0 A_SpawnItemEx("FireTrail")
		BAL2 B 1 Bright
		TNT1 A 0 A_SpawnItemEx("FireTrail")
		BAL2 B 1 Bright
		TNT1 A 0 A_SpawnItemEx("FireTrail")
		BAL2 B 1 Bright
		TNT1 A 0 A_SpawnItemEx("FireTrail")
		BAL2 B 1 Bright
		Loop
	Death:
		TNT1 A 0 A_Explode (random(3,24), 20, XF_CIRCULAR, false, 20)
		BAL2 CDE 6 Bright
		Stop
	}
}

ACTOR NullBFG : BFGExtra
{
	states
	{
	Spawn:
		BFE2 ABCD 3
		Stop
	}
}

ACTOR Flame
{
	Radius 1
	Height 1
	Gravity 0
	+ALLOWPARTICLES
	+THRUACTORS
	States
	{
	Spawn:
		FLAM ABCDEFGH 2 Bright
		Stop
	}
}
ACTOR TestFire : FastProjectile
{
	Radius 1
	Height 1
	Gravity 0
	Speed 1
	Projectile
	+ALLOWPARTICLES
	States
	{
	Spawn:
		FLAM ABCDEFGH random(1,3) Bright A_ScaleVelocity(0.8)
		Stop
	Death:
		TNT1 A 0 A_Explode(random(1, 2), 64, 0)
		TNT1 A 0 A_ChangeVelocity(frandom(-0.3, 0.3), frandom(-0.3, 0.3), frandom(0, 0.75), CVF_RELATIVE)
		TNT1 A 0 A_SetRoll(random(0,4)*90)
		SMKE ABCDEFGHI random(1,6) A_FadeOut(1/9, 1)
		Stop
	}
}
ACTOR FireTrail : Flame
{
	States
	{
	Spawn:
		TNT1 A 0 A_JumpIf(CallACS("Particles")==0, 3)
		TNT1 A 0 A_JumpIf(CallACS("Particles")==1, "QSpawn")
		TNT1 A 1 A_SpawnItemEx("Flame", frandom(-4, 4), frandom(-4 ,4), frandom(-4, 4), frandom(-1, 1), frandom(-1, 1), frandom(0, 0.5), angle)
		Stop
	QSpawn:
		TNT1 A 1 A_SpawnParticle("FF9900", SPF_RELPOS|SPF_FULLBRIGHT, 35, 5.0, angle, frandom(-4, 4), frandom(-4, 4), frandom(-4, 4), frandom(-1, 1), frandom(-1, 1), frandom(-0.5, 1.5), frandom(-0.1, 0.1), frandom(-0.1, 0.1), frandom(-0.1, 0.1), 1, -1)
		Stop
	}
}

ACTOR BloodParticle
{
	Radius 0.1
	Height 0.1
	Gravity 0.4
	BounceType "None"
	+ALLOWPARTICLES
	+NOTELEPORT
	+NOBLOCKMAP
	states
	{
	Spawn:
		BLDD ABCD 7
		TNT1 A 0 A_SetTranslucent(0.6)
		BLDD E 7
		TNT1 A 0 A_SetTranslucent(0.3)
		BLDD F 7
		Stop
	}
}

ACTOR BloodDrop 
{
	Radius 1
	Height 1
	Gravity 0.3
	+NOTELEPORT
	+NOBLOCKMAP
	+ALLOWPARTICLES
	states
	{
	Spawn:
		BLDD ABCDEF 1 A_SetTics(random(1, 6))
		Stop
	}
}
ACTOR BloodPuff replaces Blood
{
	States
	{
	Spawn:
		TNT1 A 0 A_JumpIf(CallACS("Particles")==0, 3)
		TNT1 A 0 A_JumpIf(CallACS("Particles")==1, "QSpawn")
		//I duplicated it because of the hardcoded functionality of the Blood actor
		TNT1 A 0 A_JumpIf(CallACS("Particles")==1, "QSpawn")
		TNT1 A 0 A_JumpIf(CallACS("BloodAmount")==0, "Default")
		TNT1 A 0 A_JumpIf(CallACS("BloodAmount")==1, 4)
		TNT1 A 0 A_JumpIf(CallACS("BloodAmount")==2, "Intense")
		TNT1 A 0 A_JumpIf(CallACS("BloodAmount")==3, "Brutal")
		TNT1 A 0 A_JumpIf(CallACS("BloodAmount")==4, "Xtreme")
		TNT1 A 0 A_Jump(256, random(1,10))
		TNT1 AAAAAAAAAA 0 A_SpawnItemEx("BloodDrop", frandom(-5, 5), frandom(-5, 5), frandom(-5, 5), frandom(2, 10), frandom(-2.5, 2.5), frandom(0.5, 2.5), 0, SXF_USEBLOODCOLOR)
		TNT1 A 1
		Stop
	Default:
		TNT1 A 0 A_SpawnItemEx("BloodDrop", 0.0, 0.0, 0.0, 0, frandom(-1, 1), frandom(1, 2), 0, SXF_USEBLOODCOLOR)
		TNT1 A 1
		Stop
	Intense:
		TNT1 AAAAAAAAAA 0 A_SpawnItemEx("BloodDrop", frandom(-5, 5), frandom(-5, 5), frandom(-5, 5), frandom(2, 15), frandom(-2, 2), frandom(-1, 3), 0, SXF_USEBLOODCOLOR)
		TNT1 A 1
		Stop
	Brutal:
		TNT1 AAAAAAAAAAAAAAAAAAAAAAAAA 0 A_SpawnItemEx("BloodDrop", frandom(-5, 5), frandom(-5, 5), frandom(-5, 5), frandom(4, 20), frandom(-3, 3), frandom(-1.5, 3), 0, SXF_USEBLOODCOLOR)
		TNT1 A 1
		Stop
	Xtreme:
		TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 0 A_SpawnItemEx("BloodDrop", frandom(-5, 5), frandom(-5, 5), frandom(-5, 5), frandom(5, 25), frandom(-4, 4), frandom(-2, 4), 0, SXF_USEBLOODCOLOR)
		TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 0 A_SpawnItemEx("BloodDrop", frandom(-5, 5), frandom(-5, 5), frandom(-5, 5), frandom(5, 25), frandom(-4, 4), frandom(-2, 4), 0, SXF_USEBLOODCOLOR)
		TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 0 A_SpawnItemEx("BloodDrop", frandom(-5, 5), frandom(-5, 5), frandom(-5, 5), frandom(5, 25), frandom(-4, 4), frandom(-2, 4), 0, SXF_USEBLOODCOLOR)
		TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 0 A_SpawnItemEx("BloodDrop", frandom(-5, 5), frandom(-5, 5), frandom(-5, 5), frandom(5, 25), frandom(-4, 4), frandom(-2, 4), 0, SXF_USEBLOODCOLOR)
		TNT1 A 1
		Stop
	QSpawn:
		TNT1 AAAAAAAAAAAAA 0 A_SpawnParticle("7F0000", SPF_RELVEL|SPF_RELACCEL|SPF_RELPOS|SPF_FULLBRIGHT, 14, 5.0, angle, frandom(-12, 12), frandom(-12, 12), frandom(-12, 12), frandom(-2, 2), frandom(-2, 2), frandom(-2, 2), frandom(-0.05, 0.05), frandom(-0.05, 0.05), frandom(-0.05, 0.05), 2.0, -1)
		TNT1 A 1
		Stop
	}
}

ACTOR BloodSplat : BloodParticle
{
	states
	{
	Spawn:
		TNT1 A 0 A_JumpIf(CallACS("BloodAmount")==0, 5)
		TNT1 A 0 A_JumpIf(CallACS("BloodAmount")==1, "Low")
		TNT1 A 0 A_JumpIf(CallACS("BloodAmount")==2, "Generic")
		TNT1 A 0 A_JumpIf(CallACS("BloodAmount")==3, "Brutal")
		TNT1 A 0 A_JumpIf(CallACS("BloodAmount")==4, "PaintRed")
		TNT1 A 1
		Stop
	Low:
		TNT1 A 0 A_SpawnItemEx ("BloodParticle", random(-20, 20), random(-20, 20), random(7, 57), (frandom(-4 ,4)+velx*3), (frandom(-4, 4)+vely*3), (frandom(1, 6)+velz*3))
		TNT1 A 1
		Stop
	Generic:
		TNT1 AAAAAA 0 A_SpawnItemEx ("BloodParticle", random(-20, 20), random(-20, 20), random(7, 57), (frandom(-6 ,6)+velx*3), (frandom(-6, 6)+vely*3), (frandom(1, 9)+velz*3))
		TNT1 A 1
		Stop
	Brutal:
		TNT1 AAAAAAAAAAAAAAAAAAAA 0 A_SpawnItemEx ("BloodParticle", random(-20, 20), random(-20, 20), random(7, 57), (frandom(-8 ,8)+velx*3), (frandom(-8, 8)+vely*3), (frandom(1, 12)+velz*3))
		TNT1 A 1
		Stop
	PaintRed:
		TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 0 A_SpawnItemEx ("BloodParticle", random(-20, 20), random(-20, 20), random(7, 57), (frandom(-10 ,10)+velx*3), (frandom(-10, 10)+vely*3), (frandom(1, 15)+velz*3))
		TNT1 A 1
		Stop
	}
}

ACTOR Puff
{
	+NOBLOCKMAP
	+NOGRAVITY
	VSpeed 0
	states
	{
	Spawn:
		TNT1 A 0
		BPUF A 1 Bright
		BPUF B 1 Bright
		BPUF C 1 Bright
		BPUF D 1 Bright
		BPUF E 1 Bright
		Stop
	}
}
ACTOR BulletImpact : Puff
{
	Radius 1
	Height 1
	States
	{
	Spawn:
		TNT1 A 0 A_JumpIf(CallACS("Particles")==0, 2)
		TNT1 A 0 A_JumpIf(CallACS("Particles")==1, "QSpawn")
		TNT1 A 0 Light("BulletSpark")
		//TNT1 A 0 A_SpawnItemEx("Puff", 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
		TNT1 A random(10,52)
		TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAA random(1,17) A_SpawnItemEx ("ImpactSmoke", 0.0, 0.0, 0.0, frandom(-0.2, 0.2), frandom(-0.2, 0.2), frandom(0, 0.3))
		Stop
	QSpawn:
		TNT1 AAAAAAAAAA 0 A_SpawnParticle("606060", SPF_RELVEL|SPF_RELACCEL, 105, 5.0, 0.0, frandom(-1, 1), frandom(-1, 1), frandom(-1, 1), frandom(-0.05, 0.05), frandom(-0.05, 0.05), frandom(0.05, 0.3), 0.0, 0.0, -0.001, frandom(0.1, 0.75), -1)
		TNT1 AAAAAAAAAA 0 A_SpawnParticle("FFBD00", SPF_FULLBRIGHT|SPF_RELVEL|SPF_RELACCEL, 3, 5.0, 0.0, frandom(-2, 2), frandom(-2, 2), frandom(-2, 2), frandom(-3, 3), frandom(-3, 3), frandom(-3, 3), 0.0, 0.0, 0.0, 1.0, -1)
		TNT1 A 1
		Stop
	Melee:
		TNT1 A 0 A_JumpIf(CallACS("Particles")==0, 2)
		TNT1 A 0 A_JumpIf(CallACS("Particles")==1, "QMelee")
		TNT1 A 0 A_SpawnItemEx ("ImpactSmoke", 0.0, 0.0, -15.0, frandom(-0.2, 0.2), frandom(-0.2, 0.2), frandom(0, 0.5))
		Stop
	QMelee:
		TNT1 AAAAA 1 A_SpawnParticle("606060", SPF_RELVEL|SPF_RELACCEL, 17, 5.0, 0.0, frandom(-2, 2), frandom(-2, 2), frandom(-2, 2), frandom(-1, 1), frandom(-1, 1), frandom(-1, 1), 0.0, 0.0, 0.0, 1.0, -1)
		//TNT1 A 1 A_SpawnParticle("606060", SPF_RELVEL|SPF_RELACCEL, 99999, 5.0, 0.0, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0.0)
		Stop
	Nothing:
		TNT1 A 1
		Stop
	}
}
ACTOR PuffSmoke
{
	Radius 1
	Height 1
	Gravity 0
	+NOCLIP
	+NOBLOCKMAP
	+NOINTERACTION
}
ACTOR ImpactSmoke : PuffSmoke
{
	Radius 0.5
	Height 0.5
	Alpha 0.1
	RenderStyle "Translucent"
	States
	{
	Spawn:
		SMKE ABCDEFGHI 3
		{
			A_FadeTo(0.0, alpha/9);
		}
		Stop
	}
}
ACTOR RocketSmoke : PuffSmoke
{
	States
	{
	Spawn:
		SMKE ABCDEFGHI 3
		{
			A_FadeTo(0.0, alpha/9);
		}
		Stop
	}
}

ACTOR NailTrail : RocketSmokeTrail
{
	Alpha 1.0
	Vspeed 0
	States
	{
	Spawn:
		PART ABC 1
		{
			A_ChangeVelocity (frandom(-2, 2), 0, frandom(-2, 2));
			A_FadeOut(1/4, 0);
		}
		Stop
	}
}

ACTOR SmokeTrail : RocketSmokeTrail
{
	Alpha 1.0
	Vspeed 0
	States
	{
	Spawn:
		TNT1 A 0 A_SpawnItemEx ("RocketSmoke", -5, 0, 15, frandom(0.4, -0.4), frandom(0.4, -0.4), frandom(0.4, -0.4))
		TNT1 A 1 A_SpawnItemEx ("RocketSmoke", -5, 0, 15, frandom(0.4, -0.4), frandom(0.4, -0.4), frandom(0.4, -0.4))
		Stop
	Death:
		TNT1 A 1
		Stop
	}
}
ACTOR CritSmoke : RocketSmokeTrail
{
	Radius 1
	Height 1
	Alpha 1.0
	Vspeed 0
	+NOINTERACTION
	+NOCLIP
	+NOBLOCKMAP
	+BRIGHT
	States
	{
	Spawn:
		/*CRIT ABCDEFGHIJK 3 A_ChangeVelocity(frandom(0.2, -0.2), frandom(0.2, -0.2), frandom(0.2, -0.2))
		CRIT L 0 A_SetTranslucent(0.8)
		CRIT L 3 A_ChangeVelocity(frandom(0.2, -0.2), frandom(0.2, -0.2), frandom(0.2, -0.2))
		CRIT M 0 A_SetTranslucent(0.6)
		CRIT M 3 A_ChangeVelocity(frandom(0.2, -0.2), frandom(0.2, -0.2), frandom(0.2, -0.2))
		CRIT N 0 A_SetTranslucent(0.4)
		CRIT N 3 A_ChangeVelocity(frandom(0.2, -0.2), frandom(0.2, -0.2), frandom(0.2, -0.2))
		CRIT O 0 A_SetTranslucent(0.2)
		CRIT O 3 A_ChangeVelocity(frandom(0.2, -0.2), frandom(0.2, -0.2), frandom(0.2, -0.2))
		CRIT P 0 A_SetTranslucent(0)
		CRIT P 3 A_ChangeVelocity(frandom(0.2, -0.2), frandom(0.2, -0.2), frandom(0.2, -0.2))*/
		CRIT A 3 A_ChangeVelocity(frandom(1, -1), frandom(1, -1), frandom(1, -1))
		KRIT BCD 3 A_ChangeVelocity(frandom(1, -1), frandom(1, -1), frandom(1, -1))
		Stop
	}
}

//IDK if there's a better way to handle these without using inventory classes.
ACTOR SquibBullets : Inventory
{
	Inventory.MaxAmount 1
}
ACTOR SquibShells : Inventory
{
	Inventory.MaxAmount 1
}
ACTOR PowerSSG : Inventory
{
	Inventory.MaxAmount 1
}
ACTOR NailShells : Inventory
{
	Inventory.MaxAmount 1
}
ACTOR First50BMGUse : Inventory
{
	Inventory.MaxAmount 1
}
ACTOR DblSawUpgrade : Inventory
{
	Inventory.MaxAmount 1
}
ACTOR PistolUpgrade : Inventory
{
	Inventory.MaxAmount 1
}
ACTOR AutoUpgrade : Inventory
{
	Inventory.MaxAmount 1
}
ACTOR ScopeUpgrade : Inventory
{
	Inventory.MaxAmount 1
}
ACTOR QuadUpgrade : Inventory
{
	Inventory.MaxAmount 1
}
ACTOR Bursts : Inventory
{
	Inventory.MaxAmount 10
}
ACTOR HeavyUpgrade : Inventory
{
	Inventory.MaxAmount 1
}
ACTOR RocketUpgrade : Inventory
{
	Inventory.MaxAmount 1
}
ACTOR RailUpgrade : Inventory
{
	Inventory.MaxAmount 1
}
ACTOR BFGUpgrade : Inventory
{
	Inventory.MaxAmount 1
}
ACTOR RNGAmmo : Inventory
{
	Inventory.MaxAmount 1
}
ACTOR DoubleAmmoOnce : Inventory
{
	Inventory.MaxAmount 2
}
ACTOR BloodFlow : Inventory
{
	Inventory.MaxAmount 10
}
ACTOR PlasmaOverheat : Inventory
{
	Inventory.MaxAmount 1000
}
ACTOR HeatCooldownTimer : Inventory
{
	Inventory.MaxAmount 5
}
ACTOR AimDownScope : Inventory
{
	Inventory.MaxAmount 1
}
ACTOR AimCharge : Inventory
{
	Inventory.MaxAmount 100
}
ACTOR Angle1 : Inventory
{
	Inventory.MaxAmount 18000000000
}
/*
	There's no way I'm going to switch to ZScript...
*/
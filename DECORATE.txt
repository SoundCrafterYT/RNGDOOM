ACTOR RNGPlayer : DoomPlayer
{
	Player.DisplayName "Casual"
	Player.StartItem "RNGPistol"
	Player.StartItem "RNGFist"
	Player.WeaponSlot 1, RNGFist, RNGChainsaw
	Player.WeaponSlot 2, RNGPistol
	Player.WeaponSlot 3, RNGShotgun, RNGSShotgun
	Player.WeaponSlot 4, RNGChaingun
	Player.WeaponSlot 5, RNGRPG
	Player.WeaponSlot 6, RNGPlasma
	Player.WeaponSlot 7, RNGBFG
}
/*ACTOR VanillaPlayer : DoomPlayer
{
	Player.DisplayName "Purist"
	Player.StartItem "RandPistol"
	Player.WeaponSlot 1, RandFist, RandChainsaw
	Player.WeaponSlot 2, RandPistol
	Player.WeaponSlot 3, RandShotgun, RandSShotgun
	Player.WeaponSlot 4, RandChaingun
	Player.WeaponSlot 5, RandRPG
	Player.WeaponSlot 6, RandPlasma
	Player.WeaponSlot 7, RandBFG
}*/

ACTOR Trooper : Zombieman replaces ZombieMan
{
	Health 100
	DropItem "PistolSpawner", 48, 1
	DropItem "Clip"
	Mass 200
	BloodType "BloodDrop"
	SeeSound "gruntsight"
	PainSound "imppain"
	DeathSound "gruntdeath"
	ActiveSound "gruntactive"
	States
	{
	Spawn:
		POSS AB 10 A_Look
		Loop
	See:
		POSS AABBCCDD 4 A_Chase
		Loop
	Missile:
		POSS E random(0, 10) A_FaceTarget
		POSS E 0 A_PlaySound ("Pistol")
		POSS F 8 A_CustomBulletAttack (frandom(1, 25), 0, 1, random(1,10), "Puff", random(64, 2048), 0, AAPTR_TARGET, "Tracer", 31, 6)
		POSS E 8
		Goto See
	Pain:
		POSS G 1 A_Pain
		POSS G 5 
		Goto See
	Death:
		POSS H 5
		POSS I 5 A_Scream
		POSS J 5 A_NoBlocking
		POSS K 5
		POSS L -1
		Stop
	XDeath:
		POSS M 0 A_SpawnItemEx ("BloodSplat", 0, 0, 0, 20*velx, 20*vely, 20*velz)
		POSS M 5
		POSS N 0 A_SpawnItemEx ("BloodSplat", 0, 0, 0, velx, vely, velz)
		POSS N 5 A_XScream
		POSS O 0 A_SpawnItemEx ("BloodSplat", 0, 0, 0, velx, vely, velz)
		POSS O 5 A_NoBlocking
		TNT1 A 0 A_SpawnItemEx ("BloodSplat", 0, 0, 0, velx, vely, velz)
		POSS PQRST 5
		POSS U -1
		Stop
	Raise:
		POSS K 5
		POSS JIH 5
		Goto See
	}
}
ACTOR SgTrooper : ShotgunGuy replaces ShotgunGuy
{
	Health 110
	DropItem "SGSpawner"
	Mass 200
	BloodType "BloodDrop"
	 SeeSound "shotguysight"
	PainSound "imppain"
	DeathSound "shotguydeath"
	ActiveSound "shotguyactive"
	States
	{
	Spawn:
		SPOS AB 10 A_Look
		Loop
	See:
		SPOS AABBCCDD 3 A_Chase
		Loop
	Missile:
		SPOS E random(0, 10) A_FaceTarget
		SPOS F 0 bright A_PlaySound("Shotgun", CHAN_WEAPON)
		SPOS F 10 bright A_CustomBulletAttack(frandom(11, 34), 0, random(1,5), random(1, 12), "Puff", frandom(64, 2048), 0, AAPTR_TARGET, "Tracer", 31, 6)
		SPOS E 10
		Goto See
	Pain:
		SPOS G 3
		SPOS G 3 A_Pain
		Goto See
	Death:
		SPOS H 5
		SPOS I 5 A_Scream
		SPOS J 5 A_NoBlocking
		SPOS K 5
		SPOS L -1
		Stop
	XDeath:
		SPOS M 0 A_SpawnItemEx ("BloodSplat", 0, 0, 0, 20*velx, 20*vely, 20*velz)
		SPOS M 5
		SPOS N 0 A_SpawnItemEx ("BloodSplat", 0, 0, 0, velx, vely, velz)
		SPOS N 5 A_XScream
		SPOS O 0 A_SpawnItemEx ("BloodSplat", 0, 0, 0, velx, vely, velz)
		SPOS O 5 A_NoBlocking
		TNT1 A 0 A_SpawnItemEx ("BloodSplat", 0, 0, 0, velx, vely, velz)
		SPOS PQRST 5
		SPOS U -1
		Stop
	Raise:
		SPOS L 5
		SPOS KJIH 5
		Goto See
	}
}
ACTOR Heavy : ChaingunGuy replaces ChaingunGuy
{
	Health 120
	DropItem "ChaingunSpawner"
	Mass 200
	BloodType "BloodDrop"
	SeeSound "chainguysight"
	PainSound "imppain"
	DeathSound "chainguydeath"
	ActiveSound "chainguyactive"
	AttackSound "chainguyattack"
	States
	{
	Spawn:
		CPOS AB 10 A_Look
		Loop
	See:
		CPOS AABBCCDD 3 A_Chase
		Loop
	Missile:
		CPOS E random(1, 10) A_FaceTarget
		CPOS F 0 Bright A_PlaySound("Shotgun", CHAN_WEAPON)
		CPOS F 4 Bright A_CustomBulletAttack(frandom(5, 22.5), 0, 1, random(1,10), "Puff", random(64, 2048), 0, AAPTR_TARGET, "Tracer", 31, 6)
		CPOS E 0 Bright A_PlaySound("Shotgun", CHAN_WEAPON)
		CPOS E 4 Bright A_CustomBulletAttack(frandom(5, 22.5), 0, 1, random(1, 10), "Puff", random(64,2048), 0, AAPTR_TARGET, "Tracer", 31, 6)
		CPOS F 1 A_CPosRefire
		Goto Missile+1
	Pain:
		CPOS G 3
		CPOS G 3 A_Pain
		Goto See
	Death:
		CPOS H 5
		CPOS I 5 A_Scream
		CPOS J 5 A_NoBlocking
		CPOS KLM 5
		CPOS N -1
		Stop
	XDeath:
		CPOS O 0 A_SpawnItemEx ("BloodSplat", 0, 0, 0, 20*velx, 20*vely, 20*velz)
		CPOS O 5 
		CPOS P 0 A_SpawnItemEx ("BloodSplat", 0, 0, 0, velx, vely, velz)
		CPOS P 5 A_XScream
		CPOS Q 0 A_SpawnItemEx ("BloodSplat", 0, 0, 0, velx, vely, velz)
		CPOS Q 5 A_NoBlocking
		TNT1 A 0 A_SpawnItemEx ("BloodSplat", 0, 0, 0, velx, vely, velz)
		CPOS RS 5
		CPOS T -1
		Stop
	Raise:
		CPOS N 5
		CPOS MLKJIH 5
		Goto See
	}
}
ACTOR Imp : DoomImp replaces DoomImp
{
	Health 160
	Mass 250
	BloodType "BloodDrop"
	SeeSound "impsight"
	PainSound "imppain"
	DeathSound "impdeath"
	ActiveSound "impactive"
	States
	  {
	  Spawn:
		TROO AB 10 A_Look
		Loop
	See:
		TROO AABBCCDD 3 A_Chase
		Loop
	  Melee:
	  Missile:
		TROO EF 8 A_FaceTarget
		TROO G 6 A_CustomComboAttack("DoomImpBall", 32, random(1, 24), "imp/melee")
		Goto See
	Pain:
		TROO H 2
		TROO H 2 A_Pain
		Goto See
	Death:
		TROO I 8
		TROO J 8 A_Scream
		TROO K 6
		TROO L 6 A_NoBlocking
		TROO M -1
		Stop
	XDeath:
		TROO N 0 A_SpawnItemEx ("BloodSplat", 0, 0, 0, 20*velx, 20*vely, 20*velz)
		TROO N 5
		TROO O 0 A_SpawnItemEx ("BloodSplat", 0, 0, 0, velx, vely, velz)
		TROO O 5 A_XScream
		TROO P 0 A_SpawnItemEx ("BloodSplat", 0, 0, 0, velx, vely, velz)
		TROO P 5
		TROO Q 0 A_SpawnItemEx ("BloodSplat", 0, 0, 0, velx, vely, velz)
		TROO Q 5 A_NoBlocking
		TNT1 A 0 A_SpawnItemEx ("BloodSplat", 0, 0, 0, velx, vely, velz)
		TROO RST 5
		TROO U -1
		Stop
	Raise:
		TROO ML 8
		TROO KJI 6
		Goto See
	}
}
ACTOR Pinky : Demon replaces Demon
{
	Health 200
	Mass 300
	BloodType "BloodDrop"
	SeeSound "demonsight"
	AttackSound "demonmelee"
	PainSound "demonpain"
	DeathSound "demondeath"
	ActiveSound "demonactive"
}
ACTOR InvisPinky : Spectre replaces Spectre
{
	Health 250
	Mass 300
	BloodType "BloodDrop"
	SeeSound "spectresight"
	AttackSound "spectremelee"
	PainSound "spectrepain"
	DeathSound "spectredeath"
	ActiveSound "spectreactive"
}
ACTOR Soul : LostSoul replaces LostSoul
{
	Health 30
	Mass 75
	BloodType "BloodDrop"
	AttackSound "skullmelee"
	PainSound "skullpain"
	DeathSound "skulldeath"
	ActiveSound "skullactive"
}
ACTOR Meatball : CacoDemon replaces CacoDemon
{
	Health 800
	Mass 1000
	BloodColor "Blue"
	BloodType "BloodDrop"
	SeeSound "cacosight"
	PainSound "cacopain"
	DeathSound "cacodeath"
	ActiveSound "cacoactive"
}
ACTOR OneEyed : PainElemental replaces PainElemental
{
	Health 900
	Mass 1100
	BloodType "BloodDrop"
	SeeSound "painsight"
	PainSound "painpain"
	DeathSound "paindeath"
	ActiveSound "painactive"
}
ACTOR Fatman : Fatso replaces Fatso
{
	Health 1000
	Mass 2300
	BloodType "BloodDrop"
	SeeSound "fatsosight"
	PainSound "fatsopain"
	DeathSound "fatsodeath"
	ActiveSound "fatsoactive"
}
ACTOR Satan : BaronOfHell replaces BaronOfHell
{
	Health 1500
	Mass 1200
	BloodColor "Green"
	BloodType "BloodDrop"
	SeeSound "baronsight"
	PainSound "baronpain"
	DeathSound "barondeath"
	ActiveSound "baronactive"
}
ACTOR BrotherSatan : HellKnight replaces HellKnight
{
	Health 1200
	Mass 1100
	BloodColor "Green"
	BloodType "BloodDrop"
	SeeSound "knightsight"
	ActiveSound "knightactive"
	PainSound "knightpain"
	DeathSound "knightdeath"
}
ACTOR Arch : Archvile replaces Archvile
{
	Health 800
	Mass 320
	BloodType "BloodDrop"
	SeeSound "vilesight"
	PainSound "vilepain"
	DeathSound "viledeath"
	ActiveSound "vileactive"
	MeleeSound "vilestop"
}
ACTOR SpookyBoi : Revenant replaces Revenant
{
	Health 200
	Mass 190
	BloodType "BloodDrop"
	SeeSound "skeletonsight"
	PainSound "skeletonpain"
	DeathSound "skeletondeath"
	ActiveSound "skeletonactive"
	MeleeSound "skeletonmelee"
}
ACTOR Cyber : CyberDemon replaces CyberDemon
{
	Health 3000
	Mass 2000
	BloodType "BloodDrop"
	SeeSound "cybersight"
	PainSound "cyberpain"
	DeathSound "cyberdeath"
	ActiveSound "cyberactive"
}
ACTOR SpiderMech : Arachnotron replaces Arachnotron
{
	Health 220
	Mass 800
	BloodType "BloodDrop"
	SeeSound "babysight"
	PainSound "babypain"
	DeathSound "babydeath"
	ActiveSound "babyactive"
}
ACTOR SpiderDemon : SpiderMastermind replaces SpiderMastermind
{
	Health 5000
	Mass 5000
	BloodType "BloodDrop"
	SeeSound "spidersight"
	AttackSound "spiderattack"
	PainSound "spiderpain"
	DeathSound "spiderdeath"
	ActiveSound "spideractive"
}
ACTOR Brain : BossBrain replaces BossBrain
{
	Health 500
	Mass 10000000
	BloodType "BloodDrop"
	PainSound "brainpain"
	DeathSound "braindeath"
}

ACTOR RNGChainsaw : Chainsaw 
{
	Weapon.Kickback 0
	Weapon.SelectionOrder 2200
	Weapon.UpSound "weaponssawup"
	Decal "Bullet"
	+WEAPON.MELEEWEAPON
	States
	{
	Ready:
		TNT1 A 0 A_JumpIfInventory ("DblSawUpgrade", 1, "DblReady")
		TNT1 A 0 A_StartSound ("weaponssawidle")
		SAWG C 1 A_WeaponReady
		SAWG CCCDDDD 1 A_WeaponReady
		Loop
	DblReady:
		TNT1 A 0 A_StartSound ("weaponssawidle")
		DSAW C 1 A_WeaponReady
		DSAW CCCDDDD 1 A_WeaponReady
		Loop
	Select:
		TNT1 A 0 A_JumpIfInventory ("DblSawUpgrade", 1, "DblSelect")
		SAWG CCCCDDDD 1 A_Raise (5)
		Loop
	DblSelect:
		DSAW CCCCDDDD 1 A_Raise (5)
		Loop
	Deselect:
		TNT1 A 0 A_JumpIfInventory ("DblSawUpgrade", 1, "DblDeselect")
		SAWG CCCCDDDD 1 A_Lower (5)
		Loop
	DblDeselect:
		DSAW CCCCDDDD 1 A_Lower (5)
		Loop
	Fire:
		TNT1 A 0 A_JumpIfInventory ("DblSawUpgrade", 1, "DblFire")
		TNT1 A 0 A_GunFlash
		TNT1 A 0 A_StartSound ("weaponssawfull", 1, CHANF_LOOPING)
		SAWG AB random(2, 7) A_Saw (None, "weaponssawhit", random(5, 25), "Puff", 0, random(40, 128), frandom(0, 45), 0)
		SAWG A 0 A_ReFire
		SAWG A 0 A_StopSound (1)
		Goto Ready
	DblFire:
		DSAW A 0 A_GunFlash
		DSAW A 0 A_StartSound ("weaponssawfull", 1, CHANF_LOOPING)
		DSAW AB 4 A_Saw (None, "weaponssawhit", random(1, 50), "Puff", 0, 100, 8, 0)
		DSAW A 0 A_ReFire
		DSAW A 0 A_StopSound (1)
		Goto DblReady
	Flash:  
		TNT1 AAAAAAAAAA 1 A_WeaponOffset (random(1, -1), random(33, 31))
		Goto LightDone
	Spawn:
		CSAW A -1
		Stop
	}
}

ACTOR RNGFist : Fist replaces Fist
{
	Weapon.SelectionOrder 3700
	Weapon.SlotNumber 1
	+WEAPON.MELEEWEAPON
	states
	{
	Ready:
		PUNG A 1 A_WeaponReady
		Loop
	Select:
		PUNG A 1 A_Raise (10)
		Loop
	Deselect:
		PUNG A 1 A_Lower (10)
		Loop
	Fire:
		TNT1 A 0 A_JumpIfInventory ("PowerStrength", 1, "Fire.Berserk")
		PUNG B random(1, 4)
		PUNG C random(1, 4)
		PUNG D 0 A_SetAngle (angle+frandom(-90, 90), SPF_INTERPOLATE)
		PUNG D random(2, 6) A_CustomPunch (random(25, 80), true, CPF_NOTURN, "Puff", frandom(64, 80), 0, 0, None, "Punch", "skeletonswing")
		PUNG C random(2, 4)
		PUNG B random(3, 5)
		PUNG A 1 A_ReFire
		Goto Ready
	Fire.Berserk:
		PUNG B random(1, 4)
		PUNG C random(1, 4)
		PUNG D 0 A_SetAngle (angle+frandom(-6, 6), SPF_INTERPOLATE)
		PUNG D random(2, 6) A_CustomPunch (random(80, 250), true, CPF_NOTURN, "Puff", frandom(64, 80), 0, 0, None, "Punch", "skeletonswing")
		PUNG C random(2, 4)
		PUNG B random(3, 5)
		PUNG A 1 A_ReFire
		Goto Ready
	}	
}

ACTOR RNGPistol : Pistol
{
	Weapon.SelectionOrder 1900
	Decal "Bullet"
	Weapon.SlotNumber 2
	Weapon.AmmoUse 1
	Weapon.AmmoType "Clip"
	states
	{
	Ready:
		PISG A 0 A_JumpIfInventory ("PistolUpgrade", 1, "HeavyReady")
		PISG A 0 A_JumpIfInventory("SquibBullets", 1, "SquibReady")
		PISG A 1 A_WeaponReady
		Loop
	HeavyReady:
		DEGL A 1 A_WeaponReady
		Loop
	SquibReady:
		PISG A 1 A_WeaponReady
		Loop
	Select:
		PISG A 0 A_JumpIfInventory ("PistolUpgrade", 1, "HeavySelect")
		PISG A 1 A_Raise (8)
		Loop
	HeavySelect:
		DEGL A 1 A_Raise (8)
		Loop
	Deselect:
		PISG A 0 A_JumpIfInventory ("PistolUpgrade", 1, "HeavyDeselect")
		PISG A 1 A_Lower (8)
		Loop
	HeavyDeselect:
		DEGL A 1 A_Lower (8)
		Loop
	Fire:
		PISG A 0 A_JumpIfInventory ("PistolUpgrade", 1, "HeavyFire")
		PISG A 0 A_JumpIfInventory("SquibBullets" ,1, "SquibFire")
		PISG A 0 A_Jump(ACS_NamedExecuteWithResult("MalfunctionChance", 0), "SquibLoad")
		PISG A 0 A_GunFlash
		PISG A 0 A_StartSound ("Pistol", 1)
		PISG A 0 A_FireBullets (frandom(3, 11), 0, -1, random(1, 50), "Puff", 1|FBF_PUFFTRACER, random(1, 2048), "Tracer", -4, 0)
		PISG B 1
		PISG C 3
		PISG D 4
		PISG B 5
		PISG A 1
		Goto Ready
	HeavyFire:
		DEGL B 0 A_GunFlash
		DEGL B 0 A_StartSound ("Deagle", 1, CHANF_OVERLAP)
		DEGL B 0 A_FireBullets (frandom(2, 7), 0, -1, random(1, 115), "Puff", 1|FBF_PUFFTRACER, random(1, 2048), "Tracer", -3, 0)
		DEGL B 1
		DEGL C 5
		DEGL D 6
		DEGL A 5
		Goto HeavyReady
	SquibLoad:
		PISG A 0 A_GiveInventory ("SquibBullets", 1)
		PISG A 0 A_StartSound ("PistolSquib", 1)
		PISG B 1
		PISG C 3
		PISG B 5
		PISG A 2
		Goto SquibReady
	SquibFire:
		PISG A 0 A_GunFlash
		PISG A 0 A_StartSound ("PistolExplode", 1, CHANF_OVERLAP)
		PISG A 0 A_StartSound ("PistolExplode2", 1, CHANF_OVERLAP)
		PISG A 0 A_DamageSelf (random(0, 10))
		PISG A 0 A_TakeInventory ("SquibBullets", 1)
		PISG A 0 A_FireBullets (180, 180, 20, 150, "Puff", 1|FBF_PUFFTRACER, random(1, 1024), "Tracer", -3, 0)
		PISG G 1
		PISG H 3
		PISG I 4
		PISG G 8
		PISG F 11
		TNT1 A 0 A_JumpIf (GetCVar("developer")==0, 2)
		TNT1 A 0 A_JumpIf (GetCVar("developer")==1, 7)
		PISG F 6 A_WeaponOffset (13, 32)
		PISG E 26
		PISG E 10 A_WeaponOffset(-20, 32)
		PISG J 26 A_StartSound("skeletonswing")
		PISG J 10 A_WeaponOffset (-3, 32)
		PISG J 0 A_JumpIfInventory ("PistolUpgrade", 1, 2)
		PISG J 0 A_TakeInventory ("RNGPistol", 1)
		PISG J 1
		Goto Ready
	Flash:
		TNT1 A 0 A_JumpIfInventory("PistolUpgrade", 1, "Flash3")
		TNT1 A 0 A_JumpIfInventory("SquibBullets" ,1, "Flash2")
		TNT1 A 0 A_JumpIf(CallACS("Recoil")==true, "PistolRecoil")
		PISF A 1 Bright A_Light1
		Goto LightDone
	Flash3:
		TNT1 A 0 A_JumpIf(CallACS("Recoil")==true, "DeagleRecoil")
		DEGF A 0 A_Jump (128, 3)
		DEGF A 1 Bright A_Light (3)
		TNT1 A 0 A_Jump (256, 2)
		DEGF B 1 Bright A_Light (3)
		TNT1 A 0
		Goto LightDone
	DGLFlash:
		TNT1 A 0 A_Jump (128, 3)
		DEGF A 1 Bright A_Light(3)
		TNT1 A 0 A_Jump (256, 2)
		DEGF B 1 Bright A_Light(3)
		TNT1 A 1
		Goto LightDone
	DeagleRecoil:
		DEGF B 0 A_Overlay (2, "DGLFlash")
		TNT1 A 1 A_SetViewPitch (pitch-5)
		TNT1 A 0 A_Light0
		TNT1 AA 1 A_SetPitch (pitch+1)
		TNT1 AA 1 A_SetPitch (pitch+0.5)
		TNT1 AAAA 1 A_SetPitch (pitch+0.25)
		TNT1 AAAAAAAA 1 A_SetPitch (pitch+0.125)
		TNT1 A 0 A_SetViewPitch (0)
		TNT1 A 1 A_SetPitch (0)
		Goto LightDone
	PistolRecoil:
		PISF A 0 Bright A_Light1
		PISF A 1 A_SetViewPitch (pitch-2)
		TNT1 A 0 A_Light0
		TNT1 AA 1 A_SetPitch (pitch+0.5)
		TNT1 AAAA 1 A_SetPitch (pitch+0.25)
		TNT1 A 0 A_SetViewPitch (0)
		TNT1 A 1 A_SetPitch (0)
		Goto LightDone
	Flash2:
		PISF A 1 A_QuakeEx (9, 9, 9, 18, 0, 64, None, QF_SCALEDOWN, 0, 0, 0, 0, 0, 9)
		PISF A 1 Bright A_Light1
		Goto LightDone
	Spawn:
		PIST A -1
		Stop
	}
}

ACTOR RNGShotgun : Shotgun
{
	Weapon.SelectionOrder 1300
	Weapon.SlotNumber 3
	Decal "Bullet"
	Weapon.AmmoUse 1
	Weapon.AmmoType "Shell"
	States
	{
	Ready:
		SHTG A 0 A_JumpIfInventory("AutoUpgrade", 1, "AutoReady")
		SHTG A 0 A_JumpIfInventory("SquibShells", 1, "SquibReady")
		SHTG A 1 A_WeaponReady
		Loop
	SquibReady:
		SHTG A 1 A_WeaponReady
		Loop
	AutoReady:
		ASTG A 1 A_WeaponReady
		Loop
	Select:
		SHTG A 0 A_JumpIfInventory("AutoUpgrade", 1, "AutoSelect")
		SHTG A 1 A_Raise (7)
		Loop
	AutoSelect:
		ASTG A 1 A_Raise (7)
		Loop
	Deselect:
		SHTG A 0 A_JumpIfInventory("AutoUpgrade", 1, "AutoDeselect")
		SHTG A 1 A_Lower (7)
		Loop
	AutoDeselect:
		ASTG A 1 A_Lower (7)
		Loop
	Fire:
		SHTG A 0 A_JumpIfInventory("AutoUpgrade", 1, "AutoFire")
		SHTG A 0 A_JumpIfInventory("SquibShells", 1, "SquibFire")
		SHTG A 0 A_Jump(ACS_NamedExecuteWithResult("MalfunctionChance",0), "SquibLoad")
		SHTG A 0 A_GunFlash
		SHTG A 0 A_StartSound ("Shotgun", 1, CHANF_OVERLAP)
		SHTG A 0 A_FireBullets (frandom(5, 12), 0, random(2, 7), random(1, 50), "Puff", 1|FBF_PUFFTRACER, random(1, 2048), "Tracer", -5, 0)
		SHTG C 3
		SHTG B 4
		SHTG A 1
		SHTG D 0 A_CheckReload
		SHTG D random (3, 9)
		SHTG E random (2, 8)
		SHTG F random (1, 7) A_StartSound ("Re-", 1, CHANF_OVERLAP)
		SHTG E random (2, 8) A_StartSound ("-load", 1, CHANF_OVERLAP)
		SHTG D 5
		SHTG A 3
		SHTG A 3 A_ReFire
		Goto Ready
	AutoFire:
		ASTG A 0 A_GunFlash
		ASTG A 0 A_StartSound ("Shotgun", 1, CHANF_OVERLAP)
		ASTG A 0 A_FireBullets (frandom(5, 12), 0, random(2, 10), random(1, 25), "Puff", 1|FBF_PUFFTRACER, random(1, 2048), "Tracer", -5, 0)
		ASTG A 1 A_WeaponOffset (0, 40)
		ASTG A 1 A_WeaponOffset (0, 38)
		ASTG A 1 A_WeaponOffset (0, 36)
		ASTG A 1 A_WeaponOffset (0, 35)
		ASTG A 1 A_WeaponOffset (0, 34)
		ASTG A 1 A_WeaponOffset (0, 33)
		ASTG A 1 A_WeaponOffset (0, 32)
		ASTG A 3
		ASTG A 1 A_ReFire
		Goto AutoReady
	SquibFire:
		SHI2 A 0 A_GunFlash
		SHI2 A 0 A_TakeInventory ("SquibShells", 1)
		SHI2 A 0 A_FireBullets (180, 180, 50, 100, "Puff", 1|FBF_PUFFTRACER, random(1, 1024), "Tracer", -5, 0)
		SHI2 A 0 A_StartSound ("ShotExplode")
		SHI2 A 0 A_DamageSelf (random(0, 50))
		SHI2 ABCDEFGHIJKLM 1 Bright
		TNT1 A 17
		SHIT A 1
		SHIT A 0 A_TakeInventory ("RNGShotgun", 1)
		Goto Ready
	SquibLoad:
		TNT1 A 0 A_GiveInventory ("SquibShells", 1)
		SHTG A 0 A_StartSound ("ShotSquib", 1)
		SHTG C 3
		SHTG B 4
		SHTG A 1
		Goto SquibReady
	Flash:
		SHTF A 0 A_JumpIfInventory("SquibShells", 1, "Flash2")
		SHTF A 0 A_JumpIf(CallACS("Recoil")==true, "FlashRecoil")
		TNT1 A 0 A_Jump (128, 3)
		SHTF A 1 Bright A_Light2
		TNT1 A 0 A_Jump (256, 2)
		SHTF B 1 Bright A_Light2
		TNT1 A 0
		Goto LightDone
	FlashRecoil:
		TNT1 A 0 A_Jump (128, 4)
		SHTF A 0 A_SetPitch (0)
		SHTF A 1 Bright A_Light2
		TNT1 A 0 A_Jump (256, 3)
		SHTF B 0 A_SetPitch (0)
		SHTF B 1 Bright A_Light2
		TNT1 A 0 A_SetPitch (pitch-2)
		TNT1 A 1 A_SetPitch (pitch+0.25)
		TNT1 A 0 A_Light0
		TNT1 A 1 A_SetPitch (pitch+0.25)
		TNT1 AAAAAAAA 1 A_SetPitch (pitch+0.125)
		TNT1 AAAAAAAA 1 A_SetPitch (pitch+0.0625)
		TNT1 A 1 A_SetPitch (0)
		Goto LightDone
	Flash2:
		TNT1 A 0 A_SetViewAngle (frandom(12, -12))
		TNT1 A 0 A_SetPitch (frandom(0, 3))
		SHIT B 1 A_Light1
		TNT1 A 0 A_Light0
		TNT1 A 0 A_SetViewAngle (frandom(12, -8))
		SHIT B 1 A_SetPitch (frandom(0, 2.5))
		TNT1 A 0 A_SetViewAngle (frandom(8, -8))
		SHIT A 1 A_SetPitch (frandom(0, 2))
		TNT1 A 0 A_SetViewAngle (frandom(8, -4))
		SHIT A 1 A_SetPitch (frandom(0, 1.5))
		TNT1 A 0 A_SetViewAngle (frandom(4, -4))
		SHIT A 1 A_SetPitch (frandom(0, 1))
		TNT1 A 0 A_SetViewAngle (frandom(4, 0))
		SHIT A 1 A_SetPitch (frandom(0, 0.5))
		TNT1 A 0 A_SetViewAngle (0)
		SHIT A 1 A_SetPitch (0)
		SHIT A 24
		SHIT A 1 A_TakeInventory ("RNGShotgun", 1)
		Goto LightDone
	Flash2Recoil:
		TNT1 A 1 A_SetPitch (0)
		TNT1 A 1 A_SetPitch (pitch-2)
		TNT1 A 1 A_SetPitch (pitch+0.25)
		TNT1 A 1 A_SetPitch (pitch+0.25)
		TNT1 AAAAAAAA 1 A_SetPitch (pitch+0.125)
		TNT1 AAAAAAAA 1 A_SetPitch (pitch+0.0625)
		TNT1 A 1 A_SetPitch (0)
		Goto LightDone
	Spawn:
		TNT1 A -1
		Stop
	/*I don't know what's causing the Aim state
	to have the spawn icon appear at the top-left, so
	I replaced it with the TNT1 sprite.*/
	}
}

ACTOR RNGSShotgun : SuperShotgun //This might be the longest code for this weapon
{
	Weapon.SelectionOrder 400
	Weapon.SlotNumber 3
	Decal "Bullet"
	Weapon.AmmoType "Shell"
	States
	{
	Ready:
		TNT1 A 0 A_JumpIfInventory ("QuadUpgrade", 1, "QuadReady")
		SHT2 A 1 A_WeaponReady
		Loop
	CursedReady:
		SHT2 A 1 A_WeaponReady
		Loop
	QuadReady:
		QSSG A 1 A_WeaponReady
		Loop
	QuadCursedReady:
		QSSG A 1 A_WeaponReady
		Loop
	Select:
		TNT1 A 0 A_JumpIfInventory ("QuadUpgrade", 1, "QuadSelect")
		SHT2 A 1 A_Raise
		Loop
	QuadSelect:
		QSSG A 1 A_Raise
		Loop
	Deselect:
		TNT1 A 0 A_JumpIfInventory ("QuadUpgrade", 1, "QuadDeselect")
		SHT2 A 1 A_Lower
		Loop
	QuadDeselect:
		QSSG A 1 A_Lower
		Loop
	Fire:
		TNT1 A 0 A_JumpIfInventory ("QuadUpgrade", 1, "QuadFire")
		TNT1 A 0 A_JumpIfInventory ("NailShells", 1, "FlechetteFire")
		TNT1 A 0 A_JumpIf(CallACS("Always50BMGAmmo")==true, "CursedFire")
		TNT1 A 0 A_JumpIfInventory ("PowerSSG", 1, "CursedFire")
		SHT2 A 0 A_GunFlash
		SHT2 A 0 A_StartSound ("SShotgun", 1, Chanf_Overlap)
		SHT2 A 0 A_FireBullets (random(4, 20), random(2, 10), random(2, 20), random(5, 50), "Puff", 1|FBF_PUFFTRACER, random(1, 4096), "Tracer", -5, 0) 
		SHT2 A 1 A_WeaponOffset (0, 38)
		SHT2 A 1 A_WeaponOffset (0, 37)
		SHT2 A 1 A_WeaponOffset (0, 36)
		SHT2 A 1 A_WeaponOffset (0, 35)
		SHT2 A 2 A_WeaponOffset (0, 34)
		SHT2 A 2 A_WeaponOffset (0, 33)
		SHT2 A 2 A_WeaponOffset (0, 32)
		SHT2 B 0 A_CheckReload
		TNT1 A 0 A_JumpIf(CallACS("Always50BMGAmmo")==true, "CursedFastReload")
		TNT1 A 0 A_Jump (32, "FlechetteReload")
		TNT1 A 0 A_Jump (32, "CursedReload")
		SHT2 BC random(2, 4)
		SHT2 D random(3, 5)
		SHT2 E random(5, 9) A_StartSound ("SgRl1", 1, Chanf_Overlap)
		SHT2 F random(4, 7)
		SHT2 G random(3, 11) 
		SHT2 H random(5, 7) A_StartSound ("SgRl2", 1, Chanf_Overlap)
		SHT2 I random(3, 5)
		SHT2 J random(5, 10) A_StartSound ("SgRl3", 1, Chanf_Overlap)
		SHT2 A 2
		SHT2 A 2 A_ReFire
		Goto Ready
	QuadFire:
		TNT1 A 0 A_JumpIf(CallACS("Always50BMGAmmo")==true, "QuadCursedFire")
		TNT1 A 0 A_JumpIfInventory ("PowerSSG", 1, "QuadCursedFire")
		QSSG A 0 A_GunFlash ("QuadFlash")
		QSSG A 0 A_StartSound ("QuadShotgun", 1, Chanf_Overlap)
		QSSG A 0 A_TakeInventory ("Shell", 4)
		QSSG A 0 A_FireBullets (random(4, 20), random(2, 10), random(1, 10)*4, random(5, 50), "Puff", 0|FBF_PUFFTRACER, random(1, 4096), "Tracer", -4, 0) 
		QSSG A 0 A_Recoil (10)
		QSSG A 1 A_WeaponOffset (0, 38)
		QSSG A 1 A_WeaponOffset (0, 37)
		QSSG A 1 A_WeaponOffset (0, 36)
		QSSG A 1 A_WeaponOffset (0, 35)
		QSSG A 2 A_WeaponOffset (0, 34)
		QSSG A 2 A_WeaponOffset (0, 33)
		QSSG A 2 A_WeaponOffset (0, 32)
		QSSG B 0 A_CheckReload
		TNT1 A 0 A_JumpIf(CallACS("Always50BMGAmmo")==true, "QuadCursedFastReload")
		TNT1 A 0 A_Jump (32, "QuadCursedReload")
		QSSG B random(2, 4)
		QSSG CD random(3, 5)
		QSSG E random(5, 9) A_StartSound ("SgRl1", 1, Chanf_Overlap)
		QSSG F random(4, 7)
		QSSG G random(3, 11) A_StartSound ("SgRl2", 1, Chanf_Overlap)
		QSSG H random(5, 7)
		QSSG I random(3, 5)
		QSSG J random(5, 10) A_StartSound ("SgRl3", 1, Chanf_Overlap)
		QSSG A 2
		QSSG A 2 A_ReFire
		Goto Ready
	QuadCursedFire:
		QSSG A 0 A_GunFlash ("QuadFlash")
		QSSG A 0 A_StartSound ("QuadBMGShotgun", 1, Chanf_Overlap)
		TNT1 A 0 A_JumpIf(CallACS("Always50BMGAmmo")==true, 6)
		QSSG A 0 A_FireBullets (3, -1, -1, random(50, 200), "Puff", 0|FBF_PUFFTRACER, 4096, "Tracer", -4, 0)
		QSSG A 0 A_FireBullets (3, -1, -1, random(50, 200), "Puff", 0|FBF_PUFFTRACER, 4096, "Tracer", -4, 0)
		QSSG A 0 A_FireBullets (3, -1, -1, random(50, 200), "Puff", 0|FBF_PUFFTRACER, 4096, "Tracer", -4, 0)
		QSSG A 0 A_FireBullets (3, -1, -1, random(50, 200), "Puff", 0|FBF_PUFFTRACER, 4096, "Tracer", -4, 0)
		TNT1 A 0 A_Jump (256, 5)
		QSSG A 0 A_FireBullets (3, -1, -1, random(50, 200), "Puff", 1|FBF_PUFFTRACER, 4096, "Tracer", -4, 0)
		QSSG A 0 A_FireBullets (3, -1, -1, random(50, 200), "Puff", 0|FBF_PUFFTRACER, 4096, "Tracer", -4, 0)
		QSSG A 0 A_FireBullets (3, -1, -1, random(50, 200), "Puff", 0|FBF_PUFFTRACER, 4096, "Tracer", -4, 0)
		QSSG A 0 A_FireBullets (3, -1, -1, random(50, 200), "Puff", 1|FBF_PUFFTRACER, 4096, "Tracer", -4, 0)
		QSSG A 0 A_Recoil(40)
		QSSG A 0 A_Recoil(40)
		QSSG A 0 A_Recoil(40)
		QSSG A 0 A_Recoil(40)
		QSSG A 0 A_QuakeEx (9, 9, 2, 12, 0, 64, None, QF_SCALEDOWN)
		QSSG A 1 A_WeaponOffset (0, 38)
		QSSG A 1 A_WeaponOffset (0, 37)
		QSSG A 1 A_WeaponOffset (0, 36)
		QSSG A 1 A_WeaponOffset (0, 35)
		QSSG A 1 A_WeaponOffset (0, 34)
		QSSG A 1 A_WeaponOffset (0, 33)
		QSSG A 1 A_WeaponOffset (0, 32)
		QSSG B 0 A_CheckReload
		TNT1 A 0 A_JumpIf(CallACS("Always50BMGAmmo")==true, "QuadCursedFastReload")
		TNT1 A 0 A_TakeInventory ("PowerSSG", 1)
		QSSG B random(2, 4)
		QSSG CD random(3, 5)
		QSSG E random(5, 9) A_StartSound ("SgRl1", 1, Chanf_Overlap)
		QSSG F random(4, 7)
		QSSG G random(3, 11) A_StartSound ("SgRl2", 1, Chanf_Overlap)
		QSSG H random(5, 7)
		QSSG I random(3, 5)
		QSSG J random(5, 10) A_StartSound ("SgRl3", 1, Chanf_Overlap)
		QSSG A 2
		QSSG A 2 A_ReFire
		Goto QuadReady
	QuadCursedReload:
		TNT1 A 0 A_JumpIfInventory("First50BMGUse", 1, "QuadCursedFastReload")
		QSSG B random(2, 4)
		QSSG CD random(3, 5)
		QSSG E random(5, 9) A_StartSound ("SgRl1", 1, Chanf_Overlap)
		QSSG K 25
		SHT2 L 36
		SHT2 L 1 A_WeaponOffset (0, 30)
		SHT2 L 1 A_WeaponOffset (0, 28)
		SHT2 L 1 A_WeaponOffset (0, 30)
		SHT2 L 8 A_WeaponOffset (0, 32)
		QSSG K 18
		TNT1 A 0 A_GiveInventory ("PowerSSG", 1)
		QSSG G random(3, 11) A_StartSound ("SgRl2", 1, Chanf_Overlap)
		QSSG H random(5, 7)
		QSSG I random(3, 5)
		QSSG J random(5, 10) A_StartSound ("SgRl3", 1, Chanf_Overlap)
		TNT1 A 0 A_GiveInventory ("First50BMGUse", 1)
		QSSG A 2
		QSSG A 2 A_ReFire
		Goto QuadCursedReady
	QuadCursedFastReload:
		QSSG B random(2, 4)
		QSSG CD random(3, 5)
		QSSG E random(5, 9) A_StartSound ("SgRl1", 1, Chanf_Overlap)
		TNT1 A 0 A_GiveInventory ("PowerSSG", 1)
		QSSG K random(4, 7)
		QSSG G random(3, 11) A_StartSound ("SgRl2", 1, Chanf_Overlap)
		QSSG H random(5, 7)
		QSSG I random(3, 5)
		QSSG J random(5, 10) A_StartSound ("SgRl3", 1, Chanf_Overlap)
		QSSG A 2
		QSSG A 2 A_ReFire
		Goto QuadCursedReady
	FlechetteReload:
		SHT2 B random(2, 4)
		SHT2 CD random(3, 5)
		SHT2 E random(5, 9) A_StartSound ("SgRl1", 1, Chanf_Overlap)
		SHT2 Q random(4, 7)
		TNT1 A 0 A_GiveInventory ("NailShells", 1)
		SHT2 G random(3, 11) A_StartSound ("SgRl2", 1, Chanf_Overlap)
		SHT2 H random(5, 7)
		SHT2 I random(3, 5)
		SHT2 J random(5, 10) A_StartSound ("SgRl3", 1, Chanf_Overlap)
		SHT2 A 2
		SHT2 A 2 A_ReFire
		Goto Ready
	FlechetteFire:
		SHT2 A 0 A_TakeInventory ("NailShells", 1)
		SHT2 A 0 A_GunFlash
		SHT2 A 0 A_StartSound ("SShotgun", 1, Chanf_Overlap)
		SHT2 A 0 A_TakeInventory ("Shell", 2)
		SHT2 AAAAAAAAAA 0 A_FireProjectile ("NailFlechette", frandom(-4, 4), false, 4, -2, 0, frandom(-2, 2))
		SHT2 AAAAAAAAAA 0 A_FireProjectile ("NailFlechette", frandom(-4, 4), false, -4, -2, 0, frandom(-2, 2)) 
		SHT2 A 1 A_WeaponOffset (0, 38)
		SHT2 A 1 A_WeaponOffset (0, 37)
		SHT2 A 1 A_WeaponOffset (0, 36)
		SHT2 A 1 A_WeaponOffset (0, 35)
		SHT2 A 2 A_WeaponOffset (0, 34)
		SHT2 A 2 A_WeaponOffset (0, 33)
		SHT2 A 2 A_WeaponOffset (0, 32)
		SHT2 B 0 A_CheckReload
		TNT1 A 0 A_JumpIf(CallACS("Always50BMGAmmo")==true, "CursedFastReload")
		TNT1 A 0 A_Jump (32, "CursedReload")
		SHT2 B random(2, 4)
		SHT2 CD random(3, 5)
		SHT2 E random(5, 9) A_StartSound ("SgRl1", 1, Chanf_Overlap)
		SHT2 F random(4, 7)
		SHT2 G random(3, 11) A_StartSound ("SgRl2", 1, Chanf_Overlap)
		SHT2 H random(5, 7)
		SHT2 I random(3, 5)
		SHT2 J random(5, 10) A_StartSound ("SgRl3", 1, Chanf_Overlap)
		SHT2 A 2
		SHT2 A 2 A_ReFire
		Goto Ready
	CursedFire:
		SHT2 A 0 A_GunFlash
		SHT2 A 0 A_StartSound ("SSHotgun", 1, Chanf_Overlap)
		TNT1 A 0 A_JumpIf(CallACS("Always50BMGAmmo")==true, 4)
		SHT2 A 0 A_FireBullets (3, -1, -1, random(50, 200), "Puff", 0|FBF_PUFFTRACER, 4096, "Tracer", -4, 0)
		SHT2 A 0 A_FireBullets (3, -1, -1, random(50, 200), "Puff", 0|FBF_PUFFTRACER, 4096, "Tracer", -4, 0)
		TNT1 A 0 A_Jump (256, 4)
		TNT1 A 0 A_TakeInventory ("Shells", 2)
		SHT2 A 0 A_FireBullets (3, -1, -1, random(50, 200), "Puff", 0|FBF_PUFFTRACER, 4096, "Tracer", -4, 0)
		SHT2 A 0 A_FireBullets (3, -1, -1, random(50, 200), "Puff", 1|FBF_PUFFTRACER, 4096, "Tracer", -4, 0)
		SHT2 A 0 A_Recoil(40)
		SHT2 A 0 A_QuakeEx (9, 9, 2, 12, 0, 64, None, QF_SCALEDOWN)
		SHT2 A 1 A_WeaponOffset (0, 38)
		SHT2 A 1 A_WeaponOffset (0, 37)
		SHT2 A 1 A_WeaponOffset (0, 36)
		SHT2 A 1 A_WeaponOffset (0, 35)
		SHT2 A 1 A_WeaponOffset (0, 34)
		SHT2 A 1 A_WeaponOffset (0, 33)
		SHT2 A 1 A_WeaponOffset (0, 32)
		SHT2 B 0 A_CheckReload
		TNT1 A 0 A_JumpIf(CallACS("Always50BMGAmmo")==true, "CursedFastReload")
		TNT1 A 0 A_TakeInventory ("PowerSSG", 1)
		SHT2 B random(2, 4)
		SHT2 CD random(3, 5)
		SHT2 E random(5, 9) A_StartSound ("SgRl1", 1, Chanf_Overlap)
		SHT2 F random(4, 7)
		SHT2 G random(3, 11) A_StartSound ("SgRl2", 1, Chanf_Overlap)
		SHT2 H random(5, 7)
		SHT2 I random(3, 5)
		SHT2 J random(5, 10) A_StartSound ("SgRl3", 1, Chanf_Overlap)
		SHT2 A 2
		SHT2 A 2 A_ReFire
		Goto Ready
	CursedReload:
		TNT1 A 0 A_JumpIfInventory("First50BMGUse", 1, "CursedFastReload")
		SHT2 B random(2, 4)
		SHT2 CD random(3, 5)
		SHT2 E random(5, 9) A_StartSound ("SgRl1", 1, Chanf_Overlap)
		SHT2 K 25
		SHT2 L 36
		SHT2 L 1 A_WeaponOffset (0, 30)
		SHT2 L 1 A_WeaponOffset (0, 28)
		SHT2 L 1 A_WeaponOffset (0, 30)
		SHT2 L 8 A_WeaponOffset (0, 32)
		SHT2 K 18
		TNT1 A 0 A_GiveInventory ("PowerSSG", 1)
		SHT2 G random(3, 11) A_StartSound ("SgRl2", 1, Chanf_Overlap)
		SHT2 H random(5, 7)
		SHT2 I random(3, 5)
		SHT2 J random(5, 10) A_StartSound ("SgRl3", 1, Chanf_Overlap)
		TNT1 A 0 A_GiveInventory ("First50BMGUse", 1)
		SHT2 A 2
		SHT2 A 2 A_ReFire
		Goto CursedReady
	CursedFastReload:
		SHT2 B random(2, 4)
		SHT2 CD random(3, 5)
		SHT2 E random(5, 9) A_StartSound ("SgRl1", 1, Chanf_Overlap)
		TNT1 A 0 A_GiveInventory ("PowerSSG", 1)
		SHT2 K random(4, 7)
		SHT2 G random(3, 11) A_StartSound ("SgRl2", 1, Chanf_Overlap)
		SHT2 H random(5, 7)
		SHT2 I random(3, 5)
		SHT2 J random(5, 10) A_StartSound ("SgRl3", 1, Chanf_Overlap)
		SHT2 A 2
		SHT2 A 2 A_ReFire
		Goto CursedReady
	Flash:
		TNT1 A 0 A_JumpIf(CallACS("Always50BMGAmmo")==true, "BMGFlash")
		TNT1 A 0 A_JumpIfInventory("PowerSSG", 1,  "BMGFlash")
		TNT1 A 0 A_JumpIf(CallACS("Recoil")==true, "FlashRecoil")
		TNT1 A 0 A_Jump (128, 4)
		SH2F A 0 Bright A_Light2
		SH2F A 1 Bright A_WeaponOffset (0, 32)
		TNT1 A 0 A_Jump (256, 3)
		SH2F B 0 Bright A_Light2
		SH2F B 1 Bright A_WeaponOffset (0, 32)
		TNT1 A 0
		Goto LightDone
	BMGFlash:
		TNT1 A 0 A_Jump (128, 3)
		SH2F A 1 Bright A_Light (4)
		TNT1 A 0 A_Jump (256, 2)
		SH2F B 1 Bright A_Light (4)
		TNT1 A 0 A_SetPitch (pitch-8)
		TNT1 A 1 A_SetPitch (pitch+1)
		TNT1 A 0 A_Light0
		TNT1 A 1 A_SetPitch (pitch+1)
		TNT1 AAAAAAAA 1 A_SetPitch (pitch+0.5)
		TNT1 AAAAAAAA 1 A_SetPitch (pitch+0.25)
		TNT1 A 1 A_SetPitch (0)
		Goto LightDone
	QuadFlash:
		TNT1 A 0 A_JumpIf(CallACS("Recoil")==true, "QuadFlashRecoil")
		QSSF A 1 Bright A_Light (4)
		Goto LightDone
	QuadFlashRecoil:
		TNT1 A 0 A_JumpIf(CallACS("Always50BMGAmmo")==true, "QuadBMGFlashRecoil")
		TNT1 A 0 A_JumpIfInventory("PowerSSG", 1,  "QuadBMGFlashRecoil")
		QSSF A 1 Bright A_Light (4)
		TNT1 A 0 A_Light0
		TNT1 A 1 A_SetPitch (pitch-8)
		TNT1 A 1 A_SetPitch (pitch+1)
		TNT1 A 1 A_SetPitch (pitch+1)
		TNT1 AAAAAAAA 1 A_SetPitch (pitch+0.5)
		TNT1 AAAAAAAA 1 A_SetPitch (pitch+0.25)
		TNT1 A 1 A_SetPitch (0)
		Goto LightDone
	QuadBMGFlashRecoil:
		QSSF A 1 Bright A_Light (4)
		TNT1 A 0 A_Light0
		TNT1 A 1 A_SetPitch (pitch-16)
		TNT1 A 1 A_SetPitch (pitch+4)
		TNT1 A 1 A_SetPitch (pitch+2)
		TNT1 AA 1 A_SetPitch (pitch+1)
		TNT1 AAAAAAAA 1 A_SetPitch (pitch+0.5)
		TNT1 AAAAAAAA 1 A_SetPitch (pitch+0.25)
		TNT1 AAAAAAAAAAAAAAAA 1 A_SetPitch (pitch+0.125)
		TNT1 A 1 A_SetPitch (0)
		Goto LightDone
	FlashRecoil:
		TNT1 A 0 A_Jump (128, 4)
		SH2F A 0 Bright A_Light2
		SH2F A 1 Bright A_WeaponOffset (0, 32)
		TNT1 A 0 A_Jump (256, 3)
		SH2F B 0 Bright A_Light2
		SH2F B 1 Bright A_WeaponOffset (0, 32)
		TNT1 A 0 A_SetPitch (pitch-5)
		TNT1 A 1 A_SetPitch (pitch+0.5)
		TNT1 A 0 A_Light0
		TNT1 AAA 1 A_SetPitch (pitch+0.5)
		TNT1 AAAAAAAA 1 A_SetPitch (pitch+0.25)
		TNT1 AAAAAAAA 1 A_SetPitch (pitch+0.125)
		TNT1 A 1 A_SetPitch (0)
		Goto LightDone
	}
}

ACTOR RNGChaingun : Chaingun 
{
	Weapon.SelectionOrder 700
	Weapon.SlotNumber 4
	Decal "Bullet"
	Weapon.AmmoUse 1
	Weapon.AmmoType "Clip"
	States
	{
	Ready:
		CHGG A 0 A_CheckReload
		CHGG A 0 A_SetInventory ("Bursts", 0)
		CHGG A 0 A_JumpIfInventory ("HeavyUpgrade", 1, "HeavyReady")
		CHGG A 1 A_WeaponReady
		Loop
	HeavyReady:
		MNGN A 0 A_WeaponOffset (0, 32)
		MNGN A 1 A_WeaponReady
		Loop
	HeavyDeselect:
		MNGN A 0 A_StopSound (0)
		MNGN A 1 A_Lower
		Loop
	HeavySelect:
		MNGN A 1 A_Raise
		Loop
	Deselect:
		CHGG A 0 A_JumpIfInventory ("HeavyUpgrade", 1, "HeavyDeselect")
		CHGG A 1 A_Lower
		Loop
	Select:
		CHGG A 0 A_JumpIfInventory ("HeavyUpgrade", 1, "HeavySelect")
		CHGG A 1 A_Raise
		Loop
	Fire:
		TNT1 A 0 A_JumpIfInventory ("HeavyUpgrade", 1, "HeavySpin")
		TNT1 A 0 A_Jump (ACS_NamedExecuteWithResult("MalfunctionChance", 0), "BurstFire")
		CHGG A 0 A_GunFlash
		CHGG A 0 A_StartSound ("Pistol2")
		CHGG A 0 A_FireBullets (frandom(0, 14), -1, -1, random(1, 40), "Puff", 1|FBF_PUFFTRACER, random(1, 2048), "Tracer", -5, 0)
		CHGG A random(1, 2)
		CHGG B random(1, 2)
		CHGG C random(1, 2)
		CHGG D random(1, 2)
		CHGG A random(1, 2) A_ReFire
		Goto Ready
	HeavySpin:
		MNGN A 0 A_StartSound ("SpinUp", 1)
		/*MNGN A 10
		MNGN B 8
		MNGN C 6
		MNGN D 4
		MNGN A 2
		MNGN C 1*/
		MNGN A 7
		MNGN B 6
		MNGN C 5
		MNGN D 4
		MNGN A 3
		MNGN B 2
		MNGN C 1
		MNGN D 1
		MNGN ACA 1
		Goto HeavyFire
	Release:
		MNGN A 0 A_WeaponOffset (0, 32)
		MNGN A 0 A_StartSound ("SpinDown", 1)
		MNGN AC 1
		MNGN A 2
		MNGN B 3
		MNGN C 4
		MNGN D 5
		MNGN A 6
		MNGN B 7
		MNGN C 8
		MNGN D 9
		Goto HeavyReady
	HeavyFire:
		MNGN A 0 A_JumpIfNoAmmo ("Release")
		MNGN A 0 A_GunFlash
		MNGN A 0 A_QuakeEx (9, 5, 0, 3, 0, 64, None, QF_SCALEDOWN|QF_RELATIVE, 0, 0, 0, 0, 0, 5)
		MNGN A 0 A_WeaponOffset (random(-2, 2), random(30, 34))
		MNGN A 0 A_StartSound ("SpinLoop", 0, CHANF_LOOPING)
		MNGN A 0 A_StartSound ("Minigun", 0, CHANF_LOOPING|CHANF_OVERLAP, 0.5)
		MNGN A 0 A_FireBullets (frandom(2, 12), random(2, 8), -1, random(4, 25), "Puff", 1|FBF_PUFFTRACER, 4096, "Tracer", -5, 0)
		//MNGN A 0 A_FireBullets (6, 0, -1, random(25, 75), "Puff", 1, 4096)
		//MNGN A 0 A_Recoil (5)
		/*MNGN A 1
		MNGN B 1 A_WeaponOffset(0, 38) //I originally wanted to implement another
		MNGN B 1 A_WeaponOffset(0, 37) //sniper rifle-like weapon, but I thought
		MNGN C 1 A_WeaponOffset(0, 36) //that 1 is enough, so I coded it to work like
		MNGN C 1 A_WeaponOffset(0, 35) //those miniguns for ex.: Brutal Doom.
		MNGN D 1 A_WeaponOffset(0, 34)
		MNGN D 1 A_WeaponOffset(0, 33)
		MNGN A 0 A_WeaponOffset(0, 32)*/
		MNGN A 1
		MNGN C 1
		MNGN A 1 A_ReFire ("HeavyFire")
		MNGN A 0 A_StopSound(0)
		Goto Release
	BurstFire:
		CHGG A 0 A_JumpIfInventory("Bursts", 10, "Ready")
		CHGG A 0 A_GiveInventory ("Bursts", 1)
		CHGG A 0 A_GunFlash ("BurstFlash")
		CHGG A 0 A_StartSound ("Pistol2")
		CHGG A 0 A_SetPitch (pitch+random(-10, 10), SPF_INTERPOLATE)
		CHGG A 0 A_SetAngle (angle+random(-10, 10), SPF_INTERPOLATE)
		CHGG A 0 A_FireBullets(frandom(0, 20), frandom(0, 10), -1, random(15, 120), "Puff", 1|FBF_PUFFTRACER, random(1, 2048), "Tracer", -5, 0)
		CHGG AC 1
		CHGG C 0 A_SetPitch (0)
		CHGG C 0 A_CheckReload
		CHGG C 0 A_JumpIf(CallACS("ChaingunBurstMode")==4, "Ready")
		Goto BurstFire
	Flash:
		TNT1 A 0 A_JumpIf(CallACS("Recoil")==true, "FlashRecoil")
		TNT1 A 0 A_Jump (128, 3)
		CHGF A 1 Bright A_Light1
		TNT1 A 0 A_Jump (256, 2)
		CHGF B 1 Bright A_Light1
		TNT1 A 0
		Goto LightDone
	BurstFlash:
		TNT1 A 0 A_Jump (128, 3)
		CHGF A 1 Bright A_Light1
		TNT1 A 0 A_Jump (256, 2)
		CHGF B 1 Bright A_Light1
		TNT1 A 0
		Goto LightDone
	FlashRecoil:
		TNT1 A 0 A_JumpIfInventory ("HeavyUpgrade", 1, "HeavyFlash")
		TNT1 A 0 A_Jump (128, 4)
		CHGF A 0 A_Light1
		CHGF A 1 Bright A_SetPitch (0)
		TNT1 A 0 A_Jump (256, 3)
		CHGF B 0 A_Light1
		CHGF B 1 Bright A_SetPitch (0)
		TNT1 A 0 A_Light0
		TNT1 A 1 A_SetPitch (pitch-1)
		TNT1 A 1 A_SetPitch (pitch+0.5)
		TNT1 A 1 A_SetPitch (pitch+0.25)
		TNT1 AA 1 A_SetPitch (pitch+0.125)
		TNT1 A 1 A_SetPitch (0)
		Goto LightDone
	HeavyFlash:
		TNT1 A 0 A_Jump (128, 4)
		CHGF A 0 A_Light1
		CHGF A 1 Bright A_SetPitch (0)
		TNT1 A 0 A_Jump (256, 3)
		CHGF B 0 A_Light1
		CHGF B 1 Bright A_SetPitch (0)
		TNT1 A 0 A_light0
		TNT1 A 1 A_SetPitch (pitch-2)
		TNT1 AA 1 A_SetPitch (pitch+0.5)
		TNT1 AA 1 A_SetPitch (pitch+0.25)
		TNT1 AA 1 A_SetPitch (pitch+0.125)
		TNT1 A 1 A_SetPitch (0)
		Goto LightDone
	}
}

ACTOR RNGRPG : RocketLauncher 
{
	Weapon.SelectionOrder 2500
	Weapon.SlotNumber 5
	Weapon.AmmoUse 1
	Weapon.AmmoType "RocketAmmo"
	States
	{
	Ready:
		MISG A 0 A_CheckReload
		MISG A 1 A_WeaponReady
		Loop
	Select:
		MISG A 1 A_Raise
		Loop
	Deselect:
		MISG A 1 A_Lower
		Loop
	Fire:
		MISG A 0 A_GunFlash
		MISG A 0 A_StartSound ("RLauncher")
		MISG A 0 A_JumpIfInventory ("RocketUpgrade", 1, 9)
		MISG A 0 A_JumpIf(CallACS("AlwaysCritical")==true, 4)
		MISG A 0 A_Jump (12, 3)
		MISG A 0 A_FireProjectile ("RNGRocket", frandom(-4, 4), true, 0, -10)
		MISG A 0 A_Jump (256, 4)
		MISG A 0 A_StartSound ("Crit2", 1, CHANF_OVERLAP)
		MISG A 0 A_StartSound ("Crit", 1, CHANF_OVERLAP)
		MISG A 0 A_FireProjectile ("RNGCrocket", frandom(-4, 4), true, 0, -10)
		MISG A 0 A_Jump (256, 23)
		MISG A 0 A_JumpIfInventory("RocketAmmo", 5, 5)
		MISG A 0 A_JumpIfInventory("RocketAmmo", 4, 13)
		MISG A 0 A_JumpIfInventory("RocketAmmo", 3, 14)
		MISG A 0 A_JumpIfInventory("RocketAmmo", 2, 15)
		MISG A 0 A_JumpIfInventory("RocketAmmo", 1, 16)
		MISG A 0 A_TakeInventory ("RocketAmmo", 5)
		MISG A 0 A_FireProjectile ("MultiRocket", -4, false, 0, -10)
		MISG A 0 A_FireProjectile ("MultiRocket", 4, false, 0, -10)
		MISG A 0 A_FireProjectile ("MultiRocket", -2, false, 0, -10)
		MISG A 0 A_FireProjectile ("MultiRocket", 2, false, 0, -10)
		MISG A 0 A_FireProjectile ("MultiRocket", 0, false, 0, -10)
		MISG A 0 A_Jump(256, 11)
		MISG A 0 A_TakeInventory ("RocketAmmo", 1)
		MISG A 0 A_FireProjectile ("MultiRocket", -4, false, 0, -10)
		MISG A 0 A_TakeInventory ("RocketAmmo", 1)
		MISG A 0 A_FireProjectile ("MultiRocket", 4, false, 0, -10)
		MISG A 0 A_TakeInventory ("RocketAmmo", 1)
		MISG A 0 A_FireProjectile ("MultiRocket", -2, false, 0, -10)
		MISG A 0 A_TakeInventory ("RocketAmmo", 1)
		MISG A 0 A_FireProjectile ("MultiRocket", 2, false, 0, -10)
		MISG A 0 A_TakeInventory ("RocketAmmo", 1)
		MISG A 0 A_FireProjectile ("MultiRocket", 0, false, 0, -10)
		MISG FG 1
		MISG C 2
		MISG E 4
		MISG D 3
		MISG C 2
		MISG B 2
		MISG GF 1
		MISG A 2
		MISG A 0 A_ReFire
		Goto Ready
	Flash:
		TNT1 A 0 A_JumpIf(CallACS("Recoil")==true, "FlashRecoil")
		MISF A 1 Bright A_Light(3)
		MISF B 1 Bright A_Light(2)
		MISF C 1 Bright A_Light(2)
		MISF D 1 Bright A_Light(1)
		MISF E 1 Bright A_Light(1)
		Goto LightDone
	FlashRecoil:
		MISF A 0 Bright A_Light (3)
		MISF A 1 A_SetPitch (0)
		MISF B 0 Bright A_Light (2)
		MISF B 1 A_SetPitch (pitch-6)
		MISF C 0 Bright A_Light (2)
		MISF C 1 A_SetPitch (pitch+1)
		MISF D 0 Bright A_Light (2)
		MISF D 1 A_SetPitch (pitch+1)
		MISF D 0 Bright A_Light (1)
		MISF E 1 A_SetPitch (pitch+0.5)
		TNT1 A 0 A_Light0
		TNT1 A 1 A_SetPitch (pitch+0.5)
		TNT1 AAAAAAAA 1 A_SetPitch (pitch+0.25)
		TNT1 AAAAAAAA 1 A_SetPitch (pitch+0.125)
		Goto LightDone
	Spawn:
		LAUN A -1
		Stop
	}
}

ACTOR RNGPlasma : PlasmaRifle 
{
	Weapon.SelectionOrder 100
	Weapon.SlotNumber 6
	Weapon.AmmoUse 1
	Weapon.AmmoType "Cell"
	States
	{
	Ready:
		TNT1 A 0 A_JumpIfInventory ("RailUpgrade", 1, "RailReady")
		PLSM A 1 A_WeaponReady
		Loop
	RailReady:
		RAIL A 1 A_WeaponReady
		Loop
	Select:
		TNT1 A 0 A_JumpIfInventory ("RailUpgrade", 1, "RailSelect")
		PLSM A 1 A_Raise (5)
		Loop
	RailSelect:
		RAIL A 1 A_Raise (5)
		Loop
	Deselect:
		TNT1 A 0 A_JumpIfInventory ("RailUpgrade", 1, "RailDeselect")
		PLSM A 1 A_Lower (5)
		Loop
	RailDeselect:
		RAIL A 1 A_Lower (5)
		Loop
	Fire:
		//PLSM A 0 A_Jump(ACS_NamedExecuteWithResult("MalfunctionChance", 0), "FireBeams")
		TNT1 A 0 A_JumpIfInventory ("RailUpgrade", 1, "RailFire")
		PLSM A 0 A_GunFlash
		PLSM A 0 A_StartSound ("Plasma", 1, CHANF_OVERLAP)
		PLSM A 0 A_FireProjectile ("RNGPlasmaBall", frandom(-6, 6), true, 0, -9)
		TNT1 A 3
		PLSM A 0 A_ReFire
		PLSM A 2 A_CheckReload
		PLSM B 3
		PLSM C 6
		PLSM B 4
		PLSM A 2
		Goto Ready
	RailFire:
		RAIL A 0 A_GunFlash
		RAIL A 0 A_StartSound ("Railgun", 1, CHANF_OVERLAP)
		RAIL A 0 A_FireProjectile ("NailFlechette", frandom(-1, 1), true, 0, -5, 1, frandom(-1, 1))
		RAIL A 1 A_WeaponOffset (0, 42)
		RAIL AAAAAAAAAA 1 A_WeaponOffset (0, -1, WOF_ADD)
		RAIL A 8
		Goto Ready
	/*FireBeams:
		TNT1 A 0 A_JumpIf(GetCVar("sv_infiniteammo")==1, 2)
		TNT1 A 0 A_TakeInventory ("Cell", 30)
		PLSM D 0 A_RailAttack (0, 0, False, None, None, 0, 0, "None", 0, 0, 1, 1)
		PLSM DDD 0 A_CustomRailGun (random(50, 150), 0, None, "5353FF",RGF_FULLBRIGHT, 0, 0, "none", 0, 0, 0, 5)
		PLSM D 3
		PLSM E 8
		PLSM F 12
		PLSM D 2
		Goto Ready*/
	Flash:
		TNT1 A 0 A_JumpIfInventory ("RailUpgrade", 1, "Flash2")
		TNT1 A 0 A_JumpIf(CallACS("Recoil")==true, "FlashRecoil")
		PLSF A 1 A_Light (-1)
		PLSF B 2 A_Light (-0.5)
		Goto LightDone
	Flash2:
		TNT1 A 1
		Goto LightDone
	FlashRecoil:
		PLSF A 0 A_Light (-1)
		PLSF A 1 Bright A_SetPitch (0)
		PLSF B 0 A_Light (-0.5)
		PLSF B 1 Bright A_SetPitch (pitch-1.5)
		PLSF B 0 A_Light (-0.5)
		PLSF B 1 Bright A_SetPitch (pitch+0.25)
		TNT1 A 0 A_Light0
		TNT1 A 1 A_SetPitch (pitch+0.25)
		TNT1 AAAA 1 A_SetPitch (pitch+0.125)
		TNT1 AAAAAAAA 1 A_SetPitch (pitch+0.0625)
		TNT1 A 1 A_SetPitch (0)
		Goto LightDone
	Spawn:
		PLAS A -1
		Stop
	}
}

ACTOR RNGBFG : BFG9000
{
	Weapon.SelectionOrder 2800
	Weapon.AmmoUse 30
	Weapon.AmmoType "Cell"
	States
	{
	Ready:
		BFGG A 0 A_JumpIfInventory ("BFGUpgrade", 1, "BigReady")
		BFGG A 0 A_CheckReload
		BFGG A 1 A_WeaponReady
		Loop
	BigReady:
		SBFG A 0 A_CheckReload
		SBFG A 1 A_WeaponReady
		Loop
	Select:
		BFGG A 0 A_JumpIfInventory ("BFGUpgrade", 1, "BigSelect")
		BFGG A 1 A_Raise (3)
		Loop
	BigSelect:
		SBFG A 1 A_Raise (3)
		Loop
	Deselect:
		BFGG A 0 A_JumpIfInventory ("BFGUpgrade", 1, "BigDeselect")
		BFGG A 1 A_Lower (3)
		Loop
	BigDeselect:
		SBFG A 1 A_Lower (3)
		Loop
	Fire:
		TNT1 A 0 A_JumpIfInventory ("BFGUpgrade", 1, "BigFire")
		TNT1 A 0 A_Jump (ACS_NamedExecuteWithResult("MalfunctionChance", 0), "FireExplode")
		BFGG B 20 A_StartSound ("BFG9000")
		BFGG A 0 A_GunFlash
		BFGG A 0 A_FireProjectile ("RNGBFGBall", random(-5, 5), true, 0, -10)
		BFGG C 10
		BFGG E 10
		BFGG D 10
		BFGG C 8
		BFGG B 2
		Goto Ready
	BigFire:
		SBFG B 20 A_StartSound ("BFG9000")
		SBFG A 0 A_GunFlash
		SBFG A 0 A_RailAttack (0, 0, True, None, None, 0, 0, "None", 0, 0, 1, 1)
		SBFG A 2 A_CustomRailGun (random(200, 1500),0, None, "00FF00",RGF_SILENT|RGF_FULLBRIGHT, 0, 0, None, 0.1, 0, 0, 7, 1, 0, None, -8)
		SBFG C 2
		SBFG E 6
		SBFG D 10
		SBFG C 10
		SBFG B 8
		SBFG A 2
		Goto Ready
	FireExplode:
		BFGG B 20 A_StartSound ("BFGSquib")
		BFGG A random(8, 35)
		BFFG A 0 A_StartSound("weaponsbfgx", 1, CHANF_OVERLAP)
		BFFG A 0 A_StartSound("BFGExplode", 1)
		BFFG A 1 A_FireProjectile("InstableBFGBall", 0, 1, 0, -8, 0, 90)
		BFFG A 15
		BFFG A 1 A_TakeInventory ("RNGBFG")
		Goto Ready
	Flash:
		BFGF A 1 Bright A_Light (-6)
		BFGF B 1 Bright A_Light (6)
		Goto LightDone
	Spawn:
		BFUG A -1
		Stop
	}
}

ACTOR PickupChainsaw : CustomInventory
{
	Inventory.PickupMessage "$GOTCHAINSAW"
	Inventory.PickupSound "PickupSound"
	States
	{
	Spawn:
		CSAW A -1
		Stop
	Pickup:
		TNT1 A 0 A_GiveInventory ("RNGChainsaw")
		Stop
	}
}
ACTOR DoubleBarChainsaw : CustomInventory
{
	Inventory.PickupMessage "$GOTDBLSAW"
	Inventory.PickupSound "PickupSound"
	States
	{
	Spawn:
		DBSW A -1
		Stop
	Pickup:
		TNT1 A 0 A_GiveInventory ("RNGChainsaw")
		TNT1 A 0 A_GiveInventory ("DblSawUpgrade")
		Stop
	}
}
ACTOR ChainsawSpawner : RandomSpawner replaces Chainsaw
{
	DropItem "PickupChainsaw", 256, 14
	DropItem "DoubleBarChainsaw", 256, 1
}

ACTOR PickupPistol : CustomInventory
{
	Inventory.PickupMessage "$GOTPISTOL"
	Inventory.PickupSound "PickupSound"
	States
	{
	Spawn:
		PIST A -1
		Stop
	Pickup:
		TNT1 A 0 A_GiveInventory ("RNGPistol")
		TNT1 A 0 A_GiveInventory ("Clip", random(1, 30))
		Stop
	}
}
ACTOR DeagleUpgrade : CustomInventory
{
	Inventory.PickupMessage "$GOTPISTOLUPGRADE"
	Inventory.PickupSound "PickupSound"
	States
	{
	Spawn:
		DGLE A -1
		Stop
	Pickup:
		TNT1 A 0 A_GiveInventory ("RNGPistol")
		TNT1 A 0 A_GiveInventory ("PistolUpgrade", 1)
		TNT1 A 0 A_GiveInventory ("Clip", random(1, 30))
	}
}
ACTOR PistolSpawner : RandomSpawner replaces Pistol
{
	DropItem "PickupPistol", 256, 9
	DropItem "DeagleUpgrade", 256, 1
}

ACTOR PickupShotgun : CustomInventory
{
	Inventory.PickupMessage "$GOTSHOTGUN"
	Inventory.PickupSound "PickupSound"
	States
	{
	Spawn:
		SHOT A -1
		Stop
	Pickup:
		TNT1 A 0 A_GiveInventory ("RNGShotgun")
		TNT1 A 0 A_GiveInventory ("Shell", random(1, 16))
		Stop
	}
}
ACTOR AutoShotgun : CustomInventory
{
	Inventory.PickupMessage "$GOTAUTOSHOTGUN"
	Inventory.PickupSound "PickupSound"
	States
	{
	Spawn:
		ASGN A -1
		Stop
	Pickup:
		TNT1 A 0 A_GiveInventory ("AutoUpgrade")
		TNT1 A 0 A_GiveInventory ("RNGShotgun")
		TNT1 A 0 A_GiveInventory ("Shell", random(1, 16))
		Stop
	}
}
ACTOR SGSpawner : RandomSpawner replaces Shotgun
{
	DropItem "PickupShotgun", 256, 11
	Dropitem "AutoShotgun", 256, 1
}
ACTOR PickupSShotgun : CustomInventory
{
	Inventory.PickupMessage "$GOTSHOTGUN2"
	Inventory.PickupSound "PickupSound"
	States
	{
	Spawn:
		SGN2 A -1
		Stop
	Pickup:
		TNT1 A 0 A_GiveInventory ("RNGSShotgun")
		TNT1 A 0 A_GiveInventory ("Shell", random(1, 16))
	}
}
ACTOR QuadSShotgun : CustomInventory
{
	Inventory.PickupMessage "$GOTQUADSSG"
	Inventory.PickupSound "PickupSound"
	States
	{
	Spawn:
		QSGN A -1
		Stop
	Pickup:
		TNT1 A 0 A_GiveInventory ("QuadUpgrade")
		TNT1 A 0 A_GiveInventory ("RNGSShotgun")
		TNT1 A 0 A_GiveInventory ("Shell", random(1, 16))
	}
}
ACTOR SSGSpawner : RandomSpawner replaces SuperShotgun
{
	DropItem "PickupSShotgun", 256, 2
	Dropitem "QuadSShotgun", 256, 1
}

ACTOR PickupChaingun : CustomInventory 
{
	Inventory.PickupMessage "$GOTCHAINGUN"
	Inventory.PickupSound "PickupSound"
	States
	{
	Spawn:
		MGUN A -1
		Stop
	Pickup:
		TNT1 A 0 A_GiveInventory ("RNGChaingun")
		TNT1 A 0 A_GiveInventory ("Clip", random(1, 200))
		Stop
	}
}
ACTOR ChaingunUpgrade : CustomInventory
{
	Inventory.PickupMessage "$GOTCHGUNUPGRADE"
	Inventory.PickupSound "PickupSound"
	States
	{
	Spawn:
		MGUN A -1
		Stop
	Pickup:
		TNT1 A 0 A_GiveInventory ("HeavyUpgrade")
		TNT1 A 0 A_GiveInventory ("RNGChaingun")
		TNT1 A 0 A_GiveInventory ("Clip", random(1, 200))
		Stop
	}
}
ACTOR ChaingunSpawner : RandomSpawner replaces Chaingun
{
	DropItem "PickupChaingun", 256, 4
	DropItem "ChaingunUpgrade", 256, 1
}

ACTOR PickupRLauncher : CustomInventory
{
	Inventory.PickupMessage "$GOTLAUNCHER"
	Inventory.PickupSound "PickupSound"
	States
	{
	Spawn:
		LAUN A -1
		Stop
	Pickup:
		TNT1 A 0 A_GiveInventory ("RNGRPG")
		TNT1 A 0 A_GiveInventory ("RocketAmmo", random(1, 8))
		Stop
	}
}
ACTOR PickupMultiRocket : CustomInventory
{
	Inventory.PickupMessage "$GOTROCKETUPGRADE"
	Inventory.PickupSound "PickupSound"
	States
	{
	Spawn:
		LAUN A -1
		Stop
	Pickup:
		TNT1 A 0 A_GiveInventory ("PickupRLauncher")
		TNT1 A 0 A_GiveInventory ("RocketUpgrade")
		Stop
	}
}
ACTOR RLauncherSpawner : RandomSpawner replaces RocketLauncher
{
	DropItem "PickupRLauncher", 256, 9
	DropItem "PickupMultiRocket", 256, 1
}

ACTOR PickupPlasma : CustomInventory replaces PlasmaRifle
{
	Inventory.PickupMessage "$GOTPLASMA"
	Inventory.PickupSound "PickupSound"
	States
	{
	Spawn:
		PLAS A -1
		Stop
	Pickup:
		TNT1 A 0 A_GiveInventory ("RNGPlasma")
		TNT1 A 0 A_GiveInventory ("Cell", random(1, 3))
		Stop
	}
}

ACTOR PickupBFG : CustomInventory replaces BFG9000
{
	Inventory.PickupMessage "$GOTBFG9000"
	Inventory.PickupSound "PickupSound"
	States
	{
	Spawn:
		BFUG A -1
		Stop
	Pickup:
		TNT1 A 0 A_GiveInventory ("RNGBFG")
		TNT1 A 0 A_GiveInventory ("Cell", random(1, 45))
		Stop
	}
}

ACTOR RandomClip : CustomInventory replaces Clip
{
	Inventory.PickupMessage "$GOTBULLETS"
	States
	{
	Spawn:
		CLIP A -1
		Stop
	Pickup:
		TNT1 A 0 A_GiveInventory("Clip", random(1,15))
		Stop
	}
}
ACTOR RandomAmmoBox : CustomInventory replaces ClipBox
{
	Inventory.PickupMessage "$GOTAMMOBOX"
	States
	{
	Spawn:
		AMMO A -1
		Stop
	Pickup:
		TNT1 A 0 A_GiveInventory("Clip", random(1, 100))
		Stop
	}
}

ACTOR RandomShells : CustomInventory replaces Shell
{
	Inventory.PickupMessage "$GOTSHELLS"
	States
	{
	Spawn:
		SHEL A -1
		Stop
	Pickup:
		TNT1 A 0 A_GiveInventory("Shell", random(1,8))
		Stop
	}
}
ACTOR RandomShellBox : CustomInventory replaces ShellBox
{
	Inventory.PickupMessage "$GOTSHELLBOX"
	States
	{
	Spawn:
		SBOX A -1
		Stop
	Pickup:
		TNT1 A 0 A_GiveInventory("Shell", random(1, 25))
		Stop
	}
}

ACTOR RandomRocket : CustomInventory replaces RocketAmmo
{
	Inventory.PickupMessage "$GOTROCKET"
	States
	{
	Spawn:
		ROCK A -1
		Stop
	Pickup:
		TNT1 A 0 A_GiveInventory("RocketAmmo", random(1, 2))
		Stop
	}
}
ACTOR RandomRPGBox : CustomInventory replaces RocketBox
{
	Inventory.PickupMessage "$GOTRPGBOX"
	States
	{
	Spawn:
		BROK A -1
		Stop
	Pickup:
		TNT1 A 0 A_GiveInventory("RocketBox", random(1, 10))
		Stop
	}
}

ACTOR RandomCell : CustomInventory replaces Cell
{
	Inventory.PickupMessage "$GOTCELL"
	States
	{
	Spawn:
		CELL A -1
		Stop
	Pickup:
		TNT1 A 0 A_GiveInventory("Cell", random(1, 25))
		Stop
	}
}
ACTOR RandomCellPack : CustomInventory replaces CellPack
{
	Inventory.PickupMessage "$GOTCELLBOX"
	States
	{
	Spawn:
		CELP A -1
		Stop
	Pickup:
		TNT1 A 0 A_GiveInventory("CellPack", random(1, 140))
		Stop
	}
}

ACTOR RandomHealth : CustomInventory replaces HealthBonus
{
	Inventory.PickupMessage "$GOTHTHBONUS"
	States
	{
	Spawn:
		BON1 ABCDCB 6
		Loop
	Pickup:
		TNT1 A 0 A_GiveInventory ("HealthBonus", random(1, 2))
		Stop
	}
}

ACTOR RandomArmBonus : CustomInventory replaces ArmorBonus
{
	Inventory.PickupMessage "$GOTARMBONUS"
	States
	{
	Spawn:
		BON2 ABCDCB 6
		Loop
	Pickup:
		TNT1 A 0 A_GiveInventory ("ArmorBonus", random(1, 2))
		Stop
	}
}

ACTOR RandomStimpack : CustomInventory replaces Stimpack
{
	Inventory.PickupMessage "$GOTSTIM"
	States
	{
	Spawn:
		STIM A -1
		Stop
	Pickup:
		TNT1 A 0 A_GiveInventory ("Health", random(1, 15))
		Stop
	}
}

ACTOR RandomMedkit : CustomInventory replaces MediKit
{
	Inventory.PickupMessage "$GOTMEDIKIT"
	States
	{
	Spawn:
		MEDI A -1
		Stop
	Pickup:
		TNT1 A 0 A_GiveInventory ("Health", random(1, 75))
		Stop
	}
}

ACTOR RandomBerserk : CustomInventory replaces Berserk
{
	+COUNTITEM
	+INVENTORY.ALWAYSPICKUP
	Inventory.PickupMessage "$GOTBERSERK"
	Inventory.PickupSound "miscp_pkup"
	States
	{
	Spawn:
		PSTR A -1
		Stop
	Pickup:
		TNT1 A 0 A_GiveInventory("PowerStrength")
		TNT1 A 0 HealThing(random(50, 100), 0)
		TNT1 A 0 A_SelectWeapon("RNGFist")
		Stop
	}
}

ACTOR RandomBackpack : CustomInventory
{
	Height 26
	Inventory.PickupMessage "$GOTBACKPACK"
	states
	{
	Spawn:
		BPAK A -1
		Stop
	Pickup:
		TNT1 A 0 A_Jump (48, 2)
		TNT1 A 0 A_GiveInventory ("Health", random(1, 25))
		TNT1 A 0 ACS_NamedExecute ("DoubleAmmoCapacity")
		TNT1 A 0 A_GiveInventory ("Clip", random(1, 15))
		TNT1 A 0 A_GiveInventory ("Shell", random(1, 8))
		TNT1 A 0 A_GiveInventory ("RocketAmmo", random(1, 4))
		TNT1 A 0 A_GiveInventory ("Cell", random(1, 40))
		TNT1 A 0 A_GiveInventory ("DoubleAmmoOnce")
		Stop
	}
}
ACTOR BackpackSpawner : RandomSpawner replaces Backpack
{
	DropItem "RandomBackpack", 256, 1
}

ACTOR RandomBarrel : ExplosiveBarrel
{
	States
	{
	Spawn:
		BAR1 A 0 A_SetHealth (random(1, 40))
		Goto Idle
	Idle:
		BAR1 ABCB 6
		Loop
	Death:
		BEXP A random(5, 13)
		BEXP B random(5, 20)
		TNT1 A 0 A_SpawnItemEx ("BarrelShrapnel")
		BEXP C 0 A_StartSound ("worldbarrelx")
		BEXP C 5 A_Explode (random(50, 150), random(32, 256))
		BEXP D 5
		BEXP E 10 Bright
		Stop
	}
}
ACTOR RandomPowderBarrel : RandomBarrel
{
	States
	{
	Spawn:
		PWDR A 0 A_SetHealth (random(5, 60))
		PWDR A 1
		Wait
	Death:
		PWDR A Random(1, 40)
		PWDR B 2 A_StartSound ("worldbarrelx")
		PWDR C 0 A_Explode (random(75, 300), random(32, 512))
		PWDR C 0 A_CustomBulletAttack (280, 280, random(8, 40), random(1, 60), "Puff", random(64, 512))
		PWDR C 3 Bright
		Stop
	}
}
ACTOR BarrelSpawner : RandomSpawner replaces ExplosiveBarrel
{
	DropItem "RandomBarrel", 256, 11
	DropItem "RandomPowderBarrel", 256, 1
}

ACTOR NailFlechette : FastProjectile
{
	Speed 250
	Radius 10
	Height 1
	+ROCKETTRAIL
	MissileType "NailTrail"
	Projectile
	States
	{
	Spawn:
		//TNT1 A 0 A_SpawnParticle ("White", 1, 24, 1, 0, 0, 0, 0, frandom(-0.2, 0.2), frandom(-0.2, 0.2), 0, 0, 0, 0)
		NAIL A 1
		Loop
	Death:
		TNT1 A 0 A_Explode (random(80, 240), random(56, 64), 0)
		Stop
	}
}

ACTOR RNGRocket : FastProjectile replaces Rocket
{
	Speed 40
	Damage 0
	Radius 8
	Height 8
	+ROCKETTRAIL
	MissileType "SmokeTrail"
	DeathSound "weaponsrocklx"
	Projectile
	States
	{
	Spawn:
		MISL A 1 A_Jump (256, "Looping")
	Looping:
		MISL A 0 A_ScaleVelocity (frandom(0.5, 1.75))
		MISL A 1 
		Wait
	Death:
		MISL B 3 Bright A_Explode (random(80, 275), random(128, 256))
		MISL C 6 Bright
		MISL D 9 Bright
		Stop
	}
}
ACTOR MultiRocket : FastProjectile
{
	Speed 40
	Damage 0
	Radius 11
	Height 8
	+ROCKETTRAIL
	MissileType "SmokeTrail"
	DeathSound "weaponsrocklx"
	Projectile
	States
	{
	Spawn:
		MISL A 1
		Loop
	Death:
		MISL B 3 Bright A_Explode (random(50, 200), 128)
		MISL C 6 Bright
		MISL D 9 Bright
		Stop
	}
}
ACTOR Tracer : FastProjectile
{
	Speed 100
	Radius 1
	Height 1
	RenderStyle Add
	States
	{
	Spawn:
		TRAC A 1
		TRAC A 1 A_FadeTo (0.0, 0.5, FTF_Remove)
		Stop
	Death:
		TNT1 A 1
		Stop
	}
}
ACTOR RNGCrocket : FastProjectile
{
	Speed 40
	Damage 0
	Radius 11
	Height 8
	MissileType "CritSmoke"
	+ROCKETTRAIL
	DeathSound "weaponsrocklx"
	Projectile
	States
	{
	Spawn:
		MISC A 1 A_Jump (256, "Looping")
	Looping:
		MISC A 0 Bright A_ScaleVelocity (frandom(0.5, 1.75))
		MISC A 1 Bright
		Wait
	Death:
		TNT1 A 0 A_SpawnItemEx ("CritExplosion", 0, 0, 0)
		TNT1 A 0 A_Quake (9, 2, 0, 512)
		MISL B 3 Bright A_Explode (random(200, 840), random(192, 384))
		MISL C 6 Bright
		MISL D 9 Bright
		Stop
	}
}
ACTOR RNGPLasmaBall : FastProjectile replaces PlasmaBall
{
	Speed 50
	Radius 8
	Height 8
	Projectile
	DeathSound "weaponsplasmax"
	States
	{
	Spawn:
		PLSS A 1 A_Jump (256, "Looping")
	Looping:
		PLSS A 0 A_ScaleVelocity (frandom(0.5, 2))
		PLSS AB 2 Bright
		Wait
	Death:
		PLSE A 3 Bright A_Explode (random(10, 100), 100, 0)
		PLSE B 4 Bright
		PLSE C 5 Bright
		PLSE D 6 Bright
		PLSE E 7 Bright
		Stop
	}
}
ACTOR RNGBFGBall : FastProjectile
{
	Speed 20
	Radius 12
	Height 12
	Projectile
	DeathSound "weaponsbfgx"
	States
	{
	Spawn:
		BFS1 AB 4 Bright
		Loop
	Death:
		BFE1 A 0 A_Explode (random(100, 1000), 400)
		BFE1 A random(1, 3) A_BFGSpray ("NullBFG", random(1, 90), random(50, 500), random(-32, 32), random(1, 2048))
		BFE1 B random(2, 4)
		BFE1 C random(3, 5)
		BFE1 D random(4, 6)
		BFE1 E random(5, 7)
		BFE1 F random(6, 8)
		Stop
	}
}

ACTOR InstableBFGBall : FastProjectile
{
	Speed 9999
	Radius 12
	Height 12
	Projectile
	States
	{
	Spawn:
		BFS1 AB 1 Bright
		Loop
	Death:
		//TNT1 A 0 A_Quake (9, 25, 0, 500, None)
		//TNT1 A 0 A_Quake (6, 40, 0, 1000, None)
		//TNT1 A 0 A_Quake (3, 55, 0, 1500, None)
		//TNT1 A 0 A_Quake (1, 70, 0, 2000, None)
		TNT1 A 0 A_QuakeEx (9, 9, 9, 190, 0, 500, None, QF_SCALEDOWN, 0.0, 0.0, 0.0, 2000)
		TNT1 A 0 A_Explode (50000, 100000, 1, 0)
		TNT1 A 0 A_BFGSpray("NullBFG", 360, 10000, 360, 2000, 2000)
		TNT1 A 70
		Stop
	}
}

ACTOR NullBFG : BFGExtra
{
	states
	{
	Spawn:
		TNT1 A 1
		Stop
	}
}

ACTOR BloodParticle
{
	Radius 1
	Height 1
	Gravity 0.4
	+ALLOWPARTICLES
	+NOBLOCKMAP
	+NOCLIP
	states
	{
	Spawn:
		BLDD ABCD 7
		TNT1 A 0 A_SetTranslucent(0.6)
		BLDD E 7
		TNT1 A 0 A_SetTranslucent(0.3)
		BLDD F 7
		Stop
	}
}

ACTOR BloodDrop 
{
	Gravity 0.2
	+NOBLOCKMAP
	+NOTELEPORT
	+NOCLIP
	states
	{
	Spawn:
		BLDD ABCDEF 3
		Stop
	}
}

ACTOR BloodSplat : BloodParticle
{
	states
	{
	Spawn:
		TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 0 A_SpawnItemEx ("BloodParticle", random(-20, 20), random(-20, 20), random(7, 57), frandom(-4 ,4), frandom(-4, 4), frandom(1, 6))
		TNT1 A 1
		Stop
	}
}

ACTOR Puff
{
	+NOBLOCKMAP
	+NOGRAVITY
	VSpeed 0
	states
	{
	Spawn:
		TNT1 AAAA 0 A_SpawnItemEx ("ImpactSmoke", 0.0, 0.0, -15.0, frandom(-0.2, 0.2), frandom(-0.2, 0.2), frandom(0, 0.5)) 
		//PUFG ABCDEF 1 Bright
		//PUFG GHI 2 Bright
		PUFG A 1 Bright
		BPUF B 1 Bright
		BPUF CDE 2 Bright
		Stop
	Melee:
		BPUF DE 4 Bright
		//PUFG BCDE 2 Bright
		Stop
	}
}
ACTOR PuffSmoke
{
	Radius 1
	Height 1
	Gravity 0
	+NOCLIP
	+NOBLOCKMAP
	+NOINTERACTION
	States
	{
	Spawn:
		SMOK ABCD 4
		Stop
	}
}
ACTOR ImpactSmoke : PuffSmoke
{
	Radius 0.5
	Height 0.5
	States
	{
	Spawn:
		SMOK A 6
		SMOK BCD 6 A_FadeTo (0.0, 0.25)
		Stop
	}
}
ACTOR BarrelSmoke
{
	Radius 1
	Height 1
	Gravity 0
	+NOBLOCKMAP
	+NOINTERACTION
	States
	{
	Spawn:
		SMOK BCDEFGH 10
		Stop
	}
}
ACTOR BarrelShrapnel : BarrelSmoke
{
	+ROCKETTRAIL
	MissileType "BarrelSmoke"
	States
	{
	Spawn:
		TNT1 AAAAAAAAAAAAA 0 A_SpawnItemEx ("BarrelSmoke", frandom(-10, 10), frandom(-10, 10), frandom(6, 26), frandom(-1, 1), frandom(-1, 1), frandom(-1, 1))
		TNT1 AAAAAAAAAAAAA 0 A_SpawnItemEx ("BarrelSmoke", frandom(-10, 10), frandom(-10, 10), frandom(6, 26), frandom(-1, 1), frandom(-1, 1), frandom(-1, 1))
		TNT1 AAAAAAAAAAAAA 0 A_SpawnItemEx ("BarrelSmoke", frandom(-10, 10), frandom(-10, 10), frandom(6, 26), frandom(-1, 1), frandom(-1, 1), frandom(-1, 1))
		TNT1 AAAAAAAAAAAAA 0 A_SpawnItemEx ("BarrelSmoke", frandom(-10, 10), frandom(-10, 10), frandom(6, 26), frandom(-1, 1), frandom(-1, 1), frandom(-1, 1))
		TNT1 A 1
		Stop
	}
}

ACTOR NailTrail : RocketSmokeTrail
{
	Alpha 1.0
	Vspeed 0
	States
	{
	Spawn:
		PART ABC 1 A_ChangeVelocity (frandom(-2, 2), 0, frandom(-2, 2))
		Stop
	}
}

ACTOR SmokeTrail : RocketSmokeTrail
{
	Alpha 1.0
	Vspeed 0
	States
	{
	Spawn:
		TNT1 A 0 A_SpawnItemEx ("PuffSmoke", -5, 0, 0, frandom(0.4, -0.4), frandom(0.4, -0.4), frandom(0.4, -0.4))
		TNT1 A 1 A_SpawnItemEx ("PuffSmoke", -5, 0, 0, frandom(0.4, -0.4), frandom(0.4, -0.4), frandom(0.4, -0.4))
		Stop
	Death:
		TNT1 A 1
		Stop
	}
}
ACTOR CritSmoke : RocketSmokeTrail
{
	Radius 1
	Height 1
	Alpha 1.0
	Vspeed 0
	+NOINTERACTION
	+NOCLIP
	+NOBLOCKMAP
	+BRIGHT
	States
	{
	Spawn:
		/*CRIT ABCDEFGHIJK 3 A_ChangeVelocity(frandom(0.2, -0.2), frandom(0.2, -0.2), frandom(0.2, -0.2))
		CRIT L 0 A_SetTranslucent(0.8)
		CRIT L 3 A_ChangeVelocity(frandom(0.2, -0.2), frandom(0.2, -0.2), frandom(0.2, -0.2))
		CRIT M 0 A_SetTranslucent(0.6)
		CRIT M 3 A_ChangeVelocity(frandom(0.2, -0.2), frandom(0.2, -0.2), frandom(0.2, -0.2))
		CRIT N 0 A_SetTranslucent(0.4)
		CRIT N 3 A_ChangeVelocity(frandom(0.2, -0.2), frandom(0.2, -0.2), frandom(0.2, -0.2))
		CRIT O 0 A_SetTranslucent(0.2)
		CRIT O 3 A_ChangeVelocity(frandom(0.2, -0.2), frandom(0.2, -0.2), frandom(0.2, -0.2))
		CRIT P 0 A_SetTranslucent(0)
		CRIT P 3 A_ChangeVelocity(frandom(0.2, -0.2), frandom(0.2, -0.2), frandom(0.2, -0.2))*/
		CRIT A 3 A_ChangeVelocity(frandom(0.2, -0.2), frandom(0.2, -0.2), frandom(0.2, -0.2))
		KRIT BCD 3 A_ChangeVelocity(frandom(0.2, -0.2), frandom(0.2, -0.2), frandom(0.2, -0.2))
		Stop
	}
}
ACTOR CritExplosion 
{
	States
	{
	Spawn:
		TNT1 AAAAAAAAAAAAAAAAA 0 A_SpawnItemEx ("CritPuff", -15, 0, 0)
		TNT1 AAAAAAAAAAAAAAAAA 0 A_SpawnItemEx ("CritPuff", -15, 0, 0)
		TNT1 A 1 A_SpawnItemEx ("CritPuff", -15, 0, 0)
		Stop
	}
}
ACTOR CritPuff
{
	Gravity 0
	+NOCLIP
	+NOBLOCKMAP
	States
	{
	Spawn:
		//CRIT ABCDEFGHIJKLMNOP 4 Bright A_ChangeVelocity (frandom(1, -1), frandom(1, -1), frandom(1, -1))
		CRIT A 8 A_ChangeVelocity (frandom(10, -10), frandom(10, -10), frandom(10, -10))
		KRIT BCD 8
		Stop
	}
}
ACTOR SquibBullets : Inventory
{
	Inventory.MaxAmount 1
}
ACTOR SquibShells : Inventory
{
	Inventory.MaxAmount 1
}
ACTOR PowerSSG : Inventory
{
	Inventory.MaxAmount 1
}
ACTOR NailShells : Inventory
{
	Inventory.MaxAmount 1
}
ACTOR First50BMGUse : Inventory
{
	Inventory.MaxAmount 1
}
ACTOR DblSawUpgrade : Inventory
{
	Inventory.MaxAmount 1
}
ACTOR PistolUpgrade : Inventory
{
	Inventory.MaxAmount 1
}
ACTOR AutoUpgrade : Inventory
{
	Inventory.MaxAmount 1
}
ACTOR QuadUpgrade : Inventory
{
	Inventory.MaxAmount 1
}
ACTOR Bursts : Inventory
{
	Inventory.MaxAmount 10
}
ACTOR HeavyUpgrade : Inventory
{
	Inventory.MaxAmount 1
}
ACTOR RocketUpgrade : Inventory
{
	Inventory.MaxAmount 1
}
ACTOR RailUpgrade : Inventory
{
	Inventory.MaxAmount 1
}
ACTOR BFGUpgrade : Inventory
{
	Inventory.MaxAmount 1
}
ACTOR RNGAmmo : Inventory
{
	Inventory.MaxAmount 1
}
ACTOR DoubleAmmoOnce : Inventory
{
	Inventory.MaxAmount 2
}
ACTOR Rage : Inventory
{
	+COUNTITEM
	+INVENTORY.PERSISTENTPOWER
	Inventory.MaxAmount 10
}